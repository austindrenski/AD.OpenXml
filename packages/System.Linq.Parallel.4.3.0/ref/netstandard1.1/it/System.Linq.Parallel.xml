<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Rappresenta una sequenza parallela e ordinata.</summary>
      <typeparam name="TSource">Tipo di elementi nell'insieme di origine.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la sequenza.</summary>
      <returns>Enumeratore che scorre la sequenza.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Fornisce un set di metodi per l'esecuzione di query su oggetti che implementano ParallelQuery{TSource}.È l'equivalente parallelo di <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applica in parallelo una funzione accumulatore a una sequenza.Questo overload non è disponibile nell'implementazione sequenziale.</summary>
      <returns>Il valore finale trasformato dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seedFactory">Funzione che restituisce il valore iniziale dell'accumulatore. </param>
      <param name="updateAccumulatorFunc">Funzione accumulatore da richiamare su ogni elemento in una partizione. </param>
      <param name="combineAccumulatorsFunc">Funzione accumulatore da richiamare sul risultato dell'accumulatore prodotto da ogni partizione.</param>
      <param name="resultSelector">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult">Il tipo del valore risultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="seedFactory" /> o <paramref name="updateAccumulatorFunc" /> o <paramref name="combineAccumulatorsFunc" /> o <paramref name="resultSelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Applica in parallelo una funzione accumulatore a una sequenza.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applica in parallelo una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore.</summary>
      <returns>Valore finale dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applica in parallelo una funzione accumulatore a una sequenza.Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore e la funzione specificata viene usata per selezionare il valore risultante.</summary>
      <returns>Il valore finale trasformato dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="func">Funzione accumulatore da richiamare per ogni elemento.</param>
      <param name="resultSelector">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult">Il tipo del valore risultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="resultSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applica in parallelo una funzione accumulatore a una sequenza.Questo overload non è disponibile nell'implementazione sequenziale.</summary>
      <returns>Il valore finale trasformato dell'accumulatore.</returns>
      <param name="source">Una sequenza su cui aggregare.</param>
      <param name="seed">Valore iniziale dell'accumulatore.</param>
      <param name="updateAccumulatorFunc">Funzione accumulatore da richiamare su ogni elemento in una partizione. </param>
      <param name="combineAccumulatorsFunc">Funzione accumulatore da richiamare sul risultato dell'accumulatore prodotto da ogni partizione. </param>
      <param name="resultSelector">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult">Il tipo del valore risultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="updateAccumulatorFunc" /> o <paramref name="combineAccumulatorsFunc" /> o <paramref name="resultSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determina in parallelo se tutti gli elementi di una sequenza soddisfano una condizione.</summary>
      <returns>True se ogni elemento della sequenza di origine supera il test per il predicato specificato o se la sequenza è vuota; in caso contrario, false.</returns>
      <param name="source">Sequenza ai cui elementi applicare il predicato.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Determina se una sequenza parallela contiene elementi.</summary>
      <returns>È true se la sequenza di origine contiene elementi; in caso contrario, false.</returns>
      <param name="source">Sequenza di cui verificare il contenuto.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determina in parallelo se un elemento di una sequenza soddisfa una condizione.</summary>
      <returns>È true se un qualsiasi elemento nella sequenza di origine supera il test nel predicato specificato; in caso contrario, false.</returns>
      <param name="source">Sequenza ai cui elementi sarà applicato il predicato.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Converte un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> in <see cref="T:System.Collections.Generic.IEnumerable`1" /> per forzare la valutazione sequenziale della query.</summary>
      <returns>Sequenza di input digitata come oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Sequenza di cui eseguire il cast come oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Consente di trattare un'origine dati come se fosse ordinata, eseguendo l'override dell'impostazione predefinita non ordinata.AsOrdered può essere richiamato solo in sequenze non generiche restituite da AsParallel, ParallelEnumerable.Range e ParallelEnumerable.Repeat.</summary>
      <returns>Sequenza di origine che manterrà l'ordine originale nei successivi operatori di query.</returns>
      <param name="source">Sequenza di input.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">generata se <paramref name="source" /> non contiene elementi-oppure-se AsOrdered viene chiamato a metà percorso tramite una query.Può essere chiamato immediatamente dopo <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> o <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Consente di trattare un'origine dati come se fosse ordinata, eseguendo l'override dell'impostazione predefinita non ordinata.AsOrdered può essere richiamato solo in sequenze generiche restituite da AsParallel, ParallelEnumerable.Range e ParallelEnumerable.Repeat.</summary>
      <returns>Sequenza di origine che manterrà l'ordine originale nei successivi operatori di query.</returns>
      <param name="source">Sequenza di input.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Generata se <paramref name="source" /> non contiene elementi-oppure-se <paramref name="source" /> non è AsParallel, ParallelEnumerable.Range o ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Consente la parallelizzazione di una query, come viene originata da un partitioner che è responsabile della suddivisione della sequenza di input in partizioni.</summary>
      <returns>Elemento <paramref name="source" /> come ParallelQuery da associare ai metodi di estensione ParallelEnumerable.</returns>
      <param name="source">Partitioner sulla sequenza di input.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Consente la parallelizzazione di una query.</summary>
      <returns>Origine come <see cref="T:System.Linq.ParallelQuery`1" /> da associare ai metodi di estensione ParallelEnumerable.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da convertire in <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Consente la parallelizzazione di una query.</summary>
      <returns>Origine come ParallelQuery da associare ai metodi di estensione ParallelEnumerable.</returns>
      <param name="source">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> da convertire in <see cref="T:System.Linq.ParallelQuery" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Converte un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> in <see cref="T:System.Collections.Generic.IEnumerable`1" /> per forzare la valutazione sequenziale della query.</summary>
      <returns>Origine come <see cref="T:System.Collections.Generic.IEnumerable`1" /> da associare ai metodi di estensione sequenziale.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.ParallelQuery`1" /> da convertire in <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Consente di trattare una query intermedia come se non vi fosse alcun ordinamento implicito tra gli elementi.</summary>
      <returns>Sequenza di origine con ordine arbitrario.</returns>
      <param name="source">Sequenza di input.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Restituisce la media della sequenza di valori.</returns>
      <param name="source">Sequenza di origine.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">Una sequenza di valori utilizzati per calcolare una media. La media della sequenza di valori <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcola in parallelo la media di una sequenza di valori.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma o il conteggio degli elementi della sequenza è superiore a <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcola in parallelo la media di una sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Media della sequenza dei valori.</returns>
      <param name="source">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
      <exception cref="T:System.OverflowException">Generata come eccezione interna in <see cref="T:System.AggregateException" />.La funzione <paramref name="selector" /> restituisce un valore maggiore di MaxValue per il tipo di elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Converte gli elementi di un oggetto ParallelQuery nel tipo specificato.</summary>
      <returns>Sequenza che contiene ogni elemento della sequenza di origine convertito nel tipo specificato.</returns>
      <param name="source">Sequenza che contiene gli elementi da convertire.</param>
      <typeparam name="TResult">Tipo in cui convertire gli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidCastException">Il tipo di sequenza di origine potrebbe non essere convertito a <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Questo overload di Concat non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatena due sequenze parallele.</summary>
      <returns>Sequenza che contiene gli elementi concatenati delle due sequenze di input.</returns>
      <param name="first">Prima sequenza da concatenare.</param>
      <param name="second">Sequenza da concatenare alla prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Determina in parallelo se una sequenza contiene un elemento specificato usando l'operatore di confronto di uguaglianza predefinito.</summary>
      <returns>È true se la sequenza di origine contiene un elemento con il valore specificato; in caso contrario, false.</returns>
      <param name="source">Sequenza in cui individuare un valore.</param>
      <param name="value">Valore da individuare nella sequenza .</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina in parallelo se una sequenza contiene un elemento specificato usando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>È true se la sequenza di origine contiene un elemento con il valore specificato; in caso contrario, false.</returns>
      <param name="source">Sequenza in cui individuare un valore.</param>
      <param name="value">Valore da individuare nella sequenza .</param>
      <param name="comparer">Operatore di confronto uguaglianze per confrontare valori.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce il numero di elementi in una sequenza parallela.</summary>
      <returns>Numero di elementi nella sequenza di input.</returns>
      <param name="source">Sequenza che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Il numero di elementi nel database di origine è maggiore di <see cref="F:System.Int32.MaxValue" />.(In questo caso l'InnerException è <see cref="T:System.OverflowException" />) oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce un valore che rappresenta il numero di elementi nella sequenza parallela specificata che soddisfano una condizione.</summary>
      <returns>Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicativa.</returns>
      <param name="source">Sequenza che contiene gli elementi da contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Il numero di elementi nel database di origine è maggiore di <see cref="F:System.Int32.MaxValue" />.(In questo caso l'InnerException è <see cref="T:System.OverflowException" />) oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce gli elementi della sequenza parallela specificata o il valore predefinito del parametro di tipo in una raccolta singleton se la sequenza è vuota.</summary>
      <returns>Sequenza che contiene default(TSource) se <paramref name="source" /> è vuoto; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Sequenza per cui restituire un valore predefinito se è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Restituisce gli elementi della sequenza parallela specificata o il valore specificato in una raccolta singleton se la sequenza è vuota.</summary>
      <returns>Sequenza che contiene defaultValue se <paramref name="source" /> è vuoto; in caso contrario, <paramref name="source" />.</returns>
      <param name="source">Sequenza per cui restituire il valore specificato se è vuota.</param>
      <param name="defaultValue">Valore da restituire se la sequenza è vuota.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce elementi distinti da una sequenza parallela usando l'operatore di confronto di uguaglianza predefinito per confrontare i valori.</summary>
      <returns>Sequenza che contiene elementi distinti dalla sequenza di origine.</returns>
      <param name="source">Sequenza da cui rimuovere elementi duplicati.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Restituisce elementi distinti da una sequenza parallela usando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare valori.</summary>
      <returns>Sequenza che contiene elementi distinti dalla sequenza di origine.</returns>
      <param name="source">Sequenza da cui rimuovere elementi duplicati.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza dell'indice specificato in una sequenza parallela.</summary>
      <returns>L'elemento alla posizione specificata nella sequenza di origine.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0 oppure maggiore o uguale al numero di elementi di <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza parallela o un valore predefinito se l'indice non è incluso nell'intervallo.</summary>
      <returns>default(TSource) se l'indice è esterno ai limiti della sequenza di origine; in caso contrario, l'elemento in corrispondenza della posizione specificata nella sequenza di origine.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="index">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Restituisce un oggetto ParallelQuery{TResult} vuoto con l'argomento di tipo specificato.</summary>
      <returns>Sequenza vuota il cui argomento di tipo è <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Tipo da assegnare al parametro di tipo della sequenza generica restituita.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Questo overload di Except non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Questo overload di Except non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produce la differenza di set di due sequenze parallele usando l'operatore di confronto di uguaglianza predefinito per confrontare i valori.</summary>
      <returns>Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</returns>
      <param name="first">Verrà restituita una sequenza i cui elementi non si trovano anche in <paramref name="second" />.</param>
      <param name="second">Sequenza i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce la differenza di set di due sequenze parallele usando l'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <returns>Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</returns>
      <param name="first">Verrà restituita una sequenza i cui elementi non si trovano anche in <paramref name="second" />.</param>
      <param name="second">Sequenza i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce il primo elemento di una sequenza parallela.</summary>
      <returns>Il primo elemento nella sequenza specificata.</returns>
      <param name="source">Sequenza di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento in una sequenza parallela che soddisfa una condizione specificata.</summary>
      <returns>Il primo elemento nella sequenza che supera il test nella funzione predicativa specificata.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento in <paramref name="source" /> soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce il primo elemento di una sequenza parallela o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default(TSource) se <paramref name="source" /> è vuoto; in caso contrario, il primo elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di cui restituire il primo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce il primo elemento della sequenza parallela che soddisfa una condizione o un valore predefinito se un tale elemento non viene trovato.</summary>
      <returns>default(TSource) se <paramref name="source" /> è vuoto o se nessun elemento supera il test specificato dal predicato; in caso contrario, il primo elemento di <paramref name="source" /> che supera il test specificato dal predicato.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Richiama in parallelo l'azione specificata per ogni elemento in <paramref name="source" />.</summary>
      <param name="source">Oggetto <see cref="T:System.Linq.ParallelQuery`1" /> i cui elementi verranno elaborati da <paramref name="action" />.</param>
      <param name="action">Elemento Action da richiamare su ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza secondo una funzione selettore di chiave specificata.</summary>
      <returns>Sequenza di gruppi in ordine decrescente sulla base di <paramref name="TKey" />.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza secondo una funzione selettore di chiave specificata e confronta le chiavi usando un oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> specificato.</summary>
      <returns>Sequenza di gruppi in ordine decrescente sulla base di <paramref name="TKey" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.OrderedParallelQuery`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza in base a una funzione selettore di chiave specificata e proietta gli elementi di ogni gruppo usando una funzione specificata.</summary>
      <returns>Sequenza di gruppi in ordine decrescente sulla base di <paramref name="TKey" />.</returns>
      <param name="source">Oggetto <see cref="T:System.Linq.OrderedParallelQuery`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti nell'oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza secondo una funzione selettore di chiave.Le chiavi vengono confrontate usando un operatore di confronto e gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</summary>
      <returns>Sequenza di gruppi in ordine decrescente sulla base di <paramref name="TKey" />.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento di IGrouping.</param>
      <param name="comparer">Oggetto IComparer{TSource} per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi contenuti in IGrouping.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza in base a una funzione selettore di chiave specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</summary>
      <returns>Sequenza di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Sequenza di cui raggruppare gli elementi.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento di IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi in ogni IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.I valori delle chiavi vengono confrontati usando un operatore di confronto specificato e gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</summary>
      <returns>Sequenza di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Sequenza di cui raggruppare gli elementi.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector">Funzione per eseguire il mapping di ogni elemento di origine a un elemento di IGrouping{Key, TElement}.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo degli elementi in ogni IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza in base a una funzione selettore di chiave specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</summary>
      <returns>Sequenza di elementi di tipo <paramref name="TResult" /> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <param name="source">Sequenza di cui raggruppare gli elementi.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Raggruppa in parallelo gli elementi di una sequenza in base a una funzione selettore di chiave specificata e crea un valore risultante da ciascun gruppo e relativa chiave.Le chiavi vengono confrontati usando un operatore di confronto specificato.</summary>
      <returns>Sequenza di gruppi.</returns>
      <param name="source">Sequenza di cui raggruppare gli elementi.</param>
      <param name="keySelector">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Questo overload di GroupJoin non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Questo parametro non viene usato.</param>
      <param name="inner">Questo parametro non viene usato.</param>
      <param name="outerKeySelector">Questo parametro non viene usato.</param>
      <param name="innerKeySelector">Questo parametro non viene usato.</param>
      <param name="resultSelector">Questo parametro non viene usato.</param>
      <typeparam name="TOuter">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TInner">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TKey">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TResult">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Questo overload di GroupJoin non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Questo parametro non viene usato.</param>
      <param name="inner">Questo parametro non viene usato.</param>
      <param name="outerKeySelector">Questo parametro non viene usato.</param>
      <param name="innerKeySelector">Questo parametro non viene usato.</param>
      <param name="resultSelector">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TOuter">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TInner">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TKey">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TResult">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correla in parallelo gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Sequenza che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un join raggruppato di due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TOuter">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla in parallelo gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.Per confrontare le chiavi, viene usato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>Sequenza che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un join raggruppato di due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Questo overload di Intersect non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Questo overload di Intersect non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produce l'intersezione di set di due sequenze parallele usando l'operatore di confronto di uguaglianza predefinito per confrontare i valori.</summary>
      <returns>Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</returns>
      <param name="first">Sequenza di cui vengono restituiti gli elementi distinti presenti anche in <paramref name="second" />.</param>
      <param name="second">Sequenza di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce l'intersezione di set di due sequenze parallele usando l'oggetto IEqualityComparer{T} specificato per confrontare i valori.</summary>
      <returns>Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</returns>
      <param name="first">Sequenza di cui vengono restituiti gli elementi distinti presenti anche in <paramref name="second" />.</param>
      <param name="second">Sequenza di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Questo overload di Join non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene richiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Questo parametro non viene usato.</param>
      <param name="inner">Questo parametro non viene usato.</param>
      <param name="outerKeySelector">Questo parametro non viene usato.</param>
      <param name="innerKeySelector">Questo parametro non viene usato.</param>
      <param name="resultSelector">Questo parametro non viene usato.</param>
      <typeparam name="TOuter">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TInner">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TKey">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TResult">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Questo overload di Join non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene richiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Questo parametro non viene usato.</param>
      <param name="inner">Questo parametro non viene usato.</param>
      <param name="outerKeySelector">Questo parametro non viene usato.</param>
      <param name="innerKeySelector">Questo parametro non viene usato.</param>
      <param name="resultSelector">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TOuter">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TInner">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TKey">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TResult">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correla in parallelo gli elementi di due sequenze in base alle chiavi corrispondenti.Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</summary>
      <returns>Sequenza che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join di due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <typeparam name="TOuter">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correla in parallelo gli elementi di due sequenze in base alle chiavi corrispondenti.Per confrontare le chiavi, viene usato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <returns>Sequenza che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join di due sequenze.</returns>
      <param name="outer">Prima sequenza da unire.</param>
      <param name="inner">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TInner">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TKey">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult">Tipo degli elementi di risultato.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce l'ultimo elemento di una sequenza parallela.</summary>
      <returns>Il valore dell'ultima posizione nella sequenza di origine.</returns>
      <param name="source">Sequenza dalla quale viene restituito l'ultimo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'ultimo elemento di una sequenza parallela che soddisfa una condizione specificata.</summary>
      <returns>Ultimo elemento nella sequenza che supera il test nella funzione predicativa specificata.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento in <paramref name="source" /> soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce l'ultimo elemento di una sequenza parallela o un valore predefinito se la sequenza non contiene elementi.</summary>
      <returns>default() se la sequenza di origine è vuota; in caso contrario, l'ultimo elemento nella sequenza.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'ultimo elemento di una sequenza parallela che soddisfa una condizione o un valore predefinito se un elemento di tale tipo non viene trovato.</summary>
      <returns>default() se la sequenza è vuota o se nessun elemento supera il test nella funzione predicato; in caso contrario, l'ultimo elemento che supera il test nella funzione predicato.</returns>
      <param name="source">Sequenza dalla quale viene restituito un elemento.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce un oggetto Int64 che rappresenta il numero totale di elementi in una sequenza parallela.</summary>
      <returns>Numero di elementi nella sequenza di input.</returns>
      <param name="source">Sequenza che contiene gli elementi da contare.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Il numero di elementi nel database di origine è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.OverflowException">Il risultato calcolato è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce un oggetto Int64 che rappresenta quanti elementi in una sequenza parallela soddisfano una condizione.</summary>
      <returns>Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicativa.</returns>
      <param name="source">Sequenza che contiene gli elementi da contare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Il numero di elementi nel database di origine è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.OverflowException">Il risultato calcolato è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce il valore massimo in una sequenza parallela di valori.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza di origine.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore massimo.</summary>
      <returns>Valore massimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore massimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce il valore minimo in una sequenza parallela di valori.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Richiama in parallelo una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore minimo.</summary>
      <returns>Valore minimo della sequenza.</returns>
      <param name="source">Sequenza di valori di cui determinare il valore minimo.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valore restituito dall'oggetto <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> non contiene elementi e <paramref name="TSource" /> è un tipo di valore non nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filtra gli elementi di un oggetto ParallelQuery in base a un tipo specificato.</summary>
      <returns>Sequenza che contiene elementi della sequenza di input del tipo .</returns>
      <param name="source">Sequenza di cui filtrare gli elementi.</param>
      <typeparam name="TResult">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Dispone in parallelo gli elementi di una sequenza in ordine crescente in base a una chiave.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono ordinati in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Dispone in parallelo gli elementi di una sequenza in ordine crescente usando un operatore di confronto specificato.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono ordinati in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">Oggetto IComparer{TKey} per confrontare chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Dispone in parallelo gli elementi di una sequenza in ordine decrescente in base a una chiave.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono disposti in ordine decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Ordina in senso decrescente gli elementi di una sequenza usando un operatore di confronto specificato.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono disposti in ordine decrescente in base a una chiave.</returns>
      <param name="source">Sequenza di valori da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">Oggetto IComparer{TKey} per confrontare chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="KeySelector" /> è un riferimento null (Nothing in Visual Basic)..</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Genera una sequenza parallela di numeri integrali all'interno di un intervallo specificato.</summary>
      <returns>Oggetto IEnumerable&lt;Int32&gt; in C# o IEnumerable(Of Int32) in Visual Basic che contiene un intervallo di numeri integrali sequenziali.</returns>
      <param name="start">Il primo valore intero della sequenza.</param>
      <param name="count">Il numero di valori interi sequenziali da generare</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> è minore di 0 o <paramref name="start" /> + <paramref name="count" /> - 1 è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Genera una sequenza parallela che contiene un valore ripetuto.</summary>
      <returns>Sequenza che contiene un valore ripetuto.</returns>
      <param name="element">Valore da ripetere.</param>
      <param name="count">Numero che esprime quante volte il valore è ripetuto nella sequenza generata.</param>
      <typeparam name="TResult">Il tipo del valore da ripetere nella sequenza di risultato.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Inverte l'ordine degli elementi in una sequenza parallela.</summary>
      <returns>Sequenza i cui elementi corrispondono a quelli della sequenza di input, in ordine inverso.</returns>
      <param name="source">Sequenza di valori da invertire.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Proietta in parallelo ogni elemento di una sequenza in un nuovo form.</summary>
      <returns>Sequenza i cui elementi sono il risultato della chiamata alla funzione di trasformazione su ogni elemento di <paramref name="source" />.</returns>
      <param name="source">Sequenza di valori su cui richiamare una funzione di trasformazione.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi restituiti dal selettore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Proietta in parallelo ogni elemento di una sequenza in un nuovo form incorporando l'indice dell'elemento.</summary>
      <returns>Sequenza i cui elementi sono il risultato del richiamo alla funzione di trasformazione su ogni elemento di <paramref name="source" />, in base all'indice fornito a <paramref name="selector" />.</returns>
      <param name="source">Sequenza di valori su cui richiamare una funzione di trasformazione.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi restituiti dal selettore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.Si potrebbe verificare questa condizione in scenari di flusso.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un'unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.</summary>
      <returns>Sequenza i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno-a-molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> basato sull'indice fornito a <paramref name="collectionSelector" /> ed eseguendo quindi il mapping di ogni elemento della sequenza e del corrispondente elemento di origine a un elemento di risultato. </returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi nella sequenza risultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proietta in parallelo ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e semplifica le sequenze risultanti in un'unica sequenza.</summary>
      <returns>Sequenza i cui elementi sono il risultato della chiamata alla funzione di trasformazione uno-a-molti su ogni elemento della sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza restituita dal selettore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un'unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.L'indice di ogni elemento di origine viene usato nella maschera intermedia proiettata di tale elemento.</summary>
      <returns>Sequenza i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno-a-molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> basato sull'indice fornito a <paramref name="collectionSelector" /> ed eseguendo quindi il mapping di ogni elemento della sequenza e del corrispondente elemento di origine a un elemento di risultato.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TSource">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi da restituire.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proietta in parallelo ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e semplifica le sequenze risultanti in un'unica sequenza.L'indice di ogni elemento di origine viene usato nella maschera proiettata di tale elemento.</summary>
      <returns>Sequenza i cui elementi sono il risultato della chiamata alla funzione di trasformazione uno-a-molti su ogni elemento della sequenza di input.</returns>
      <param name="source">Sequenza di valori da proiettare.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo degli elementi della sequenza restituita dal selettore.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Questo overload di SequenceEqual non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Generato ogni volta che viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Questo overload di SequenceEqual non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Generato ogni volta che viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Determina se due sequenze parallele sono uguali confrontando gli elementi mediante l'operatore di confronto di uguaglianza predefinito per il relativo tipo.</summary>
      <returns>È true se le due sequenze di origine hanno la stessa lunghezza e gli elementi corrispondenti risultano uguali in base all'operatore di confronto di uguaglianza predefinito per il relativo tipo; in caso contrario, false.</returns>
      <param name="first">Sequenza da confrontare alla seconda.</param>
      <param name="second">Sequenza da confrontare alla prima sequenza di input.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se due sequenze parallele sono uguali confrontandone gli elementi mediante un oggetto IEqualityComparer{T} specificato.</summary>
      <returns>È true se le due sequenze di origine hanno la stessa lunghezza e gli elementi corrispondenti risultano uguali in base all'operatore di confronto di uguaglianza predefinito per il relativo tipo; in caso contrario, false.</returns>
      <param name="first">Sequenza da confrontare con <paramref name="second" />.</param>
      <param name="second">Sequenza da confrontare alla prima sequenza di input.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da usare per confrontare gli elementi.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce l'unico elemento di una sequenza parallela e genera un'eccezione se nella sequenza non è presente esattamente un solo elemento.</summary>
      <returns>Singolo elemento della sequenza di input.</returns>
      <param name="source">Sequenza di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">La sequenza di input contiene più elementi.oppure la sequenza di input è vuota.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'unico elemento di una sequenza parallela che soddisfa una condizione specificata e genera un'eccezione se esistono più elementi di tale tipo.</summary>
      <returns>Singolo elemento della sequenza di input che soddisfa una condizione.</returns>
      <param name="source">Sequenza di cui restituire il singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.oppure più di un elemento soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Restituisce l'unico elemento di una sequenza parallela o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se nella sequenza esiste più di un elemento.</summary>
      <returns>Il singolo elemento della sequenza di input o default() se la sequenza non contiene elementi.</returns>
      <param name="source">Sequenza di cui restituire il singolo elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce l'unico elemento di una sequenza parallela che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <returns>Il singolo elemento della sequenza di input che soddisfa la condizione o default() se tale elemento non viene trovato.</returns>
      <param name="source">Sequenza di cui restituire il singolo elemento.</param>
      <param name="predicate">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> è vuoto oppure restituisce più elementi.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Ignora un numero specificato di elementi in una sequenza parallela e restituisce gli elementi rimanenti.</summary>
      <returns>Sequenza che contiene gli elementi presenti dopo l'indice specificato nella sequenza di input.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="count">Il numero di elementi da ignorare prima di restituire gli elementi rimanenti.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Il numero è maggiore di <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Ignora gli elementi in una sequenza parallela finché la condizione specificata non restituisce true, quindi restituisce gli elementi rimanenti.</summary>
      <returns>Sequenza che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato dal predicato.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Ignora gli elementi in una sequenza parallela finché la condizione specificata non restituisce true, quindi restituisce gli elementi rimanenti.L'indice dell'elemento viene usato nella logica della funzione predicativa.</summary>
      <returns>Sequenza che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato dal predicato.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Double.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Double.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Single.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcola in parallelo la somma di una sequenza di valori.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Single.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Double.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi nella sequenza di origine.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Double.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Single.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcola in parallelo la somma della sequenza di valori ottenuti richiamando una funzione di trasformazione su ogni elemento della sequenza di input.</summary>
      <returns>Somma dei valori previsti nella sequenza.</returns>
      <param name="source">Sequenza di valori di cui calcolare la somma.</param>
      <param name="selector">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somma è maggiore di <see cref="F:System.Single.MaxValue" />.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Restituisce un numero specificato di elementi contigui dall'inizio di una sequenza parallela.</summary>
      <returns>Sequenza che contiene il numero specificato di elementi, dall'inizio della sequenza di input.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="count">Numero di elementi da restituire.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Restituisce elementi di una sequenza parallela finché una condizione specificata restituisce true.</summary>
      <returns>Sequenza che contiene gli elementi della sequenza di input che precedono l'elemento in corrispondenza del quale il test non viene più superato.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Restituisce elementi di una sequenza parallela finché una condizione specificata restituisce true.L'indice dell'elemento viene usato nella logica della funzione predicativa.</summary>
      <returns>Sequenza che contiene gli elementi della sequenza di input che precedono l'elemento in corrispondenza del quale il test non viene più superato.</returns>
      <param name="source">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati da questa query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Esegue in parallelo un ordinamento successivo crescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono ordinati in base a una chiave.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue in parallelo un ordinamento successivo in senso crescente degli elementi di una sequenza usando un operatore di confronto specificato.</summary>
      <returns>Oggetto OrderedParallelQuery{TSource} i cui elementi sono ordinati in base a una chiave.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">Oggetto IComparer{TKey} per confrontare chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Esegue in parallelo un ordinamento successivo decrescente in base a una chiave degli elementi di una sequenza.</summary>
      <returns>Sequenza i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Esegue in parallelo un ordinamento successivo in senso decrescente degli elementi di una sequenza usando un operatore di confronto specificato.</summary>
      <returns>Sequenza i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <param name="source">Oggetto OrderedParallelQuery{TSource} che contiene elementi da ordinare.</param>
      <param name="keySelector">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer">Oggetto IComparer{TKey} per confrontare chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Crea una matrice da un oggetto <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Oggetto che contiene gli elementi dalla sequenza di input .</returns>
      <param name="source">Sequenza da cui creare una matrice.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione del selettore principale specificata.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una chiave che è un riferimento Null (Nothing in Visual Basic).oppure <paramref name="keySelector" /> genera chiavi duplicate per due elementi.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una chiave che è un riferimento Null (Nothing in Visual Basic).oppure <paramref name="keySelector" /> genera chiavi duplicate per due elementi.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo le funzioni specificate del selettore principale e del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene valori di tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valore restituito dall'oggetto <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una chiave che è un riferimento Null (Nothing in Visual Basic).oppure <paramref name="keySelector" /> genera chiavi duplicate per due elementi.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.Dictionary`2" /> che contiene valori di tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valore restituito dall'oggetto <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una chiave che è un riferimento Null (Nothing in Visual Basic).oppure <paramref name="keySelector" /> genera chiavi duplicate per due elementi.oppure si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Crea un oggetto <see cref="T:System.Collections.Generic.List`1" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Oggetto <see cref="T:System.Collections.Generic.List`1" /> che contiene gli elementi dalla sequenza di input .</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.ILookup`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione del selettore principale specificata.</summary>
      <returns>Oggetto <see cref="T:System.Linq.ILookup`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.ILookup`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</summary>
      <returns>Oggetto <see cref="T:System.Linq.ILookup`2" /> che contiene chiavi e valori.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un oggetto <see cref="T:System.Linq.ILookup`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo le funzioni specificate del selettore principale e del selettore di elementi.</summary>
      <returns>Oggetto <see cref="T:System.Linq.ILookup`2" /> che contiene valori di tipo <paramref name="TElement" /> selezionati dalla sequenza di input.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento. </param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valore restituito dall'oggetto <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un oggetto <see cref="T:System.Linq.ILookup`2" /> da un oggetto <see cref="T:System.Linq.ParallelQuery`1" /> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</summary>
      <returns>Oggetto Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) che contiene valori di tipo TElement selezionati dalla sequenza di input.</returns>
      <param name="source">Sequenza da cui creare un oggetto <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="elementSelector">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento. </param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo della chiave restituita dall'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valore restituito dall'oggetto <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Questo overload di Union non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Questo overload di Union non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene chiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <param name="comparer">Questo parametro non viene usato.</param>
      <typeparam name="TSource">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produce l'unione di set delle due sequenze parallele usando l'operatore di confronto di uguaglianza predefinito.</summary>
      <returns>Sequenza che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="first">Sequenza i cui elementi distinti formano il primo set dell'unione.</param>
      <param name="second">Sequenza i cui elementi distinti formano il secondo set dell'unione.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produce l'unione di set di due sequenze parallele usando un oggetto IEqualityComparer{T} specificato.</summary>
      <returns>Sequenza che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <param name="first">Sequenza i cui elementi distinti formano il primo set dell'unione.</param>
      <param name="second">Sequenza i cui elementi distinti formano il secondo set dell'unione.</param>
      <param name="comparer">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource">Tipo degli elementi delle sequenze di input.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra in parallelo una sequenza di valori in base a un predicato.</summary>
      <returns>Sequenza che contiene elementi della sequenza di input che soddisfano la condizione.</returns>
      <param name="source">Sequenza da filtrare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtra in parallelo una sequenza di valori in base a un predicato.L'indice di ogni elemento viene usato nella logica della funzione predicativa.</summary>
      <returns>Sequenza che contiene elementi della sequenza di input che soddisfano la condizione.</returns>
      <param name="source">Sequenza da filtrare.</param>
      <param name="predicate">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource">Tipo degli elementi di origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Più di <see cref="F:System.Int32.MaxValue" /> elementi vengono enumerati dalla query.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Imposta l'oggetto <see cref="T:System.Threading.CancellationToken" /> da associare alla query.</summary>
      <returns>Oggetto ParallelQuery che rappresenta la stessa query come origine, ma con il token di annullamento registrato.</returns>
      <param name="source">Oggetto ParallelQuery su cui impostare l'opzione.</param>
      <param name="cancellationToken">Token di annullamento.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Threading.CancellationTokenSource" /> associato all'oggetto <paramref name="cancellationToken" /> è stato eliminato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> viene utilizzato più volte nella query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Imposta il grado di parallelismo da usare in una query.Il grado di parallelismo è il numero massimo di attività eseguite contemporaneamente che saranno usate per elaborare la query.</summary>
      <returns>Oggetto ParallelQuery che rappresenta la stessa query come origine, con il limite di gradi di parallelismo impostato.</returns>
      <param name="source">Oggetto ParallelQuery su cui impostare il limite in gradi di parallelismo.</param>
      <param name="degreeOfParallelism">Grado di parallelismo per la query.Il valore predefinito è Math.Min(<see cref="P:System.Environment.ProcessorCount" />, MAX_SUPPORTED_DOP) dove MAX_SUPPORTED_DOP è 512.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> è minore di 1 o maggiore di 511. </exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism viene utilizzato più volte nella query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Imposta la modalità di esecuzione della query.</summary>
      <returns>Oggetto ParallelQuery che rappresenta la stessa query come origine, ma con la modalità di esecuzione registrata.</returns>
      <param name="source">Oggetto ParallelQuery su cui impostare l'opzione.</param>
      <param name="executionMode">Modalità in cui eseguire la query.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> non è un valore di <see cref="T:System.Linq.ParallelExecutionMode" /> valido.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode viene utilizzato più volte nella query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Imposta le opzioni di unione per la query, che specificano la modalità di memorizzazione dell'output nel buffer da parte della query.</summary>
      <returns>Oggetto ParallelQuery che rappresenta la stessa query come origine, ma con le opzioni di unione registrate.</returns>
      <param name="source">Oggetto ParallelQuery su cui impostare l'opzione.</param>
      <param name="mergeOptions">Opzioni di unione da impostare per la query.</param>
      <typeparam name="TSource">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è un riferimento null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> non è un valore di <see cref="T:System.Linq.ParallelMergeOptions" /> valido.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> viene utilizzato più volte nella query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Questo overload di Zip non dovrebbe mai essere chiamato.Questo metodo è contrassegnato come obsoleto e genera sempre <see cref="T:System.NotSupportedException" /> quando viene richiamato.</summary>
      <returns>Questo overload genera sempre <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Questo parametro non viene usato.</param>
      <param name="second">Questo parametro non viene usato.</param>
      <param name="resultSelector">Questo parametro non viene usato.</param>
      <typeparam name="TFirst">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TSecond">Questo parametro di tipo non viene usato.</typeparam>
      <typeparam name="TResult">Questo parametro di tipo non viene usato.</typeparam>
      <exception cref="T:System.NotSupportedException">Eccezione che si verifica quando viene chiamato questo metodo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Unisce in parallelo due sequenze tramite la funzione predicato specificata.</summary>
      <returns>Sequenza che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un pairwise <paramref name="resultSelector" /> su due sequenze.Se le sequenze hanno lunghezze diverse, la sequenza più lunga viene troncata in base alla lunghezza della sequenza più corta.</returns>
      <param name="first">Prima sequenza da comprimere.</param>
      <param name="second">Seconda sequenza da comprimere.</param>
      <param name="resultSelector">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <typeparam name="TFirst">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TSecond">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TResult">Tipo degli elementi restituiti.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> o <paramref name="resultSelector" /> è un riferimento Null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La query è stata annullata con il token passato attraverso <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Si sono verificate una o più eccezioni durante la valutazione della query.</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>La modalità di esecuzione della query è un suggerimento che indica al sistema come gestire i problemi relativi alle prestazioni durante la parallelizzazione delle query.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>Rappresenta l'impostazione predefinita.PLINQ esaminerà la struttura della query e la parallelizzerà solo se ciò comporterà una maggiore velocità.Se la struttura della query indica che non è possibile ottenere l'aumento di velocità, PLINQ eseguirà la query come una comune query LINQ to Objects.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallelizzare l'intera query, anche se ciò comporta l'utilizzo di algoritmi con sovraccarico elevato.Utilizzare questo flag nei casi in cui si sa che l'esecuzione parallela della query comporterà un aumento di velocità, ma PLINQ nella modalità predefinita l'eseguirebbe come sequenziale.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Specifica il tipo preferito di unione di output da utilizzare in una query.In altre parole, indica il modo in cui PLINQ unisce di nuovo i risultati dalle varie partizioni in un'unica sequenza di risultato.Si tratta solo di un suggerimento e può non essere rispettato dal sistema nella parallelizzazione di tutte le query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Utilizzare un'unione con i buffer di output di una dimensione scelta dal sistema.I risultati verranno accumulati in un buffer di output prima di essere disponibili all'utente della query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Utilizzare il tipo di unione predefinito, ovvero AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Utilizzare un'unione con buffer di output completi.Tutti i risultati verranno accumulati dal sistema in un buffer di output prima di essere resi disponibili all'utente della query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Utilizzare un'unione senza buffer di output.Non appena gli elementi del risultato sono stati calcolati, vengono resi disponibili all'utente della query.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Rappresenta una sequenza parallela.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la sequenza.</summary>
      <returns>Enumeratore che scorre la sequenza.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Rappresenta una sequenza parallela.</summary>
      <typeparam name="TSource">Tipo di elemento nella sequenza di origine.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Restituisce un enumeratore che scorre la sequenza.</summary>
      <returns>Enumeratore che scorre la sequenza.</returns>
    </member>
  </members>
</doc>