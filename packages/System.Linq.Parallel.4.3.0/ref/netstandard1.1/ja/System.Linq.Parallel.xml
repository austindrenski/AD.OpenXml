<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>並べ替えられた並列シーケンスを表します。</summary>
      <typeparam name="TSource">ソース コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>シーケンスを反復処理する列挙子を返します。</summary>
      <returns>シーケンスを反復処理する列挙子。</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>ParallelQuery{TSource} を実装するオブジェクトを照会するための一連のメソッドを提供します。これは、並列の <see cref="T:System.Linq.Enumerable" /> に相当します。</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>シーケンスにアキュムレータ関数を並列で適用します。このオーバーロードはシーケンシャルな実装では使用できません。</summary>
      <returns>変換された最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seedFactory">最初のアキュムレータ値を返す関数。</param>
      <param name="updateAccumulatorFunc">パーティション内の各要素に対して呼び出すアキュムレータ関数。</param>
      <param name="combineAccumulatorsFunc">各パーティションから返されたアキュムレータの結果に対して呼び出すアキュムレータ関数。</param>
      <param name="resultSelector">最終的なアキュムレータ値を結果値に変換する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <typeparam name="TResult">結果の値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="seedFactory" /> または <paramref name="updateAccumulatorFunc" /> または <paramref name="combineAccumulatorsFunc" /> または <paramref name="resultSelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>シーケンスにアキュムレータ関数を並列で適用します。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>シーケンスにアキュムレータ関数を並列で適用します。指定されたシード値が最初のアキュムレータ値として使用されます。</summary>
      <returns>最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>シーケンスにアキュムレータ関数を並列で適用します。指定したシード値は最初のアキュムレータ値として使用され、指定した関数は結果値の選択に使用されます。</summary>
      <returns>変換された最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="func">各要素に対して呼び出すアキュムレータ関数。</param>
      <param name="resultSelector">最終的なアキュムレータ値を結果値に変換する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <typeparam name="TResult">結果の値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="func" /> または <paramref name="resultSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>シーケンスにアキュムレータ関数を並列で適用します。このオーバーロードはシーケンシャルな実装では使用できません。</summary>
      <returns>変換された最終的なアキュムレータ値。</returns>
      <param name="source">集計対象のシーケンス。</param>
      <param name="seed">最初のアキュムレータ値。</param>
      <param name="updateAccumulatorFunc">パーティション内の各要素に対して呼び出すアキュムレータ関数。</param>
      <param name="combineAccumulatorsFunc">各パーティションから返されたアキュムレータの結果に対して呼び出すアキュムレータ関数。</param>
      <param name="resultSelector">最終的なアキュムレータ値を結果値に変換する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TAccumulate">アキュムレータ値の型。</typeparam>
      <typeparam name="TResult">結果の値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="updateAccumulatorFunc" /> または <paramref name="combineAccumulatorsFunc" /> または <paramref name="resultSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>シーケンスのすべての要素が条件を満たしているかどうかを並列で判断します。</summary>
      <returns>指定された述語でソース シーケンスのすべての要素がテストに合格する場合またはシーケンスが空の場合は true。それ以外の場合は false。</returns>
      <param name="source">述語を適用する要素を格納するシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスに要素が含まれているかどうかを判断します。</summary>
      <returns>ソース シーケンスに要素が含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">空かどうかを確認するシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>シーケンスのいずれかの要素が条件を満たしているかどうかを並列で判断します。</summary>
      <returns>指定された述語でソース シーケンスのいずれかの要素がテストに合格した場合は true。それ以外の場合は false。</returns>
      <param name="source">述語を適用する要素を格納するシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>
        <see cref="T:System.Linq.ParallelQuery`1" /> を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に変換して、クエリの順次評価を強制的に実行します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> として型指定された入力シーケンス。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> としてキャストするシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>既定の順序なしの状態をオーバーライドして、データ ソースを順序ありとして扱うことができるようにします。AsOrdered は、AsParallel、ParallelEnumerable.Range、および ParallelEnumerable.Repeat によって返された非ジェネリック シーケンスでのみ呼び出すことができます。</summary>
      <returns>元の順序を以降のクエリ演算子の中で保持するソース シーケンス。</returns>
      <param name="source">入力シーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれない場合にスローされます。またはAsOrdered がクエリの実行中に呼び出された場合。<see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />、<see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" />、または <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" /> の直後に呼び出すことができます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>既定の順序なしの状態をオーバーライドして、データ ソースを順序ありとして扱うことができるようにします。AsOrdered は、AsParallel、ParallelEnumerable.Range、および ParallelEnumerable.Repeat によって返されたジェネリック シーケンスでのみ呼び出すことができます。</summary>
      <returns>元の順序を以降のクエリ演算子の中で保持するソース シーケンス。</returns>
      <param name="source">入力シーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれない場合にスローされます。または<paramref name="source" /> が AsParallel、ParallelEnumerable.Range、ParallelEnumerable.Repeat のいずれでもない場合。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>入力シーケンスを複数のパーティションに分割するカスタム パーティショナーによって供給されるクエリの並列化を有効にします。</summary>
      <returns>ParallelEnumerable 拡張メソッドにバインドされる ParallelQuery としての <paramref name="source" />。</returns>
      <param name="source">入力シーケンスに対するパーティショナー。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>クエリの並列化を有効にします。</summary>
      <returns>ParallelEnumerable 拡張メソッドにバインドされる <see cref="T:System.Linq.ParallelQuery`1" /> としての source。</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>クエリの並列化を有効にします。</summary>
      <returns>ParallelEnumerable 拡張メソッドにバインドされる ParallelQuery としての source。</returns>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery" /> に変換する <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>
        <see cref="T:System.Linq.ParallelQuery`1" /> を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に変換して、クエリの順次評価を強制的に実行します。</summary>
      <returns>順次拡張メソッドにバインドされる <see cref="T:System.Collections.Generic.IEnumerable`1" /> としての source。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> に変換する <see cref="T:System.Linq.ParallelQuery`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>中間クエリを、要素間の明示的な順序付けが行われていないものとして扱うことができるようにします。</summary>
      <returns>任意の順序のソース シーケンス。</returns>
      <param name="source">入力シーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値を返します。</returns>
      <param name="source">ソース シーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">平均値の計算に使用される値のシーケンス。値のシーケンスの平均値。<paramref name="source" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>値のシーケンスの平均値を並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">シーケンス内の要素の合計または数が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの平均値を、並列で計算します。</summary>
      <returns>値のシーケンスの平均値。</returns>
      <param name="source">平均値の計算に使用される値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
      <exception cref="T:System.OverflowException">(内部例外として <see cref="T:System.AggregateException" /> でスローされます)。<paramref name="selector" /> 関数は、その要素型の MaxValue より大きい値を返します。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>ParallelQuery の要素を指定した型に変換します。</summary>
      <returns>指定した型に変換されたソース シーケンスの各要素が格納されているシーケンス。</returns>
      <param name="source">変換する要素が格納されているシーケンス。</param>
      <typeparam name="TResult">
        <paramref name="source" /> の要素の変換後の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidCastException">変換元のシーケンスの型を <paramref name="TResult" /> に変換できませんでした。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>この Concat オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>2 つの並列シーケンスを連結します。</summary>
      <returns>2 つの入力シーケンスの連結された要素が格納されているシーケンス。</returns>
      <param name="first">連結する最初のシーケンス。</param>
      <param name="second">最初のシーケンスに連結するシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを並列で判断します。</summary>
      <returns>指定した値を持つ要素がソース シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">値の検索対象となるシーケンス。</param>
      <param name="value">シーケンス内で検索する値。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して、指定した要素がシーケンスに含まれているかどうかを並列で判断します。</summary>
      <returns>指定した値を持つ要素がソース シーケンスに含まれている場合は true。それ以外の場合は false。</returns>
      <param name="source">値の検索対象となるシーケンス。</param>
      <param name="value">シーケンス内で検索する値。</param>
      <param name="comparer">値を比較する等値比較子。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンス内の要素の数を返します。</summary>
      <returns>入力シーケンス内の要素数。</returns>
      <param name="source">カウントする要素が格納されているシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">ソース内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。(この場合、InnerException は <see cref="T:System.OverflowException" /> です。) -または- クエリの評価中に 1 つ以上の例外が発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす、指定された並列シーケンス内の要素の数を表す数値を返します。</summary>
      <returns>述語関数の条件を満たす、シーケンス内の要素数を表す数値。</returns>
      <param name="source">カウントする要素が格納されているシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">ソース内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。(この場合、InnerException は <see cref="T:System.OverflowException" /> です。) -または- クエリの評価中に 1 つ以上の例外が発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>指定した並列シーケンスの要素、または、シーケンスが空の場合はシングルトン コレクションにある型パラメーターの既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(TSource) が格納されているシーケンス。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">シーケンスが空の場合に、既定値を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>指定された並列シーケンスの要素、または、シーケンスが空の場合はシングルトン コレクションにある指定された値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は defaultValue が格納されているシーケンス。それ以外の場合は <paramref name="source" />。</returns>
      <param name="source">シーケンスが空の場合に、指定された値を返すシーケンス。</param>
      <param name="defaultValue">シーケンスが空の場合に返す値。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、並列シーケンスから一意の要素を返します。</summary>
      <returns>ソース シーケンスの一意の要素を格納しているシーケンス。</returns>
      <param name="source">重複する要素を削除する対象となるシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することにより、並列シーケンスから一意の要素を返します。</summary>
      <returns>ソース シーケンスの一意の要素を格納しているシーケンス。</returns>
      <param name="source">重複する要素を削除する対象となるシーケンス。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>並列シーケンス内の指定したインデックス位置にある要素を返します。</summary>
      <returns>ソース シーケンス内の指定された位置にある要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か <paramref name="source" /> に含まれている要素数以上の値です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>並列シーケンス内の指定したインデックス位置にある要素、または、インデックスが範囲外の場合は既定値を返します。</summary>
      <returns>インデックスがソース シーケンスの範囲外の場合は default(TSource)。それ以外の場合は、ソース シーケンスの指定した位置にある要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="index">取得する要素の、0 から始まるインデックス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>指定した型引数を持つ空の ParallelQuery{TResult} を返します。</summary>
      <returns>型引数が <paramref name="TResult" /> である空のシーケンス。</returns>
      <typeparam name="TResult">返されるジェネリック シーケンスの型パラメーターに割り当てる型。</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>この Except オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この Except オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つの並列シーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの要素の差集合が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> には含まれていない要素を格納するシーケンスが返されます。</param>
      <param name="second">最初のシーケンスでも発生する要素を格納するシーケンスが、返されたシーケンスの要素を削除します。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して値を比較することにより、2 つの並列シーケンスの差集合を生成します。</summary>
      <returns>2 つのシーケンスの要素の差集合が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> には含まれていない要素を格納するシーケンスが返されます。</param>
      <param name="second">最初のシーケンスでも発生する要素を格納するシーケンスが、返されたシーケンスの要素を削除します。 </param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの最初の要素を返します。</summary>
      <returns>指定されたシーケンスの最初の要素。</returns>
      <param name="source">最初の要素を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす並列シーケンスの最初の要素を返します。</summary>
      <returns>指定された述語関数でテストに合格する、シーケンスの最初の要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの最初の要素、または、シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合は default(TSource)。それ以外の場合は <paramref name="source" /> の最初の要素。</returns>
      <param name="source">最初の要素を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす並列シーケンスの最初の要素、または、このような要素が見つからない場合は既定値を返します。</summary>
      <returns>
        <paramref name="source" /> が空の場合、または predicate で指定されたテストに合格した要素がない場合は default(TSource)。それ以外の場合は predicate で指定されたテストに合格した <paramref name="source" /> の最初の要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>
        <paramref name="source" /> の各要素に対して、指定された処理を並列で実行します。</summary>
      <param name="source">
        <paramref name="action" /> によって処理される要素を格納する <see cref="T:System.Linq.ParallelQuery`1" />。</param>
      <param name="action">各要素に対して呼び出す処理。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化します。</summary>
      <returns>
        <paramref name="TKey" /> に従って降順に並べ替えるグループ シーケンス。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化し、指定された <see cref="T:System.Collections.Generic.IComparer`1" /> を使用してキーを比較します。</summary>
      <returns>
        <paramref name="TKey" /> に従って降順に並べ替えるグループ シーケンス。</returns>
      <param name="source">並べ替える要素を格納している <see cref="T:System.Linq.OrderedParallelQuery`1" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化し、指定された関数を使用して各グループの要素を射影します。</summary>
      <returns>
        <paramref name="TKey" /> に従って降順に並べ替えるグループ シーケンス。</returns>
      <param name="source">並べ替える要素を格納している <see cref="T:System.Linq.OrderedParallelQuery`1" />。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を <see cref="T:System.Linq.IGrouping`2" /> の要素に割り当てる関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>キー セレクター関数に従ってシーケンスの要素を並列でグループ化します。キーの比較には、比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</summary>
      <returns>
        <paramref name="TKey" /> に従って降順に並べ替えるグループ シーケンス。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を IGrouping の要素に割り当てる関数。</param>
      <param name="comparer">キーを比較する IComparer{TSource}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">IGrouping 内の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化し、各グループとそのキーから結果値を作成します。各グループの要素は、指定された関数を使用して射影されます。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のシーケンス。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">グループ化する要素を格納するシーケンス。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を IGrouping&lt;TKey, TElement&gt; の要素に割り当てる関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 IGrouping{TKey, TElement} の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素をグループ化し、各グループとそのキーから結果値を作成します。キー値の比較には、指定された比較子を使用し、各グループの要素の射影には、指定された関数を使用します。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のシーケンス。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">グループ化する要素を格納するシーケンス。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="elementSelector">ソースの各要素を IGrouping{Key, TElement} の要素に割り当てる関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">各 IGrouping{TKey, TElement} の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化し、各グループとそのキーから結果値を作成します。</summary>
      <returns>
        <paramref name="TResult" /> 型の要素のシーケンス。各要素は、グループとそのキーの射影を表します。</returns>
      <param name="source">グループ化する要素を格納するシーケンス。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数に従ってシーケンスの要素を並列でグループ化し、各グループとそのキーから結果値を作成します。キーの比較には、指定された比較子を使用します。</summary>
      <returns>グループのシーケンス。</returns>
      <param name="source">グループ化する要素を格納するシーケンス。</param>
      <param name="keySelector">各要素のキーを抽出する関数。</param>
      <param name="resultSelector">各グループから結果値を作成する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> によって返される結果値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>この GroupJoin オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="outer">このパラメーターは使用されません。</param>
      <param name="inner">このパラメーターは使用されません。</param>
      <param name="outerKeySelector">このパラメーターは使用されません。</param>
      <param name="innerKeySelector">このパラメーターは使用されません。</param>
      <param name="resultSelector">このパラメーターは使用されません。</param>
      <typeparam name="TOuter">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TInner">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TKey">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TResult">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>この GroupJoin オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="outer">このパラメーターは使用されません。</param>
      <param name="inner">このパラメーターは使用されません。</param>
      <param name="outerKeySelector">このパラメーターは使用されません。</param>
      <param name="innerKeySelector">このパラメーターは使用されません。</param>
      <param name="resultSelector">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TOuter">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TInner">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TKey">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TResult">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を並列で相互に関連付け、その結果をグループ化します。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行することによって取得される <paramref name="TResult" /> 型の要素が格納されているシーケンス。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <typeparam name="TOuter">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>キーが等しいかどうかに基づいて 2 つのシーケンスの要素を並列で相互に関連付け、その結果をグループ化します。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対してグループ化結合を実行することによって取得される <paramref name="TResult" /> 型の要素が格納されているシーケンス。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <param name="comparer">キーをハッシュして比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>この Intersect オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この Intersect オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>既定の等値比較子を使用して値を比較することにより、2 つの並列シーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれる一意の要素を格納するシーケンスが返されます。</param>
      <param name="second">最初のシーケンスにも含まれる一意の要素を格納するシーケンスが返されます。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された IEqualityComparer{T} を使用して値を比較することにより、2 つの並列シーケンスの積集合を生成します。</summary>
      <returns>2 つのシーケンスの積集合を構成する要素が格納されているシーケンス。</returns>
      <param name="first">
        <paramref name="second" /> にも含まれる一意の要素を格納するシーケンスが返されます。</param>
      <param name="second">最初のシーケンスにも含まれる一意の要素を格納するシーケンスが返されます。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>この Join オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="outer">このパラメーターは使用されません。</param>
      <param name="inner">このパラメーターは使用されません。</param>
      <param name="outerKeySelector">このパラメーターは使用されません。</param>
      <param name="innerKeySelector">このパラメーターは使用されません。</param>
      <param name="resultSelector">このパラメーターは使用されません。</param>
      <typeparam name="TOuter">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TInner">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TKey">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TResult">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>この Join オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="outer">このパラメーターは使用されません。</param>
      <param name="inner">このパラメーターは使用されません。</param>
      <param name="outerKeySelector">このパラメーターは使用されません。</param>
      <param name="innerKeySelector">このパラメーターは使用されません。</param>
      <param name="resultSelector">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TOuter">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TInner">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TKey">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TResult">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を並列で相互に関連付けます。キーの比較には既定の等値比較子が使用されます。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行することによって取得される <paramref name="TResult" /> 型の要素が格納されているシーケンス。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <typeparam name="TOuter">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>一致するキーに基づいて 2 つのシーケンスの要素を並列で相互に関連付けます。指定された <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用してキーを比較します。</summary>
      <returns>2 つのシーケンスに対して内部結合を実行することによって取得される <paramref name="TResult" /> 型の要素が格納されているシーケンス。</returns>
      <param name="outer">結合する最初のシーケンス。</param>
      <param name="inner">最初のシーケンスに結合するシーケンス。</param>
      <param name="outerKeySelector">最初のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="innerKeySelector">2 番目のシーケンスの各要素から結合キーを抽出する関数。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <param name="comparer">キーをハッシュして比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TOuter">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TInner">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TKey">キー セレクター関数によって返されるキーの型。</typeparam>
      <typeparam name="TResult">結果の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="action" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの最後の要素を返します。</summary>
      <returns>ソース シーケンスの最後の位置にある値。</returns>
      <param name="source">最後の要素を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす並列シーケンスの最後の要素を返します。</summary>
      <returns>指定された述語関数でテストに合格する、シーケンスの最後の要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの最後の要素、または、シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>ソース シーケンスが空の場合は default()。それ以外の場合はシーケンスの最後の要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>条件を満たす並列シーケンスの最後の要素、または、このような要素が見つからない場合は既定値を返します。</summary>
      <returns>シーケンスが空の場合、または述語関数でテストに合格した要素がない場合は default()。それ以外の場合は述語関数でテストに合格した最後の要素。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンス内の要素の合計数を表す Int64 を返します。</summary>
      <returns>入力シーケンス内の要素数。</returns>
      <param name="source">カウントする要素が格納されているシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">ソース内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.OverflowException">計算結果が <see cref="F:System.Int64.MaxValue" /> より大きい値です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>並列シーケンス内で条件を満たす要素の数を表す Int64 を返します。</summary>
      <returns>述語関数の条件を満たす、シーケンス内の要素数を表す数値。</returns>
      <param name="source">カウントする要素が格納されているシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">ソース内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.OverflowException">計算結果が <see cref="F:System.Int64.MaxValue" /> より大きい値です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>値の並列シーケンスの最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">ソース シーケンス内の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最大値を返します。</summary>
      <returns>シーケンスの最大値。</returns>
      <param name="source">最大値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>値の並列シーケンスの最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>シーケンスの各要素に対して変換関数を並列で呼び出し、最小値を返します。</summary>
      <returns>シーケンスの最小値。</returns>
      <param name="source">最小値を確認する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には要素が含まれていません。<paramref name="TSource" /> は null 非許容の値の型です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>指定された型に基づいて ParallelQuery の要素をフィルター処理します。</summary>
      <returns>指定した型の入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">フィルター処理する要素を格納するシーケンス。</param>
      <typeparam name="TResult">シーケンスの要素をフィルター処理する型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>シーケンスの要素をキーに従って並列で昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を並列で昇順に並べ替えます。</summary>
      <returns>要素がキーに従って並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>シーケンスの要素をキーに従って並列で降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用してシーケンスの要素を降順に並べ替えます。</summary>
      <returns>要素がキーに従って降順に並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">順序付ける値のシーケンス。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="KeySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>指定した範囲内の整数の並列シーケンスを生成します。</summary>
      <returns>連続した整数の範囲を含む IEnumerable&lt;Int32&gt; (C# の場合) または IEnumerable(Of Int32) (Visual Basic の場合)。</returns>
      <param name="start">シーケンス内の最初の整数の値。</param>
      <param name="count">生成する連続した整数の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が 0 未満です。または、<paramref name="start" /> + <paramref name="count" /> - 1 が <see cref="F:System.Int32.MaxValue" /> を超える値です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>繰り返される 1 つの値を格納する並列シーケンスを生成します。</summary>
      <returns>繰り返される 1 つの値が格納されているシーケンス。</returns>
      <param name="element">繰り返される値。</param>
      <param name="count">生成されたシーケンスで値を繰り返す回数。</param>
      <typeparam name="TResult">結果のシーケンスで繰り返される値の型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの要素の順序を反転させます。</summary>
      <returns>要素が入力シーケンスの要素に逆順で対応しているシーケンス。</returns>
      <param name="source">反転させる値のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>並列シーケンスの各要素を新しいフォームに射影します。</summary>
      <returns>
        <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を格納しているシーケンス。</returns>
      <param name="source">変換関数を呼び出す対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">セレクターによって返される要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>要素のインデックスを組み込むことにより、シーケンスの各要素を新しいフォームに並列で射影します。</summary>
      <returns>
        <paramref name="selector" /> に渡されたインデックスに基づいて <paramref name="source" /> の各要素に対して変換関数を呼び出した結果として得られる要素を格納しているシーケンス。</returns>
      <param name="source">変換関数を呼び出す対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">セレクターによって返される要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。この状況は、ストリーミングのシナリオで発生する可能性があります。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。</summary>
      <returns>
        <paramref name="collectionSelector" /> に指定されたインデックスに基づいて <paramref name="source" /> の各要素で一対多の変換関数 <paramref name="collectionSelector" /> を呼び出し、これらのシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を格納しているシーケンス。 </returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">結果のシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に並列で射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。</summary>
      <returns>入力シーケンスの各要素に対して一対多の変換関数を呼び出した結果として得られる要素を格納しているシーケンス。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">セレクターによって返されるシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。各ソース要素のインデックスは、その要素の中間の射影されたフォームで使用されます。</summary>
      <returns>
        <paramref name="collectionSelector" /> に指定されたインデックスに基づいて <paramref name="source" /> の各要素で一対多の変換関数 <paramref name="collectionSelector" /> を呼び出し、これらのシーケンスの各要素とそれに対応するソース要素を結果の要素に割り当てた結果として得られる要素を格納しているシーケンス。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="collectionSelector">各ソース要素に適用する変換関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <param name="resultSelector">最初のシーケンスの要素と、2 番目のシーケンスの一致する要素のコレクションから結果の要素を作成する関数。</param>
      <typeparam name="TSource">
        <paramref name="collectionSelector" /> によって収集される中間要素の型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">返す要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>シーケンスの各要素を <see cref="T:System.Collections.Generic.IEnumerable`1" /> に並列で射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。各ソース要素のインデックスは、その要素の射影されたフォームで使用されます。</summary>
      <returns>入力シーケンスの各要素に対して一対多の変換関数を呼び出した結果として得られる要素を格納しているシーケンス。</returns>
      <param name="source">射影する値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">セレクターによって返されるシーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>この SequenceEqual オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されるたびにスローされます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この SequenceEqual オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されるたびにスローされます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>要素の型に対して既定の等値比較子を使用して要素を比較することで、2 つの並列シーケンスが等しいかどうかを判断します。</summary>
      <returns>2 つのソース シーケンスが同じ長さで、それらに対応する要素がその型の既定の等値比較子に従って等しい場合は true。それ以外の場合は false。</returns>
      <param name="first">second と比較するシーケンス。</param>
      <param name="second">最初の入力シーケンスと比較するシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された IEqualityComparer{T} を使用して要素を比較することで、2 つの並列シーケンスが等しいかどうかを判断します。</summary>
      <returns>2 つのソース シーケンスが同じ長さで、それらに対応する要素がその型の既定の等値比較子に従って等しい場合は true。それ以外の場合は false。</returns>
      <param name="first">
        <paramref name="second" /> と比較するシーケンス。</param>
      <param name="second">最初の入力シーケンスと比較するシーケンス。</param>
      <param name="comparer">要素の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの唯一の要素を返し、シーケンス内の要素が 1 つだけではない場合は例外をスローします。</summary>
      <returns>入力シーケンスの 1 つの要素。</returns>
      <param name="source">返す唯一の要素を格納しているシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">入力シーケンスに複数の要素が含まれています。または、入力シーケンスが空です。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす並列シーケンスの唯一の要素を返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <returns>条件を満たす、入力シーケンスの 1 つの要素。</returns>
      <param name="source">返す唯一の要素を格納しているシーケンス。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。または、<paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>並列シーケンスの唯一の要素、または、シーケンスが空の場合は既定値を返します。このメソッドは、シーケンス内に要素が複数ある場合は例外をスローします。</summary>
      <returns>入力シーケンスの唯一の要素、または、シーケンスに要素が含まれない場合は default()。</returns>
      <param name="source">返す唯一の要素を格納しているシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件を満たす並列シーケンスの唯一の要素、または、そのような要素が存在しない場合は既定値を返します。このメソッドは、複数の要素が条件を満たす場合は例外をスローします。</summary>
      <returns>条件を満たす入力シーケンスの唯一要素、または、そのような要素が見つからない場合は default()。</returns>
      <param name="source">返す唯一の要素を格納しているシーケンス。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> が空であるか、複数の要素が返されます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>並列シーケンス内の指定された数の要素をバイパスし、残りの要素を返します。</summary>
      <returns>入力シーケンスで指定されたインデックスの後に出現する要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="count">残りの要素を返す前にスキップする要素の数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">カウントが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件が満たされる限り、並列シーケンスの要素をバイパスし、残りの要素を返します。</summary>
      <returns>述語で指定されたテストに合格しなかった線系列の最初の要素を起点として入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>指定された条件が満たされる限り、並列シーケンスの要素をバイパスし、残りの要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>述語で指定されたテストに合格しなかった線系列の最初の要素を起点として入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Double.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Double.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Single.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>値のシーケンスの合計を並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Single.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Double.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">ソース シーケンス内の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Decimal.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Double.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int32.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Int64.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Single.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>入力シーケンスの各要素に対して変換関数を呼び出すことによって取得される値のシーケンスの合計を、並列で計算します。</summary>
      <returns>シーケンスの射影された値の合計。</returns>
      <param name="source">合計を計算する対象の値のシーケンス。</param>
      <param name="selector">各要素に適用する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">合計が <see cref="F:System.Single.MaxValue" /> を超えています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>並列シーケンスの先頭から指定された数だけ連続する要素を返します。</summary>
      <returns>入力シーケンスの先頭から指定された数だけの要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="count">返す要素数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>指定された条件が満たされる限り、並列シーケンスから要素を返します。</summary>
      <returns>テストに合格しなくなった要素の前に出現する入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>指定された条件が満たされる限り、並列シーケンスから要素を返します。要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>テストに合格しなくなった要素の前に出現する入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="predicate">各ソース要素が条件に当てはまるかどうかをテストする関数。この関数の 2 つ目のパラメーターは、ソース要素のインデックスを表します。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されます。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>キーに従って、シーケンス内の後続の要素を並列で昇順に配置します。</summary>
      <returns>要素がキーに従って並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を並列で昇順に配置します。</summary>
      <returns>要素がキーに従って並べ替えられている OrderedParallelQuery{TSource}。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>キーに従って、シーケンス内の後続の要素を並列で降順に配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられているシーケンス。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>指定された比較子を使用して、シーケンス内の後続の要素を並列で降順に配置します。</summary>
      <returns>要素がキーに従って降順に並べ替えられているシーケンス。</returns>
      <param name="source">並べ替える要素を格納している OrderedParallelQuery{TSource}。</param>
      <param name="keySelector">要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する IComparer{TKey}。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>
        <see cref="T:System.Linq.ParallelQuery`1" /> から配列を作成します。</summary>
      <returns>入力シーケンスの要素を含む配列。</returns>
      <param name="source">配列の作成元のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>指定されたキー セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) のキーを生成しています。または、<paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数およびキーの比較子に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) のキーを生成しています。または、<paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) のキーを生成しています。または、<paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) のキーを生成しています。または、<paramref name="keySelector" /> が 2 つの要素に対して重複するキーを生成しています。または、1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>
        <see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" /> の作成元のシーケンス。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>指定されたキー セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Linq.ILookup`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Linq.ILookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Linq.ILookup`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数およびキーの比較子に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Linq.ILookup`2" /> を作成します。</summary>
      <returns>キーと値を格納している <see cref="T:System.Linq.ILookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Linq.ILookup`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Linq.ILookup`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された <paramref name="TElement" /> 型の値を格納する <see cref="T:System.Linq.ILookup`2" />。</returns>
      <param name="source">
        <see cref="T:System.Linq.ILookup`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、<see cref="T:System.Linq.ParallelQuery`1" /> から <see cref="T:System.Linq.ILookup`2" /> を作成します。</summary>
      <returns>入力シーケンスから選択された TElement 型の値を格納している Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;)。</returns>
      <param name="source">
        <see cref="T:System.Linq.ILookup`2" /> の作成元のシーケンス。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="keySelector" /> または <paramref name="elementSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>この Union オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>この Union オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <param name="comparer">このパラメーターは使用されません。</param>
      <typeparam name="TSource">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>既定の等値比較子を使用して、2 つの並列シーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納しているシーケンス。</returns>
      <param name="first">和集合の 1 番目のセットを形成する一意の要素を格納するシーケンス。</param>
      <param name="second">和集合の 2 番目のセットを形成する一意の要素を格納するシーケンス。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定された IEqualityComparer{T} を使用して 2 つの並列シーケンスの和集合を生成します。</summary>
      <returns>2 つの入力シーケンスの要素 (重複する要素は除く) を格納しているシーケンス。</returns>
      <param name="first">和集合の 1 番目のセットを形成する一意の要素を格納するシーケンス。</param>
      <param name="second">和集合の 2 番目のセットを形成する一意の要素を格納するシーケンス。</param>
      <param name="comparer">値を比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">入力シーケンスの要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>述語に基づいて値のシーケンスを並列でフィルター処理します。</summary>
      <returns>条件を満たす入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">フィルター処理するシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">source の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>述語に基づいて値のシーケンスを並列でフィルター処理します。各要素のインデックスは、述語関数のロジックで使用されます。</summary>
      <returns>条件を満たす入力シーケンスからの要素を格納しているシーケンス。</returns>
      <param name="source">フィルター処理するシーケンス。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">source の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.OverflowException">
        <see cref="F:System.Int32.MaxValue" /> を超える要素がこのクエリによって列挙されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>クエリに関連付ける <see cref="T:System.Threading.CancellationToken" /> を設定します。</summary>
      <returns>source と同じクエリを表すが、キャンセル トークンが登録されている ParallelQuery。</returns>
      <param name="source">オプションを設定する対象の ParallelQuery。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ObjectDisposedException">破棄された <paramref name="cancellationToken" /> に関連付けられている <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> はクエリで複数回使用されます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>クエリで使用する並列化の次数を設定します。並列化の次数とは、クエリの処理において同時実行されるタスクの最大数です。</summary>
      <returns>並列化の次数が制限されている source と同じクエリを表す ParallelQuery。</returns>
      <param name="source">並列化の次数に対する制限を設定する ParallelQuery。</param>
      <param name="degreeOfParallelism">クエリで使用する並列化の次数。既定値は Math.Min (<see cref="P:System.Environment.ProcessorCount" />、 MAX_SUPPORTED_DOP) でMAX_SUPPORTED_DOPは 512 です。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> が 1 より小さいか、または 511 を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism は、クエリで複数回使用されます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>クエリの実行モードを設定します。</summary>
      <returns>source と同じクエリを表すが、クエリの実行モードが登録されている ParallelQuery。</returns>
      <param name="source">オプションを設定する対象の ParallelQuery。</param>
      <param name="executionMode">クエリの実行モード。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> が有効な <see cref="T:System.Linq.ParallelExecutionMode" /> 値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode は、クエリで複数回使用されます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>このクエリのマージ オプションを設定します。このオプションは、クエリが出力をバッファリングする方法を指定します。</summary>
      <returns>source と同じクエリを表すが、マージ オプションが登録されている ParallelQuery。</returns>
      <param name="source">オプションを設定する対象の ParallelQuery。</param>
      <param name="mergeOptions">このクエリに設定するマージ オプション。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> が有効な <see cref="T:System.Linq.ParallelMergeOptions" /> 値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> はクエリで複数回使用されます。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>この Zip オーバーロードは呼び出さないでください。このメソッドは互換性のために残されており、呼び出すと常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>このオーバーロードは常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <param name="first">このパラメーターは使用されません。</param>
      <param name="second">このパラメーターは使用されません。</param>
      <param name="resultSelector">このパラメーターは使用されません。</param>
      <typeparam name="TFirst">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TSecond">この型パラメーターは使用されません。</typeparam>
      <typeparam name="TResult">この型パラメーターは使用されません。</typeparam>
      <exception cref="T:System.NotSupportedException">このメソッドが呼び出されたときに発生する例外。</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>指定された述語関数を使用して 2 つのシーケンスを並列でマージします。</summary>
      <returns>2 つのシーケンスに対して <paramref name="resultSelector" /> をペアで実行することによって取得される <paramref name="TResult" /> 型の要素が格納されているシーケンス。シーケンスの長さが異なる場合は、長いシーケンスが短いシーケンスに合わせて切り捨てられます。</returns>
      <param name="first">結合する 1 番目のシーケンス。</param>
      <param name="second">結合する 2 番目のシーケンス。</param>
      <param name="resultSelector">一致する 2 つの要素から結果の要素を作成する関数。</param>
      <typeparam name="TFirst">最初のシーケンスの要素の型。</typeparam>
      <typeparam name="TSecond">2 番目のシーケンスの要素の型。</typeparam>
      <typeparam name="TResult">返される要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> または <paramref name="second" /> または <paramref name="resultSelector" /> が null 参照 (Visual Basic の Nothing) です。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="WithCancellation" /> を通じて渡された トークンで、クエリが取り消されました。</exception>
      <exception cref="T:System.AggregateException">1 つ以上の例外が、クエリの評価中に発生しました。</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>クエリ実行モードは、システムがクエリの並列化時にパフォーマンス上のトレードオフを処理する方法を指定するヒントです。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>これは、既定の設定です。PLINQ は、クエリの構造を調べ、クエリをスピードアップできる可能性がある場合にのみ、クエリを並列化します。クエリの構造から判断してスピードアップできる可能性がない場合、PLINQ は通常の LINQ to Objects クエリとしてクエリを実行します。</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>大量のオーバーヘッドを伴うアルゴリズムを使用することになっても、クエリ全体を並列化します。このフラグは、クエリの並列実行によってスピードアップできることがわかっているが、既定のモードの PLINQ ではシーケンシャルに実行される場合に使用します。</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>クエリで使用する出力マージの推奨される種類を指定します。つまり、さまざまなパーティションから返された結果を PLINQ がどのように単一の結果シーケンスにマージするかを示します。これはヒントにすぎないため、すべてのクエリの並列化においてシステムが適用するとは限りません。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>システムが選択したサイズの出力バッファーを使用してマージを行います。結果は、クエリのコンシューマーに返される前に、出力バッファーに蓄積されます。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>既定のマージの種類 (AutoBuffered) を使用します。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>すべての出力バッファーを使用してマージを行います。システムは、クエリのコンシューマーに結果を返す前に、すべての結果をバッファーに蓄積します。</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>出力バッファーを使用せずにマージを行います。結果の要素が算出されると、直ちにその要素がクエリのコンシューマーに返されます。</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>並列シーケンスを表します。</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>シーケンスを反復処理する列挙子を返します。</summary>
      <returns>シーケンスを反復処理する列挙子。</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>並列シーケンスを表します。</summary>
      <typeparam name="TSource">ソース シーケンス内の要素の型。</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>シーケンスを反復処理する列挙子を返します。</summary>
      <returns>シーケンスを反復処理する列挙子。</returns>
    </member>
  </members>
</doc>