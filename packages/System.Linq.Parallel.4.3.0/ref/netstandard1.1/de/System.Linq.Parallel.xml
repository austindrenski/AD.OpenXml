<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Stellt eine sortierte parallele Sequenz dar.</summary>
      <typeparam name="TSource">Der Typ der Elemente in der Quellauflistung.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Sequenz durchläuft.</summary>
      <returns>Ein Enumerator, der die Sequenz durchläuft.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Stellt einen Satz von Methoden zum Abfragen von Objekten bereit, die ParallelQuery{TSource} implementieren.Dies ist die parallele Entsprechung von <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Wendet parallel eine Akkumulatorfunktion auf eine Sequenz an.Diese Überladung ist in der sequenziellen Implementierung nicht verfügbar.</summary>
      <returns>Der transformierte letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seedFactory">Eine Funktion, die den Anfangsakkumulatorwert zurückgibt. </param>
      <param name="updateAccumulatorFunc">Eine Akkumulatorfunktion, die für jedes Element in einer Partition aufgerufen werden soll. </param>
      <param name="combineAccumulatorsFunc">Eine Akkumulatorfunktion, die für das zurückgegebene Akkumulatorergebnis jeder Partition aufgerufen werden soll.</param>
      <param name="resultSelector">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="seedFactory" />, <paramref name="updateAccumulatorFunc" />, <paramref name="combineAccumulatorsFunc" /> oder <paramref name="resultSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Wendet parallel eine Akkumulatorfunktion auf eine Sequenz an.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Wendet parallel eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Wendet parallel eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</summary>
      <returns>Der transformierte letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <param name="resultSelector">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> oder <paramref name="resultSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Wendet parallel eine Akkumulatorfunktion auf eine Sequenz an.Diese Überladung ist in der sequenziellen Implementierung nicht verfügbar.</summary>
      <returns>Der transformierte letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="updateAccumulatorFunc">Eine Akkumulatorfunktion, die für jedes Element in einer Partition aufgerufen werden soll. </param>
      <param name="combineAccumulatorsFunc">Eine Akkumulatorfunktion, die für das zurückgegebene Akkumulatorergebnis jeder Partition aufgerufen werden soll. </param>
      <param name="resultSelector">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="updateAccumulatorFunc" /> oder <paramref name="combineAccumulatorsFunc" /> oder <paramref name="resultSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Bestimmt parallel, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <returns>True, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird oder wenn die Sequenz leer ist, andernfalls false.</returns>
      <param name="source">Eine Sequenz, auf deren Elemente das Prädikat angewendet werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Bestimmt, ob eine parallele Sequenz Elemente enthält.</summary>
      <returns>True, wenn die Quellsequenz Elemente enthält, andernfalls false.</returns>
      <param name="source">Die Sequenz, für die überprüft werden soll, ob sie leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Bestimmt parallel, ob ein Element einer Sequenz eine Bedingung erfüllt.</summary>
      <returns>True, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls false.</returns>
      <param name="source">Eine Sequenz, auf deren Elemente das Prädikat angewendet werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Konvertiert ein <see cref="T:System.Linq.ParallelQuery`1" /> in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, um die sequenzielle Auswertung der Abfrage zu erzwingen.</summary>
      <returns>Die als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisierte Eingabesequenz.</returns>
      <param name="source">Die Sequenz, die in <see cref="T:System.Collections.Generic.IEnumerable`1" /> umgewandelt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Ermöglicht die Behandlung einer Datenquelle als sortierte Datenquelle, indem die Standardeinstellung "unsortiert" überschrieben wird.AsOrdered kann nur für nicht generische Sequenzen aufgerufen werden, die von AsParallel, ParallelEnumerable.Range und ParallelEnumerable.Repeat zurückgegeben werden.</summary>
      <returns>Die Quellsequenz, die die ursprüngliche Reihenfolge in den nachfolgenden Abfrageoperatoren beibehält.</returns>
      <param name="source">Die Eingabesequenz.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">ausgelöst, wenn <paramref name="source" /> keine Elemente enthält- oder - wenn AsOrdered im Laufe einer Abfrage aufgerufen wird.Der Aufruf kann direkt nach <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> oder <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" /> ausgeführt werden.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Ermöglicht die Behandlung einer Datenquelle als sortierte Datenquelle, indem die Standardeinstellung "unsortiert" überschrieben wird.AsOrdered kann nur für generische Sequenzen aufgerufen werden, die von AsParallel, ParallelEnumerable.Range und ParallelEnumerable.Repeat zurückgegeben werden.</summary>
      <returns>Die Quellsequenz, die die ursprüngliche Reihenfolge in den nachfolgenden Abfrageoperatoren beibehält.</returns>
      <param name="source">Die Eingabesequenz.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Ausgelöst, wenn <paramref name="source" /> keine Elemente enthält- oder - wenn <paramref name="source" /> nicht AsParallel, ParallelEnumerable.Range oder ParallelEnumerable.Repeat ist.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Ermöglicht die Parallelisierung einer Abfrage mit einem benutzerdefinierten Partitionierer, der für die Aufteilung der Eingabesequenz in Partitionen zuständig ist, als Quelle.</summary>
      <returns>Die <paramref name="source" /> als ParallelQuery, die an ParallelEnumerable-Erweiterungsmethoden gebunden werden soll.</returns>
      <param name="source">Ein Partitionierer für die Eingabesequenz.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Ermöglicht die Parallelisierung einer Abfrage.</summary>
      <returns>Die Quelle als <see cref="T:System.Linq.ParallelQuery`1" />, das an ParallelEnumerable-Erweiterungsmethoden gebunden werden soll.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das in ein <see cref="T:System.Linq.ParallelQuery`1" /> konvertiert werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Ermöglicht die Parallelisierung einer Abfrage.</summary>
      <returns>Die Quelle als ParallelQuery, die an ParallelEnumerable-Erweiterungsmethoden gebunden werden soll.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das in ein <see cref="T:System.Linq.ParallelQuery" /> konvertiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Konvertiert ein <see cref="T:System.Linq.ParallelQuery`1" /> in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, um die sequenzielle Auswertung der Abfrage zu erzwingen.</summary>
      <returns>Die Quelle als <see cref="T:System.Collections.Generic.IEnumerable`1" />, das an sequenzielle Erweiterungsmethoden gebunden werden soll.</returns>
      <param name="source">Ein <see cref="T:System.Linq.ParallelQuery`1" />, das in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> konvertiert werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Ermöglicht es, eine Zwischenabfrage so zu behandeln, als würde keine Reihenfolge zwischen den Elementen vorausgesetzt.</summary>
      <returns>Die Quellsequenz mit beliebiger Reihenfolge.</returns>
      <param name="source">Die Eingabesequenz.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Gibt den Durchschnittswert der Sequenz von Werten zurück.</returns>
      <param name="source">Die Quellsequenz.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">Eine Sequenz von Werten, die verwendet werden, um einen Durchschnitt zu berechnen. Der Durchschnitt der Sequenz von Werten. <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe oder Anzahl der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Berechnet parallel den Durchschnitt einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">(Ausgelöst als interne Ausnahme von einer <see cref="T:System.AggregateException" />).Die <paramref name="selector" />-Funktion gibt einen Wert größer als MaxValue für den Elementtyp zurück.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Konvertiert die Elemente einer ParallelQuery in den angegebenen Typ.</summary>
      <returns>Eine Sequenz, die jedes in den angegebenen Typ konvertierte Element der Quellsequenz enthält.</returns>
      <param name="source">Die Sequenz, die die zu konvertierenden Elemente enthält.</param>
      <typeparam name="TResult">Der Typ, in den die Elemente von <paramref name="source" /> konvertiert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidCastException">Der Typ der Quellsequenz konnte nicht in <paramref name="TResult" /> konvertiert werden.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Diese Concat-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Verkettet zwei parallele Sequenzen.</summary>
      <returns>Eine Sequenz, die die verketteten Elemente der zwei Eingabesequenzen enthält.</returns>
      <param name="first">Die erste zu verkettende Sequenz.</param>
      <param name="second">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Bestimmt parallel mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>True, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Eine Sequenz, in der ein Wert gesucht werden soll.</param>
      <param name="value">Der Wert, der in der Sequenz gesucht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt parallel mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>True, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Eine Sequenz, in der ein Wert gesucht werden soll.</param>
      <param name="value">Der Wert, der in der Sequenz gesucht werden soll.</param>
      <param name="comparer">Ein Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt die Anzahl von Elementen in einer parallelen Sequenz zurück.</summary>
      <returns>Die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Eine Sequenz, die zu zählende Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Anzahl der Elemente in der Quelle ist größer als <see cref="F:System.Int32.MaxValue" />.(In diesem Fall ist der InnerException <see cref="T:System.OverflowException" />) - oder - Eine oder mehrere Ausnahmen sind während der Auswertung für die Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt eine Zahl zurück, die die Anzahl von Elementen in der angegebenen parallelen Sequenz angibt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Eine Sequenz, die zu zählende Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Anzahl der Elemente in der Quelle ist größer als <see cref="F:System.Int32.MaxValue" />.(In diesem Fall ist der InnerException <see cref="T:System.OverflowException" />) - oder - Eine oder mehrere Ausnahmen sind während der Auswertung für die Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt die Elemente der angegebenen parallelen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</summary>
      <returns>Eine Sequenz, die default(TSource) enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Die Sequenz, für die ein Standardwert zurückgegeben werden soll, wenn sie leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Gibt die Elemente der angegebenen parallelen Sequenz zurück, oder den angegebenen Wert in einer Singletonauflistung, wenn die Sequenz leer ist.</summary>
      <returns>Eine Sequenz, die defaultValue enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Die Sequenz, für die der angegebene Wert zurückgegeben werden soll, wenn sie leer ist.</param>
      <param name="defaultValue">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer parallelen Sequenz zurück.</summary>
      <returns>Eine Sequenz, die unterschiedliche Elemente aus der Quellsequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Gibt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten unterschiedliche Elemente aus einer parallelen Sequenz zurück.</summary>
      <returns>Eine Sequenz, die unterschiedliche Elemente aus der Quellsequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer parallelen Sequenz zurück.</summary>
      <returns>Das Element an der angegebenen Position in der Quellsequenz.</returns>
      <param name="source">Eine Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="index">Der auf 0 (null) basierende Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0 bzw. größer oder gleich der Anzahl der Elemente in <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer parallelen Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <returns>default(TSource), wenn der Index außerhalb der Begrenzungen der Quellsequenz liegt, andernfalls das Element an der angegebenen Position in der Quellsequenz.</returns>
      <param name="source">Eine Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="index">Der auf 0 (null) basierende Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Gibt ein leeres ParallelQuery{TResult} mit dem angegebenen Typargument zurück.</summary>
      <returns>Eine leere Sequenz, deren Typargument <paramref name="TResult" /> ist.</returns>
      <typeparam name="TResult">Der Typ, der dem Typparameter der zurückgegebenen generischen Sequenz zugewiesen werden soll.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Diese Except-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Diese Except-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Erzeugt die Differenz zweier paralleler Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</returns>
      <param name="first">Eine Sequenz, deren nicht auch in <paramref name="second" /> enthaltenen Elemente zurückgegeben werden.</param>
      <param name="second">Eine Sequenz, deren auch in der ersten Sequenz enthaltenen Elemente aus der zurückgegebenen Sequenz entfernt werden.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Differenzmenge zweier paralleler Sequenzen.</summary>
      <returns>Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</returns>
      <param name="first">Eine Sequenz, deren nicht auch in <paramref name="second" /> enthaltenen Elemente zurückgegeben werden.</param>
      <param name="second">Eine Sequenz, deren auch in der ersten Sequenz enthaltenen Elemente aus der zurückgegebenen Sequenz entfernt werden. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das erste Element einer parallelen Sequenz zurück.</summary>
      <returns>Das erste Element in der angegebenen Sequenz.</returns>
      <param name="source">Die Sequenz, deren erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element in einer parallelen Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das erste Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Die Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element in <paramref name="source" /> erfüllt die Bedingung in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das erste Element einer parallelen Sequenz zurück oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(TSource), wenn <paramref name="source" /> leer ist, andernfalls das erste Element in <paramref name="source" />.</returns>
      <param name="source">Die Sequenz, deren erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element der parallelen Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(TSource), wenn <paramref name="source" /> leer ist oder die vom Prädikat angegebene Überprüfung für kein Element erfolgreich ausgeführt wird, andernfalls das erste Element in <paramref name="source" />, für das die vom Prädikat angegebene Überprüfung erfolgreich ausgeführt wird.</returns>
      <param name="source">Die Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Ruft parallel die angegebene Aktion für jedes Element in der <paramref name="source" /> auf.</summary>
      <param name="source">Das <see cref="T:System.Linq.ParallelQuery`1" />, dessen Elemente von <paramref name="action" /> verarbeitet werden.</param>
      <param name="action">Eine Aktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Eine Sequenz von Gruppen, die entsprechend ihrem <paramref name="TKey" /> absteigend sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <returns>Eine Sequenz von Gruppen, die entsprechend ihrem <paramref name="TKey" /> absteigend sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.OrderedParallelQuery`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion.</summary>
      <returns>Eine Sequenz von Gruppen, die entsprechend ihrem <paramref name="TKey" /> absteigend sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.OrderedParallelQuery`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente im <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer Schlüsselauswahlfunktion.Die Schlüssel werden mithilfe eines Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Eine Sequenz von Gruppen, die entsprechend ihrem <paramref name="TKey" /> absteigend sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einer IGrouping zugeordnet wird.</param>
      <param name="comparer">Ein IComparer{TSource} zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in der IGrouping.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Eine Sequenz von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über eine Gruppe und ihren Schlüssel darstellt.</returns>
      <param name="source">Eine Sequenz, deren Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einer IGrouping&lt;TKey, TElement&gt; zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Eine Sequenz von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über eine Gruppe und ihren Schlüssel darstellt.</returns>
      <param name="source">Eine Sequenz, deren Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem IGrouping{Key, TElement} zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</summary>
      <returns>Eine Sequenz von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über eine Gruppe und ihren Schlüssel darstellt.</returns>
      <param name="source">Eine Sequenz, deren Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert parallel die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Die Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <returns>Eine Folge von Gruppen.</returns>
      <param name="source">Eine Sequenz, deren Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Diese GroupJoin-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="outer">Dieser Parameter wird nicht verwendet.</param>
      <param name="inner">Dieser Parameter wird nicht verwendet.</param>
      <param name="outerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="innerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="resultSelector">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TOuter">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TInner">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TKey">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TResult">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Diese GroupJoin-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="outer">Dieser Parameter wird nicht verwendet.</param>
      <param name="inner">Dieser Parameter wird nicht verwendet.</param>
      <param name="outerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="innerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="resultSelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TOuter">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TInner">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TKey">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TResult">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Korreliert parallel die Elemente zweier Sequenzen basierend auf der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Eine Sequenz, die Elemente des Typs <paramref name="TResult" /> enthält, die durch Ausführen eines Group Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TOuter">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert parallel die Elemente zweier Sequenzen basierend auf der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Eine Sequenz, die Elemente des Typs <paramref name="TResult" /> enthält, die durch Ausführen eines Group Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Diese Intersect-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Diese Intersect-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Erzeugt die Schnittmenge zweier paralleler Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</returns>
      <param name="first">Eine Sequenz, deren unterschiedliche Elemente, die auch in <paramref name="second" /> vorhanden sind, zurückgegeben werden.</param>
      <param name="second">Eine Sequenz, deren unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen IEqualityComparer{T} zum Vergleichen von Werten die Schnittmenge zweier paralleler Sequenzen.</summary>
      <returns>Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</returns>
      <param name="first">Eine Sequenz, deren unterschiedliche Elemente, die auch in <paramref name="second" /> vorhanden sind, zurückgegeben werden.</param>
      <param name="second">Eine Sequenz, deren unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Diese Join-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="outer">Dieser Parameter wird nicht verwendet.</param>
      <param name="inner">Dieser Parameter wird nicht verwendet.</param>
      <param name="outerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="innerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="resultSelector">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TOuter">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TInner">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TKey">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TResult">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Diese Join-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="outer">Dieser Parameter wird nicht verwendet.</param>
      <param name="inner">Dieser Parameter wird nicht verwendet.</param>
      <param name="outerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="innerKeySelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="resultSelector">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TOuter">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TInner">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TKey">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TResult">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Korreliert parallel die Elemente zweier Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Eine Sequenz, die Elemente des Typs <paramref name="TResult" /> enthält, die durch Ausführen eines Inner Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <typeparam name="TOuter">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert parallel die Elemente zweier Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Eine Sequenz, die Elemente des Typs <paramref name="TResult" /> enthält, die durch Ausführen eines Inner Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="action" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das letzte Element einer parallelen Sequenz zurück.</summary>
      <returns>Der Wert an der letzten Position in der Quellsequenz.</returns>
      <param name="source">Die Sequenz, aus der das letzte Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer parallelen Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das letzte Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Die Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element in <paramref name="source" /> erfüllt die Bedingung in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das letzte Element einer parallelen Sequenz zurück oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(), wenn die Quellsequenz leer ist, andernfalls das letzte Element in der Sequenz.</returns>
      <param name="source">Die Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer parallelen Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(), wenn die Sequenz leer ist oder keine Elemente von der Prädikatfunktion erfolgreich überprüft werden, andernfalls das letzte Element, das von der Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Die Sequenz, aus der ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt eine Int64 zurück, die die Gesamtanzahl von Elementen in einer parallelen Sequenz darstellt.</summary>
      <returns>Die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Eine Sequenz, die zu zählende Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Anzahl der Elemente in der Quelle ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.OverflowException">Das berechnete Ergebnis ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt eine Int64 zurück, die die Anzahl von Elementen in einer parallelen Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Eine Sequenz, die zu zählende Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Anzahl der Elemente in der Quelle ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.OverflowException">Das berechnete Ergebnis ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt den Höchstwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Quellsequenz.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Höchstwert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt den Mindestwert in einer parallelen Sequenz von Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Ruft parallel für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den Mindestwert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente und <paramref name="TSource" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filtert die Elemente einer ParallelQuery anhand eines angegebenen Typs.</summary>
      <returns>Eine Sequenz, die Elemente des Typs aus der Eingabesequenz enthält.</returns>
      <param name="source">Die Sequenz, deren Elemente gefiltert werden sollen.</param>
      <typeparam name="TResult">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sortiert parallel die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert parallel die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein IComparer{TKey} zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sortiert parallel die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein IComparer{TKey} zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="KeySelector" /> ist ein Nullverweis (Nothing in Visual Basic)..</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Generiert eine parallele Sequenz von ganzen Zahlen in einem angegebenen Bereich.</summary>
      <returns>Ein IEnumerable&lt;Int32&gt; in C# oder IEnumerable(Of Int32) in Visual Basic, das einen Bereich sequenzieller ganzer Zahlen enthält.</returns>
      <param name="start">Der Wert der ersten ganzen Zahl in der Sequenz.</param>
      <param name="count">Die Anzahl der aufeinander folgenden ganzen Zahlen, die generiert werden sollen.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> ist kleiner als 0 -oder- <paramref name="start" /> + <paramref name="count" /> - 1 ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Generiert eine parallele Sequenz, die einen wiederholten Wert enthält.</summary>
      <returns>Eine Sequenz, die einen wiederholten Wert enthält.</returns>
      <param name="element">Der zu wiederholende Wert.</param>
      <param name="count">Die gewünschte Anzahl der Wiederholungen des Werts in der generierten Sequenz.</param>
      <typeparam name="TResult">Der Typ des Werts, der in der Ergebnissequenz wiederholt werden soll.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Kehrt die Reihenfolge der Elemente in einer parallelen Sequenz um.</summary>
      <returns>Eine Sequenz , deren Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</returns>
      <param name="source">Eine umzukehrende Sequenz von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Projiziert parallel jedes Element einer Sequenz in ein neues Format.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <param name="source">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der von der Auswahl zurückgegebene Typ der Elemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projiziert parallel jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis eines Aufrufs der Transformationsfunktion für jedes Element von <paramref name="source" /> ist, basierend auf dem für <paramref name="selector" /> bereitgestellten Index.</returns>
      <param name="source">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der von der Auswahl zurückgegebene Typ der Elemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.Diese Bedingung könnte in streamenden Szenarien auftreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion <paramref name="collectionSelector" /> für jedes Element von <paramref name="source" /> auf der Basis des für <paramref name="collectionSelector" /> angegebenen Indexes und die anschließende Zuordnung jedes dieser Sequenzelemente und ihrer entsprechenden Quellelemente zu einem Ergebniselement sind. </returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Transformationsfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TSource">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TCollection">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der Ergebnissequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projiziert jedes Element einer Sequenz parallel in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzelnen Sequenz zusammen.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der von der Auswahl zurückgegebene Typ der Elemente der Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.Der Index jedes Quellelements wird im projizierten Zwischenformat des jeweiligen Elements verwendet.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion <paramref name="collectionSelector" /> für jedes Element von <paramref name="source" /> auf der Basis des für <paramref name="collectionSelector" /> angegebenen Indexes und die anschließende Zuordnung jedes dieser Sequenzelemente und ihrer entsprechenden Quellelemente zu einem Ergebniselement sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Transformationsfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TSource">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TCollection">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der zurückzugebende Elementtyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projiziert jedes Element einer Sequenz parallel in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzelnen Sequenz zusammen.Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</summary>
      <returns>Eine Sequenz, deren Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der von der Auswahl zurückgegebene Typ der Elemente der Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Diese SequenceEqual-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Wird jedes Mal ausgelöst, wenn diese Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Diese SequenceEqual-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Wird jedes Mal ausgelöst, wenn diese Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Bestimmt, ob zwei parallele Sequenzen gleich sind, indem die Elemente mithilfe des Standardgleichheitsvergleichs für ihren Typ verglichen werden.</summary>
      <returns>True, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente durch den Standardgleichheitsvergleich für ihren Typ als gleich bestimmt werden, andernfalls false.</returns>
      <param name="first">Eine Sequenz, die mit einer zweiten Sequenz verglichen werden soll.</param>
      <param name="second">Eine Sequenz, die mit der ersten Eingabesequenz verglichen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt, ob zwei parallele Sequenzen gleich sind, indem ihre Elemente mithilfe eines angegebenen IEqualityComparer{T} verglichen werden.</summary>
      <returns>True, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente durch den Standardgleichheitsvergleich für ihren Typ als gleich bestimmt werden, andernfalls false.</returns>
      <param name="first">Eine Sequenz, die mit <paramref name="second" /> verglichen werden soll.</param>
      <param name="second">Eine Sequenz, die mit der ersten Eingabesequenz verglichen werden soll.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, der zum Vergleichen von Elementen verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das einzige Element einer parallelen Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <returns>Das einzige Element der Eingabesequenz.</returns>
      <param name="source">Die Sequenz, deren einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">Die Eingabesequenz enthält mehr als ein Element.-oder- Die Eingabesequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer parallelen Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz, das eine Bedingung erfüllt.</returns>
      <param name="source">Die Sequenz, deren einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.-oder- Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Gibt das einzige Element einer parallelen Sequenz zurück oder einen Standardwert, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz oder default(), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="source">Die Sequenz, deren einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer parallelen Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Gibt das einzige Element der Eingabesequenz zurück, das die Bedingung erfüllt, oder default(), wenn ein solches Element nicht gefunden wird.</returns>
      <param name="source">Die Sequenz, deren einziges Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ist leer oder mehrere Elemente werden zurückgegeben.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Umgeht eine festgelegte Anzahl von Elementen in einer parallelen Sequenz und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Eine Sequenz, die die Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Anzahl ist größer als <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Umgeht Elemente in einer parallelen Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Eine Sequenz, die die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, für das die vom Prädikat angegebene Überprüfung nicht erfolgreich ausgeführt wird.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Umgeht Elemente in einer parallelen Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Eine Sequenz, die die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, für das die vom Prädikat angegebene Überprüfung nicht erfolgreich ausgeführt wird.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Double.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Double.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Single.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Single.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Double.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Quellsequenz.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Double.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Single.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Berechnet parallel die Summe einer Sequenz von Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Summe berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Die Summe ist größer als <see cref="F:System.Single.MaxValue" />.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer parallelen Sequenz zurück.</summary>
      <returns>Eine Sequenz, die die festgelegte Anzahl von Elementen ab dem Anfang der Eingabesequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der zurückzugebenden Elemente.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt Elemente aus einer parallelen Sequenz zurück, solange eine angegebene Bedingung true ist.</summary>
      <returns>Eine Sequenz, die die Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Gibt Elemente aus einer parallelen Sequenz zurück, solange eine angegebene Bedingung true ist.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Eine Sequenz, die Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von dieser Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Führt parallel eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Führt parallel mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch.</summary>
      <returns>Ein OrderedParallelQuery{TSource}, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein IComparer{TKey} zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Führt parallel eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Eine Sequenz, deren Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Führt parallel mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch.</summary>
      <returns>Eine Sequenz, deren Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein OrderedParallelQuery{TSource}, das zu sortierende Elemente enthält.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein IComparer{TKey} zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Erstellt ein Array aus einem <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Ein Array, das die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Eine Sequenz, aus der ein Array erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Eine Sequenz, aus der ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> generiert einen Schlüssel, der ein NULL-Verweis ist (Nothing in Visual Basic).-oder- <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einer <see cref="T:System.Linq.ParallelQuery`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Eine Sequenz, aus der ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> generiert einen Schlüssel, der ein NULL-Verweis ist (Nothing in Visual Basic).-oder- <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden</returns>
      <param name="source">Eine Sequenz, aus der ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> generiert einen Schlüssel, der ein NULL-Verweis ist (Nothing in Visual Basic).-oder- <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden</returns>
      <param name="source">Eine Sequenz, aus der ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> generiert einen Schlüssel, der ein NULL-Verweis ist (Nothing in Visual Basic).-oder- <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.- oder - Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Eine Sequenz, aus der ein <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.ILookup`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Linq.ILookup`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Die Sequenz, aus der ein <see cref="T:System.Linq.ILookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.ILookup`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs.</summary>
      <returns>Ein <see cref="T:System.Linq.ILookup`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Die Sequenz, aus der ein <see cref="T:System.Linq.ILookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Erstellt ein <see cref="T:System.Linq.ILookup`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Linq.ILookup`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</returns>
      <param name="source">Die Sequenz, aus der ein <see cref="T:System.Linq.ILookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird. </param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.ILookup`2" /> aus einem <see cref="T:System.Linq.ParallelQuery`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion.</summary>
      <returns>Ein Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), das aus der Eingabesequenz ausgewählte Werte des Typs TElement enthält.</returns>
      <param name="source">Die Sequenz, aus der ein <see cref="T:System.Linq.ILookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird. </param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Diese Union-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Diese Union-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <param name="comparer">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TSource">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Erzeugt die Vereinigungsmenge zweier paralleler Sequenzen mithilfe des Standardgleichheitsvergleichs.</summary>
      <returns>Eine Sequenz, die die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="first">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Vereinigungsmengenbildung darstellen.</param>
      <param name="second">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Vereinigungsmengenbildung darstellen.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe eines angegebenen IEqualityComparer{T} die Vereinigungsmenge zweier paralleler Sequenzen.</summary>
      <returns>Eine Sequenz, die die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="first">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Vereinigungsmengenbildung darstellen.</param>
      <param name="second">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Vereinigungsmengenbildung darstellen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filtert parallel eine Sequenz von Werten nach einem Prädikat.</summary>
      <returns>Eine Sequenz, die Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen.</returns>
      <param name="source">Eine zu filternde Sequenz.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente der Quelle.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtert parallel eine Sequenz von Werten nach einem Prädikat.In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</summary>
      <returns>Eine Sequenz, die Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen.</returns>
      <param name="source">Eine zu filternde Sequenz.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente der Quelle.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.OverflowException">Mehr als <see cref="F:System.Int32.MaxValue" /> Elemente werden von der Abfrage aufgelistet.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Legt das <see cref="T:System.Threading.CancellationToken" /> fest, das der Abfrage zugeordnet werden soll.</summary>
      <returns>Eine ParallelQuery, die die gleiche Abfrage wie die Quelle darstellt, jedoch entsprechend dem registrierten Abbruchtoken.</returns>
      <param name="source">Eine ParallelQuery, für die die Option festgelegt werden soll.</param>
      <param name="cancellationToken">Ein Abbruchtoken.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Die <see cref="T:System.Threading.CancellationTokenSource" />, die dem freigegebenen <paramref name="cancellationToken" /> zugeordnet ist.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> wird mehrmals in der Abfrage verwendet.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Legt den Grad der Parallelität für eine Abfrage fest.Der Grad der Parallelität ist die maximale Anzahl gleichzeitig ausgeführter Aufgaben, die zum Verarbeiten der Abfrage verwendet werden.</summary>
      <returns>Eine ParallelQuery, die die gleiche Abfrage wie die Quelle mit festgelegtem Grenzwert für den Grad der Parallelität darstellt.</returns>
      <param name="source">Eine ParallelQuery, für die der Grenzwert für den Grad der Parallelität festgelegt werden soll.</param>
      <param name="degreeOfParallelism">Der Grad der Parallelität für die Abfrage.Der Standardwert ist Math.Min(<see cref="P:System.Environment.ProcessorCount" />, MAX_SUPPORTED_DOP), wobei MAX_SUPPORTED_DOP gleich 512 ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> ist kleiner als 1 oder größer als 511. </exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism wird mehrmals in der Abfrage verwendet.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Legt den Ausführungsmodus der Abfrage fest.</summary>
      <returns>Eine ParallelQuery, die die gleiche Abfrage wie die Quelle darstellt, jedoch entsprechend dem registrierten Ausführungsmodus.</returns>
      <param name="source">Eine ParallelQuery, für die die Option festgelegt werden soll.</param>
      <param name="executionMode">Der Modus, in dem die Abfrage ausgeführt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> ist kein gültiger <see cref="T:System.Linq.ParallelExecutionMode" />-Wert.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode wird mehrmals in der Abfrage verwendet.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Legt die Zusammenführungsoptionen für diese Abfrage fest. Diese Optionen geben an, wie die Abfrage die Ausgabe puffert.</summary>
      <returns>Eine ParallelQuery, die die gleiche Abfrage wie die Quelle darstellt, jedoch entsprechend den registrierten Zusammenführungsoptionen.</returns>
      <param name="source">Eine ParallelQuery, für die die Option festgelegt werden soll.</param>
      <param name="mergeOptions">Die Zusammenführungsoptionen, die für diese Abfrage festgelegt werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> ist kein gültiger <see cref="T:System.Linq.ParallelMergeOptions" />-Wert.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> wird mehrmals in der Abfrage verwendet.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Diese Zip-Überladung sollte nie aufgerufen werden.Diese Methode wird als veraltet markiert und löst beim Aufrufen immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Diese Überladung löst immer eine <see cref="T:System.NotSupportedException" /> aus.</returns>
      <param name="first">Dieser Parameter wird nicht verwendet.</param>
      <param name="second">Dieser Parameter wird nicht verwendet.</param>
      <param name="resultSelector">Dieser Parameter wird nicht verwendet.</param>
      <typeparam name="TFirst">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TSecond">Dieser Typparameter wird nicht verwendet.</typeparam>
      <typeparam name="TResult">Dieser Typparameter wird nicht verwendet.</typeparam>
      <exception cref="T:System.NotSupportedException">Die Ausnahme, die auftritt, wenn die Methode aufgerufen wird.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Führt parallel zwei Sequenzen unter Verwendung der angegebenen Prädikatfunktion zusammen.</summary>
      <returns>Eine Sequenz, die Elemente des Typs <paramref name="TResult" /> enthält, die durch paarweises Ausführen von <paramref name="resultSelector" /> für zwei Sequenzen ermittelt werden.Wenn die Sequenzlängen ungleich sind, wird auf die Länge der kürzeren Sequenz gekürzt.</returns>
      <param name="first">Die erste Sequenz, die gezippt werden soll.</param>
      <param name="second">Die zweite Sequenz, die gezippt werden soll.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <typeparam name="TFirst">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TSecond">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TResult">Der Typ der Rückgabeelemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> oder <paramref name="resultSelector" /> ist ein NULL-Verweis (Nothing in Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">Die Abfrage wurde mit dem Token, das durch <paramref name="WithCancellation" /> übergeben wurde, abgebrochen.</exception>
      <exception cref="T:System.AggregateException">Eine oder mehrere Ausnahmen sind während der Auswertung der Abfrage aufgetreten.</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>Der Abfrageausführungsmodus ist ein Hinweis, der angibt, wie Leistungskompromisse beim Parallelisieren von Abfragen behandelt werden sollen.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>Dies ist die Standardeinstellung.PLINQ untersucht die Struktur der Abfrage und parallelisiert die Abfrage nur, wenn dies wahrscheinlich zu einer Geschwindigkeitssteigerung führt.Wenn die Abfragestruktur angibt, dass wahrscheinlich keine Geschwindigkeitssteigerung erreicht wird, führt PLINQ die Abfrage als normale LINQ to Objects-Abfrage aus.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallelisiert die gesamte Abfrage, auch wenn dies die Verwendung von Algorithmen mit hohem Mehraufwand beinhaltet.Verwenden Sie dieses Flag in Fällen, in denen Sie wissen, dass die parallele Ausführung der Abfrage zu einer Geschwindigkeitssteigerung führt, PLINQ im Standardmodus jedoch eine sequenzielle Ausführung bedeuten würde.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Gibt den bevorzugten Typ der Ausgabezusammenführung für eine Abfrage an.Anders ausgedrückt wird angegeben, wie PLINQ die Ergebnisse von verschiedenen Partitionen zurück in eine einzelne Ergebnissequenz zusammenführen soll.Dies ist nur ein Hinweis und wird beim Parallelisieren aller Abfragen möglicherweise nicht vom System angewendet.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Verwendet eine Zusammenführung mit Ausgabepuffern einer vom System ausgewählten Größe.Ergebnisse werden in einem Ausgabepuffer gesammelt, bevor sie für den Consumer der Abfrage verfügbar gemacht werden.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Verwendet den Standardzusammenführungstyp AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Verwendet eine Zusammenführung mit vollständigen Ausgabepuffern.Das System sammelt alle Ergebnisse, bevor sie für den Consumer der Abfrage verfügbar gemacht werden.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Verwendet eine Zusammenführung ohne Ausgabepuffer.Sobald Ergebniselemente berechnet wurden, werden sie für den Consumer der Abfrage verfügbar gemacht.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Stellt eine parallele Sequenz dar.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Sequenz durchläuft.</summary>
      <returns>Ein Enumerator, der die Sequenz durchläuft.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Stellt eine parallele Sequenz dar.</summary>
      <typeparam name="TSource">Der Elementtyp in der Quellsequenz.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Sequenz durchläuft.</summary>
      <returns>Ein Enumerator, der die Sequenz durchläuft.</returns>
    </member>
  </members>
</doc>