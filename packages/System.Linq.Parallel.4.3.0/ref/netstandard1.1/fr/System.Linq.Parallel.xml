<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Représente une séquence triée et parallèle.</summary>
      <typeparam name="TSource">Type d'éléments de la collection source.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la séquence.</summary>
      <returns>Énumérateur qui itère au sein de la séquence.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Fournit un ensemble de méthodes permettant d'interroger des objets qui implémentent ParallelQuery{TSource}.Il s'agit de l'équivalent parallèle de <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applique en parallèle une fonction d'accumulation sur une séquence.Cette surcharge n'est pas disponible dans l'implémentation séquentielle.</summary>
      <returns>Valeur d'accumulation finale transformée.</returns>
      <param name="source">Séquence à regrouper.</param>
      <param name="seedFactory">Fonction qui retourne la valeur d'accumulation initiale. </param>
      <param name="updateAccumulatorFunc">Fonction d'accumulation à appeler pour chaque élément d'une partition. </param>
      <param name="combineAccumulatorsFunc">Fonction d'accumulation à appeler pour le résultat d'accumulation rapporté de chaque partition.</param>
      <param name="resultSelector">Fonction permettant de transformer la valeur d'accumulation finale en valeur de résultat. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Type de la valeur d'accumulation.</typeparam>
      <typeparam name="TResult">Type de la valeur résultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="seedFactory" /> ou <paramref name="updateAccumulatorFunc" /> ou <paramref name="combineAccumulatorsFunc" /> ou <paramref name="resultSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Applique en parallèle une fonction d'accumulation sur une séquence.</summary>
      <returns>Valeur d'accumulation finale.</returns>
      <param name="source">Séquence à regrouper.</param>
      <param name="func">Fonction d'accumulation à appeler sur chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applique en parallèle une fonction d'accumulation sur une séquence.La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale.</summary>
      <returns>Valeur d'accumulation finale.</returns>
      <param name="source">Séquence à regrouper.</param>
      <param name="seed">Valeur d'accumulation initiale.</param>
      <param name="func">Fonction d'accumulation à appeler sur chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Type de la valeur d'accumulation.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applique en parallèle une fonction d'accumulation sur une séquence.La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale et la fonction spécifiée permet de sélectionner la valeur de résultat.</summary>
      <returns>Valeur d'accumulation finale transformée.</returns>
      <param name="source">Séquence à regrouper.</param>
      <param name="seed">Valeur d'accumulation initiale.</param>
      <param name="func">Fonction d'accumulation à appeler sur chaque élément.</param>
      <param name="resultSelector">Fonction permettant de transformer la valeur d'accumulation finale en valeur de résultat.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Type de la valeur d'accumulation.</typeparam>
      <typeparam name="TResult">Type de la valeur résultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> ou <paramref name="resultSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applique en parallèle une fonction d'accumulation sur une séquence.Cette surcharge n'est pas disponible dans l'implémentation séquentielle.</summary>
      <returns>Valeur d'accumulation finale transformée.</returns>
      <param name="source">Séquence à regrouper.</param>
      <param name="seed">Valeur d'accumulation initiale.</param>
      <param name="updateAccumulatorFunc">Fonction d'accumulation à appeler pour chaque élément d'une partition. </param>
      <param name="combineAccumulatorsFunc">Fonction d'accumulation à appeler pour le résultat d'accumulation rapporté de chaque partition. </param>
      <param name="resultSelector">Fonction permettant de transformer la valeur d'accumulation finale en valeur de résultat. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Type de la valeur d'accumulation.</typeparam>
      <typeparam name="TResult">Type de la valeur résultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="updateAccumulatorFunc" /> ou <paramref name="combineAccumulatorsFunc" /> ou <paramref name="resultSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Détermine en parallèle si tous les éléments d'une séquence satisfont à une condition.</summary>
      <returns>true si tous les éléments de la séquence source réussissent le test dans le prédicat spécifié ou si la séquence est vide ; sinon, false.</returns>
      <param name="source">Séquence qui contient les éléments auxquels appliquer le prédicat.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Détermine si une séquence parallèle contient des éléments.</summary>
      <returns>True si la séquence source contient des éléments ; sinon, False.</returns>
      <param name="source">Séquence à vérifier pour savoir si des éléments y sont présents.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Détermine en parallèle si des éléments d'une séquence satisfont à une condition.</summary>
      <returns>True si l'un des éléments de la séquence source réussit le test dans le prédicat spécifié ; sinon, False.</returns>
      <param name="source">Séquence qui contient les éléments auxquels appliquer le prédicat.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Convertit un <see cref="T:System.Linq.ParallelQuery`1" /> en <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour forcer l'évaluation séquentielle de la requête.</summary>
      <returns>Séquence d'entrées typées comme <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Séquence à caster en <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Active le traitement d'une source de données en considérant qu'elle est ordonnée, en substituant la valeur par défaut indiquant non ordonnée.AsOrdered peut uniquement être appelé sur les séquences non génériques retournées par AsParallel, ParallelEnumerable.Range et ParallelEnumerable.Repeat.</summary>
      <returns>Séquence source qui conservera le classement d'origine dans les opérateurs de requête suivants.</returns>
      <param name="source">Séquence d'entrée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">levée si <paramref name="source" /> ne contient pas d'élémentsousi AsOrdered est appelé au cours d'une requête.Elle peut être appelée immédiatement après <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> ou <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Active le traitement d'une source de données en considérant qu'elle est ordonnée, en substituant la valeur par défaut indiquant non ordonnée.AsOrdered peut uniquement être appelé sur les séquences génériques retournées par AsParallel, ParallelEnumerable.Range et ParallelEnumerable.Repeat.</summary>
      <returns>Séquence source qui conservera le classement d'origine dans les opérateurs de requête suivants.</returns>
      <param name="source">Séquence d'entrée.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Levée si <paramref name="source" /> ne contient pas d'élémentsousi <paramref name="source" /> n'en est pas AsParallel, ParallelEnumerable.Range ou ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Active la parallélisation d'une requête, selon le résultat du partitionneur personnalisé responsable du fractionnement de la séquence d'entrée en plusieurs partitions.</summary>
      <returns>
        <paramref name="source" /> de type ParallelQuery pour créer une liaison avec les méthodes d'extension ParallelEnumerable.</returns>
      <param name="source">Partitionneur de la séquence d'entrée.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Active la parallélisation d'une requête.</summary>
      <returns>Source de type <see cref="T:System.Linq.ParallelQuery`1" /> pour créer une liaison avec les méthodes d'extension ParallelEnumerable.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> à convertir en <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Active la parallélisation d'une requête.</summary>
      <returns>Source de type ParallelQuery pour créer une liaison avec les méthodes d'extension ParallelEnumerable.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> à convertir en <see cref="T:System.Linq.ParallelQuery" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Convertit un <see cref="T:System.Linq.ParallelQuery`1" /> en <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour forcer l'évaluation séquentielle de la requête.</summary>
      <returns>Source de type <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour créer une liaison avec les méthodes d'extension séquentielles.</returns>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> à convertir en <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Autorise une requête intermédiaire à être traitée comme si aucun classement n'était défini entre les éléments.</summary>
      <returns>Séquence source avec ordre arbitraire.</returns>
      <param name="source">Séquence d'entrée.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Retourne la moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence source.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">Séquence de valeurs qui sont utilisées pour calculer une moyenne. Moyenne de la séquence de valeurs. <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la séquence ou la somme de ces éléments est supérieur à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcule en parallèle la moyenne d'une séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Moyenne de la séquence de valeurs.</returns>
      <param name="source">Séquence de valeurs utilisées pour calculer une moyenne.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
      <exception cref="T:System.OverflowException">(Exception interne levée dans un <see cref="T:System.AggregateException" />).La fonction <paramref name="selector" /> retourne une valeur supérieure à MaxValue pour le type d'élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Convertit les éléments ParallelQuery vers le type spécifié.</summary>
      <returns>Séquence qui contient chaque élément de la séquence source convertie vers le type spécifié.</returns>
      <param name="source">Séquence qui contient les éléments à convertir.</param>
      <typeparam name="TResult">Type vers lequel convertir les éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidCastException">Le type de la séquence source n'a pas pu être converti en <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cette surcharge Concat ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatène deux séquences parallèles.</summary>
      <returns>Séquence qui contient les éléments concaténés des deux séquences d'entrée.</returns>
      <param name="first">Première séquence à concaténer.</param>
      <param name="second">Séquence à concaténer à la première séquence.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Détermine en parallèle si une séquence contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>True si la séquence source contient un élément de la valeur spécifiée ; sinon, False.</returns>
      <param name="source">Séquence dans laquelle localiser une valeur.</param>
      <param name="value">Valeur à localiser dans la séquence.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Détermine en parallèle si une séquence contient un élément spécifié à l'aide du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> indiqué.</summary>
      <returns>True si la séquence source contient un élément de la valeur spécifiée ; sinon, False.</returns>
      <param name="source">Séquence dans laquelle localiser une valeur.</param>
      <param name="value">Valeur à localiser dans la séquence.</param>
      <param name="comparer">Comparateur d'égalité à l'aide duquel comparer des valeurs.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne le nombre d'éléments d'une séquence parallèle.</summary>
      <returns>Nombre total d'éléments dans la séquence d'entrée.</returns>
      <param name="source">Séquence qui contient les éléments à compter.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la source est supérieur à <see cref="F:System.Int32.MaxValue" />.(Dans ce cas, l'InnerException est <see cref="T:System.OverflowException" />) - ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne un nombre qui représente le nombre d'éléments de la séquence parallèle spécifiée qui satisfont à une condition.</summary>
      <returns>Nombre qui représente les éléments de la séquence spécifiée qui satisfont à la condition dans la fonction de prédicat.</returns>
      <param name="source">Séquence qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la source est supérieur à <see cref="F:System.Int32.MaxValue" />.(Dans ce cas, l'InnerException est <see cref="T:System.OverflowException" />) - ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne les éléments de la séquence parallèle spécifiée ou la valeur par défaut du paramètre de type dans une collection de singletons, si la séquence est vide.</summary>
      <returns>Séquence qui contient la valeur par défaut (TSource) si <paramref name="source" /> est vide ; sinon, <paramref name="source" />.</returns>
      <param name="source">Séquence pour laquelle retourner une valeur par défaut si aucun élément n'y figure.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Retourne les éléments de la séquence parallèle spécifiée ou la valeur spécifiée dans une collection de singletons, si la séquence est vide.</summary>
      <returns>Séquence qui contient la valeur par défaut si <paramref name="source" /> est vide ; sinon, <paramref name="source" />.</returns>
      <param name="source">Séquence pour laquelle retourner la valeur spécifiée si aucun élément n'y figure.</param>
      <param name="defaultValue">Valeur à retourner si la séquence est vide.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne des éléments distincts d'une séquence parallèle à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</summary>
      <returns>Séquence qui contient des éléments distincts de la séquence source.</returns>
      <param name="source">Séquence de laquelle supprimer les éléments en double.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Retourne des éléments distincts d'une séquence parallèle et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié pour comparer les valeurs.</summary>
      <returns>Séquence qui contient des éléments distincts de la séquence source.</returns>
      <param name="source">Séquence de laquelle supprimer les éléments en double.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Retourne l'élément à une position d'index spécifiée dans une séquence parallèle.</summary>
      <returns>Élément situé à la position spécifiée dans la séquence source.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="index">Index de base zéro de l'élément à récupérer.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0 ou supérieur ou égal au nombre d'éléments contenus dans <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Retourne l'élément situé à une position d'index spécifiée dans une séquence parallèle ou une valeur par défaut, si l'index est hors limites.</summary>
      <returns>(TSource) par défaut si l'index est en dehors des limites de la séquence source ; sinon, élément situé à la position spécifiée dans la séquence source.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="index">Index de base zéro de l'élément à récupérer.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Retourne un ParallelQuery{TResult} vide qui possède l'argument de type spécifié.</summary>
      <returns>Séquence vide dont l'argument de type est <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Type à assigner au paramètre de type de la séquence générique retournée.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cette surcharge Except ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cette surcharge Except ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produit la différence définie entre deux séquences parallèles à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</summary>
      <returns>Séquence qui contient la différence entre les éléments de deux séquences.</returns>
      <param name="first">Séquence dont les éléments qui ne se trouvent pas également dans <paramref name="second" /> seront retournés.</param>
      <param name="second">Séquence dont les éléments qui figurent également dans la première séquence seront supprimés de la séquence retournée.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produit la différence définie entre deux séquences parallèles à l'aide du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié pour comparer les valeurs.</summary>
      <returns>Séquence qui contient la différence entre les éléments de deux séquences.</returns>
      <param name="first">Séquence dont les éléments qui ne se trouvent pas également dans <paramref name="second" /> seront retournés.</param>
      <param name="second">Séquence dont les éléments qui figurent également dans la première séquence seront supprimés de la séquence retournée. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne le premier élément d'une séquence parallèle.</summary>
      <returns>Premier élément de la séquence spécifiée.</returns>
      <param name="source">Séquence à partir de laquelle retourner le premier élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le premier élément d'une séquence parallèle qui satisfait à une condition spécifiée.</summary>
      <returns>Premier élément d'une séquence qui réussit le test dans la fonction de prédicat spécifiée.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément de <paramref name="source" /> ne remplit la condition définie dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne le premier élément d'une séquence parallèle ou une valeur par défaut, si la séquence ne contient aucun élément.</summary>
      <returns>Valeur par défaut (TSource) si <paramref name="source" /> est vide ; sinon, premier élément de <paramref name="source" />.</returns>
      <param name="source">Séquence à partir de laquelle retourner le premier élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le premier élément de la séquence parallèle qui satisfait à une condition ou une valeur par défaut, si aucun élément de ce type n'est trouvé.</summary>
      <returns>Valeur par défaut (TSource) si <paramref name="source" /> est vide ou si aucun élément ne réussit le test spécifié par le prédicat ; sinon, premier élément de <paramref name="source" /> qui réussit le test spécifié par le prédicat.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Appelle en parallèle l'action spécifiée pour chaque élément dans la <paramref name="source" />.</summary>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> dont les éléments seront traités par <paramref name="action" />.</param>
      <param name="action">Action à appeler sur chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée.</summary>
      <returns>Séquence de groupes triés par ordre décroissant en fonction de <paramref name="TKey" />.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée et compare les clés à l'aide du comparateur <see cref="T:System.Collections.Generic.IComparer`1" /> indiqué.</summary>
      <returns>Séquence de groupes triés par ordre décroissant en fonction de <paramref name="TKey" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de la clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée et projette les éléments de chaque groupe à l'aide d'une fonction indiquée.</summary>
      <returns>Séquence de groupes triés par ordre décroissant en fonction de <paramref name="TKey" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="elementSelector">Fonction permettant de mapper chaque élément source à un élément de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type des éléments dans <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon une fonction de sélection de clé.Les clés sont comparées à l'aide d'un comparateur et les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</summary>
      <returns>Séquence de groupes triés par ordre décroissant en fonction de <paramref name="TKey" />.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="elementSelector">Fonction permettant de mapper chaque élément source à un élément d'IGrouping.</param>
      <param name="comparer">IComparer{TSource} pour comparer des clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type des éléments d'IGrouping.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.Les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</summary>
      <returns>Séquence d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</returns>
      <param name="source">Séquence dont regrouper les éléments.</param>
      <param name="keySelector">Fonction permettant d'extraire la clé de chaque élément.</param>
      <param name="elementSelector">Fonction permettant de mapper chaque élément source à un élément d'IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type des éléments dans chaque IGrouping {TKey, TElement}.</typeparam>
      <typeparam name="TResult">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.Les valeurs de clé sont comparées à l'aide du comparateur spécifié et les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</summary>
      <returns>Séquence d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</returns>
      <param name="source">Séquence dont regrouper les éléments.</param>
      <param name="keySelector">Fonction permettant d'extraire la clé de chaque élément.</param>
      <param name="elementSelector">Fonction permettant de mapper chaque élément source à un élément d'IGrouping{Key, TElement}.</param>
      <param name="resultSelector">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type des éléments dans chaque IGrouping {TKey, TElement}.</typeparam>
      <typeparam name="TResult">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</summary>
      <returns>Séquence d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</returns>
      <param name="source">Séquence dont regrouper les éléments.</param>
      <param name="keySelector">Fonction permettant d'extraire la clé de chaque élément.</param>
      <param name="resultSelector">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Regroupe en parallèle les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.Les clés sont comparées à l'aide d'un comparateur spécifié.</summary>
      <returns>Une séquence de groupes.</returns>
      <param name="source">Séquence dont regrouper les éléments.</param>
      <param name="keySelector">Fonction permettant d'extraire la clé de chaque élément.</param>
      <param name="resultSelector">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Cette surcharge GroupJoin ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Ce paramètre n'est pas utilisé.</param>
      <param name="inner">Ce paramètre n'est pas utilisé.</param>
      <param name="outerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="innerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="resultSelector">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TOuter">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TInner">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TKey">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TResult">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Cette surcharge GroupJoin ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Ce paramètre n'est pas utilisé.</param>
      <param name="inner">Ce paramètre n'est pas utilisé.</param>
      <param name="outerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="innerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="resultSelector">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TOuter">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TInner">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TKey">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TResult">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Met en corrélation en parallèle les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</summary>
      <returns>Séquence qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure groupée de deux séquences.</returns>
      <param name="outer">Première séquence à joindre.</param>
      <param name="inner">Séquence à joindre à la première séquence.</param>
      <param name="outerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</param>
      <param name="innerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir d'un élément de la première séquence, ainsi qu'une collection d'éléments correspondants à partir de la deuxième séquence.</param>
      <typeparam name="TOuter">Type des éléments de la deuxième séquence.</typeparam>
      <typeparam name="TInner">Type des éléments de la première séquence.</typeparam>
      <typeparam name="TKey">Type des clés retournées par les fonctions de sélecteur de clé.</typeparam>
      <typeparam name="TResult">Type des éléments de résultat.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Met en corrélation en parallèle les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.Un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié est utilisé pour comparer les clés.</summary>
      <returns>Séquence qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure groupée de deux séquences.</returns>
      <param name="outer">Première séquence à joindre.</param>
      <param name="inner">Séquence à joindre à la première séquence.</param>
      <param name="outerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</param>
      <param name="innerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir d'un élément de la première séquence, ainsi qu'une collection d'éléments correspondants à partir de la deuxième séquence.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour hacher et comparer les clés.</param>
      <typeparam name="TOuter">Type des éléments de la deuxième séquence.</typeparam>
      <typeparam name="TInner">Type des éléments de la première séquence.</typeparam>
      <typeparam name="TKey">Type des clés retournées par les fonctions de sélecteur de clé.</typeparam>
      <typeparam name="TResult">Type des éléments de résultat.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cette surcharge Intersect ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cette surcharge Intersect ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produit l'intersection définie de deux séquences parallèles à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</summary>
      <returns>Séquence qui contient les éléments constituant l'intersection de les deux séquences.</returns>
      <param name="first">Séquence dont les éléments distincts qui apparaissent également dans <paramref name="second" /> seront retournés.</param>
      <param name="second">Séquence dont les éléments distincts qui apparaissent également dans la première séquence seront retournés.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produit l'intersection définie de deux séquences parallèles à l'aide de l'IEqualityComparer{T} spécifié pour comparer les valeurs.</summary>
      <returns>Séquence qui contient les éléments constituant l'intersection de les deux séquences.</returns>
      <param name="first">Séquence dont les éléments distincts qui apparaissent également dans <paramref name="second" /> seront retournés.</param>
      <param name="second">Séquence dont les éléments distincts qui apparaissent également dans la première séquence seront retournés.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Cette surcharge Join ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Ce paramètre n'est pas utilisé.</param>
      <param name="inner">Ce paramètre n'est pas utilisé.</param>
      <param name="outerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="innerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="resultSelector">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TOuter">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TInner">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TKey">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TResult">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Cette surcharge Join ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Ce paramètre n'est pas utilisé.</param>
      <param name="inner">Ce paramètre n'est pas utilisé.</param>
      <param name="outerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="innerKeySelector">Ce paramètre n'est pas utilisé.</param>
      <param name="resultSelector">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TOuter">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TInner">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TKey">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TResult">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Met en corrélation en parallèle les éléments de deux séquences selon des clés correspondantes.Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</summary>
      <returns>Séquence qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure interne de deux séquences.</returns>
      <param name="outer">Première séquence à joindre.</param>
      <param name="inner">Séquence à joindre à la première séquence.</param>
      <param name="outerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</param>
      <param name="innerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</param>
      <typeparam name="TOuter">Type des éléments de la deuxième séquence.</typeparam>
      <typeparam name="TInner">Type des éléments de la première séquence.</typeparam>
      <typeparam name="TKey">Type des clés retournées par les fonctions de sélecteur de clé.</typeparam>
      <typeparam name="TResult">Type des éléments de résultat.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Met en corrélation en parallèle les éléments de deux séquences selon des clés correspondantes.Un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié est utilisé pour comparer les clés.</summary>
      <returns>Séquence qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure interne de deux séquences.</returns>
      <param name="outer">Première séquence à joindre.</param>
      <param name="inner">Séquence à joindre à la première séquence.</param>
      <param name="outerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</param>
      <param name="innerKeySelector">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour hacher et comparer les clés.</param>
      <typeparam name="TOuter">Type des éléments de la deuxième séquence.</typeparam>
      <typeparam name="TInner">Type des éléments de la première séquence.</typeparam>
      <typeparam name="TKey">Type des clés retournées par les fonctions de sélecteur de clé.</typeparam>
      <typeparam name="TResult">Type des éléments de résultat.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="action" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne le dernier élément d'une séquence parallèle.</summary>
      <returns>Valeur à la dernière position de la séquence source.</returns>
      <param name="source">Séquence à partir de laquelle retourner le dernier élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le dernier élément d'une séquence parallèle qui satisfait à une condition spécifiée.</summary>
      <returns>Dernier élément de la séquence qui réussit le test dans la fonction de prédicat spécifiée.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément de <paramref name="source" /> ne remplit la condition définie dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne le dernier élément d'une séquence parallèle ou une valeur par défaut, si la séquence ne contient aucun élément.</summary>
      <returns>() par défaut si la séquence source est vide ; sinon, dernier élément de la séquence.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le dernier élément d'une séquence parallèle qui satisfait à une condition ou une valeur par défaut, si aucun élément de ce type n'est trouvé.</summary>
      <returns>() par défaut si la séquence est vide ou si aucun élément ne réussit le test dans la fonction de prédicat ; sinon, dernier élément qui réussit le test dans cette fonction.</returns>
      <param name="source">Séquence à partir de laquelle retourner un élément.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne un Int64 qui représente le nombre total d'éléments dans une séquence parallèle.</summary>
      <returns>Nombre total d'éléments dans la séquence d'entrée.</returns>
      <param name="source">Séquence qui contient les éléments à compter.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la source est supérieur à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.OverflowException">Le résultat calculé est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne un Int64 qui représente le nombre total d'éléments dans une séquence parallèle qui satisfont à une condition.</summary>
      <returns>Nombre qui représente les éléments de la séquence spécifiée qui satisfont à la condition dans la fonction de prédicat.</returns>
      <param name="source">Séquence qui contient les éléments à compter.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Le nombre d'éléments de la source est supérieur à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.OverflowException">Le résultat calculé est supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne la valeur maximale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <typeparam name="TSource">Type des éléments de la séquence source.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur maximale.</summary>
      <returns>Valeur maximale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur maximale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne la valeur minimale dans une séquence parallèle de valeurs.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient aucun élément.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Appelle en parallèle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur minimale.</summary>
      <returns>Valeur minimale dans la séquence.</returns>
      <param name="source">Séquence de valeurs pour laquelle déterminer la valeur minimale.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type de la valeur retournée par <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> ne contient pas d'éléments et <paramref name="TSource" /> est un type valeur non Nullable.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filtre les éléments d'un ParallelQuery en fonction d'un type spécifié.</summary>
      <returns>Séquence qui contient des éléments de la séquence d'entrée de type.</returns>
      <param name="source">Séquence dont les éléments doivent être filtrés.</param>
      <typeparam name="TResult">Type en fonction duquel filtrer les éléments de la séquence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Trie en parallèle les éléments d'une séquence dans l'ordre croissant selon une clé.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés selon une clé.</returns>
      <param name="source">Séquence de valeurs à classer.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Trie en parallèle les éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés selon une clé.</returns>
      <param name="source">Séquence de valeurs à classer.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="comparer">IComparer{TKey} qui permet de comparer des clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Trie en parallèle les éléments d'une séquence dans l'ordre décroissant selon une clé.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés dans l'ordre décroissant selon une clé.</returns>
      <param name="source">Séquence de valeurs à classer.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Trie les éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés dans l'ordre décroissant selon une clé.</returns>
      <param name="source">Séquence de valeurs à classer.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="comparer">IComparer{TKey} qui permet de comparer des clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="KeySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Génère une séquence parallèle de nombres entiers dans une plage spécifiée.</summary>
      <returns>IEnumerable&lt;Int32&gt; en C# ou IEnumerable(Of Int32) en Visual Basic qui contient une plage de nombres entiers séquentiels.</returns>
      <param name="start">Valeur du premier entier de la séquence.</param>
      <param name="count">Nombre d'entiers séquentiels à générer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> est inférieur à 0 - ou - <paramref name="start" /> + <paramref name="count" /> - 1 est supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Génère une séquence parallèle qui contient une valeur répétée.</summary>
      <returns>Séquence qui contient une valeur répétée.</returns>
      <param name="element">Valeur à répéter.</param>
      <param name="count">Nombre de fois que la valeur doit être répétée dans la séquence générée.</param>
      <typeparam name="TResult">Type de la valeur à répéter dans la séquence de résultat.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Inverse l'ordre des éléments dans une séquence parallèle.</summary>
      <returns>Séquence dont les éléments correspondent à ceux de la séquence d'entrée dans l'ordre inverse.</returns>
      <param name="source">Séquence de valeurs à inverser.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Projette en parallèle chaque élément d'une séquence dans un nouveau formulaire.</summary>
      <returns>Séquence dont les éléments résultent d'un appel de la fonction de transformation sur chaque élément de <paramref name="source" />.</returns>
      <param name="source">Séquence de valeurs pour laquelle appeler une fonction de transformation.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments retournés par le sélecteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projette en parallèle chaque élément d'une séquence dans un nouveau formulaire en incorporant l'index de l'élément.</summary>
      <returns>Une séquence dont les éléments résultent de l'appel de la fonction de transformation sur chaque élément de <paramref name="source" />, sur la base de l'index fourni à <paramref name="selector" />.</returns>
      <param name="source">Séquence de valeurs pour laquelle appeler une fonction de transformation.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments retournés par le sélecteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.Cette condition peut se produire pour transmettre en continu des scénarios.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence et appelle une fonction de sélection de résultat sur chaque élément inclus.</summary>
      <returns>Séquence dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs <paramref name="collectionSelector" /> sur chaque élément de <paramref name="source" /> selon l'index fourni à <paramref name="collectionSelector" />, et qui mappe ensuite chaque élément de la séquence et l'élément source correspondant à un élément de résultat. </returns>
      <param name="source">Séquence de valeurs à projeter.</param>
      <param name="collectionSelector">Fonction de transformation à appliquer à chaque élément source ; le deuxième paramètre de la fonction représente l'index de l'élément source.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir d'un élément de la première séquence, ainsi qu'une collection d'éléments correspondants à partir de la deuxième séquence.</param>
      <typeparam name="TSource">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments de la séquence résultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projette en parallèle chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" /> et aplatit les séquences résultantes en une seule séquence.</summary>
      <returns>Séquence dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs sur chaque élément de la séquence d'entrée.</returns>
      <param name="source">Séquence de valeurs à projeter.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments de la séquence retournée par le sélecteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence et appelle une fonction de sélection de résultat sur chaque élément inclus.L'index de chaque élément source est utilisé dans le formulaire intermédiaire projeté de l'élément.</summary>
      <returns>Séquence dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs <paramref name="collectionSelector" /> sur chaque élément de <paramref name="source" /> selon l'index fourni à <paramref name="collectionSelector" />, et qui mappe ensuite chaque élément de la séquence et l'élément source correspondant à un élément de résultat.</returns>
      <param name="source">Séquence de valeurs à projeter.</param>
      <param name="collectionSelector">Fonction de transformation à appliquer à chaque élément source ; le deuxième paramètre de la fonction représente l'index de l'élément source.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir d'un élément de la première séquence, ainsi qu'une collection d'éléments correspondants à partir de la deuxième séquence.</param>
      <typeparam name="TSource">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments à retourner.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projette en parallèle chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" /> et aplatit les séquences résultantes en une seule séquence.L'index de chaque élément source est utilisé dans le formulaire projeté de l'élément.</summary>
      <returns>Séquence dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs sur chaque élément de la séquence d'entrée.</returns>
      <param name="source">Séquence de valeurs à projeter.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Type des éléments de la séquence retournée par le sélecteur.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cette surcharge SequenceEqual ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Levé chaque fois que cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cette surcharge SequenceEqual ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Levé chaque fois que cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Détermine si deux séquences parallèles sont égales par une comparaison des types d'élément réalisée à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>True si les deux séquences source sont de même longueur et que les types de leurs éléments correspondants sont égaux selon le comparateur d'égalité par défaut ; sinon, False.</returns>
      <param name="first">Séquence à comparer à une autre.</param>
      <param name="second">Séquence à comparer à la première séquence d'entrée.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Détermine si deux séquences parallèles sont égales par une comparaison des élément réalisée à l'aide d'un IEqualityComparer{T} spécifié.</summary>
      <returns>True si les deux séquences source sont de même longueur et que les types de leurs éléments correspondants sont égaux selon le comparateur d'égalité par défaut ; sinon, False.</returns>
      <param name="first">Séquence à comparer à <paramref name="second" />.</param>
      <param name="second">Séquence à comparer à la première séquence d'entrée.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pour comparer les éléments.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne l'élément unique d'une séquence parallèle ou lève une exception, si cette séquence ne contient pas exactement un élément.</summary>
      <returns>Seul élément de la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle retourner le seul élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">La séquence d'entrée contient plusieurs éléments.- ou - La séquence d'entrée est vide.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne le seul élément d'une séquence parallèle qui satisfait à une condition spécifiée ou lève une exception, si cette séquence contient plusieurs éléments de ce type.</summary>
      <returns>Seul élément de la séquence d'entrée à satisfaire à une condition.</returns>
      <param name="source">Séquence à partir de laquelle retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">Aucun élément ne satisfait à la condition dans <paramref name="predicate" />.- ou - Plusieurs éléments remplissent la condition définie dans <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Retourne l'élément unique d'une séquence parallèle ou une valeur par défaut, si la séquence est vide. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</summary>
      <returns>Élément unique de la séquence d'entrée ou () par défaut, si la séquence ne contient aucun élément.</returns>
      <param name="source">Séquence à partir de laquelle retourner le seul élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne l'élément unique d'une séquence parallèle qui satisfait à une condition spécifiée ou une valeur par défaut, si cette séquence ne contient aucun élément de ce type. Cette méthode lève une exception si cette séquence contient plusieurs éléments qui satisfont à cette condition.</summary>
      <returns>Élément unique de la séquence d'entrée qui satisfait à la condition ou () par défaut, si aucun élément de ce type n'est trouvé.</returns>
      <param name="source">Séquence à partir de laquelle retourner le seul élément.</param>
      <param name="predicate">Fonction permettant de tester un élément pour une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> est vide ou plusieurs éléments sont retournés.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Ignore un nombre spécifié d'éléments dans une séquence parallèle, puis retourne les éléments restants.</summary>
      <returns>Séquence qui contient les éléments se trouvant après l'index spécifié dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="count">Nombre d'éléments à ignorer avant de retourner les éléments restants.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Le nombre est supérieur à <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Ignore des éléments dans une séquence parallèle tant que la condition spécifiée a la valeur True, puis retourne les éléments restants.</summary>
      <returns>Séquence qui contient les éléments de la séquence d'entrée, à partir du premier élément de la série linéaire à ne pas réussir le test spécifié par le prédicat.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Ignore des éléments dans une séquence parallèle tant que la condition spécifiée a la valeur True, puis retourne les éléments restants.L'index de l'élément est utilisé dans la logique de la fonction de prédicat.</summary>
      <returns>Séquence qui contient les éléments de la séquence d'entrée, à partir du premier élément de la série linéaire à ne pas réussir le test spécifié par le prédicat.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="predicate">Fonction permettant de tester chaque élément source pour une condition ; le deuxième paramètre de la fonction représente l'index de l'élément source. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Double.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Double.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Single.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcule en parallèle la somme d'une séquence de valeurs.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Single.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Double.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de la séquence source.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Double.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Single.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcule en parallèle la somme de la séquence de valeurs obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</summary>
      <returns>Somme des valeurs projetées de la séquence.</returns>
      <param name="source">Séquence de valeurs dont la somme doit être calculée.</param>
      <param name="selector">Fonction de transformation à appliquer à chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La somme est supérieure à <see cref="F:System.Single.MaxValue" />.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Retourne un nombre spécifié d'éléments contigus à partir du début d'une séquence parallèle.</summary>
      <returns>Séquence qui contient le nombre spécifié d'éléments à partir du début de la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="count">Nombre d'éléments à retourner.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Retourne des éléments d'une séquence parallèle tant que la condition spécifiée a la valeur True.</summary>
      <returns>Séquence qui contient les éléments de la séquence d'entrée se trouvant avant l'élément à partir duquel le test n'est plus réussi.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Retourne des éléments d'une séquence parallèle tant que la condition spécifiée a la valeur True.L'index de l'élément est utilisé dans la logique de la fonction de prédicat.</summary>
      <returns>Séquence qui contient les éléments de la séquence d'entrée se trouvant avant l'élément à partir duquel le test n'est plus réussi.</returns>
      <param name="source">Séquence à partir de laquelle retourner les éléments.</param>
      <param name="predicate">Fonction permettant de tester chaque élément source pour une condition ; le deuxième paramètre de la fonction représente l'index de l'élément source. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par cette requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Réalise en parallèle un classement des éléments d'une séquence dans l'ordre croissant selon une clé.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés selon une clé.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Réalise en parallèle un classement des éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</summary>
      <returns>OrderedParallelQuery{TSource} dont les éléments sont triés selon une clé.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="comparer">IComparer{TKey} qui permet de comparer des clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Réalise en parallèle un classement des éléments d'une séquence dans l'ordre décroissant selon une clé.</summary>
      <returns>Séquence dont les éléments sont triés par ordre décroissant en fonction d'une clé.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Réalise en parallèle un classement des éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</summary>
      <returns>Séquence dont les éléments sont triés par ordre décroissant en fonction d'une clé.</returns>
      <param name="source">OrderedParallelQuery{TSource} qui contient les éléments à trier.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé d'un élément.</param>
      <param name="comparer">IComparer{TKey} qui permet de comparer des clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Crée un tableau à partir de <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Tableau qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un tableau.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des clés et des valeurs.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produit une clé qui est une référence Null (Rien en Visual Basic).- ou - <paramref name="keySelector" /> produit des clés en double pour deux éléments.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée une <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée et un comparateur de clé.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des clés et des valeurs.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produit une clé qui est une référence Null (Rien en Visual Basic).- ou - <paramref name="keySelector" /> produit des clés en double pour deux éléments.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon des fonctions de sélection de clé et de sélection d'élément spécifiées.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produit une clé qui est une référence Null (Rien en Visual Basic).- ou - <paramref name="keySelector" /> produit des clés en double pour deux éléments.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée, un comparateur et une fonction de sélection d'élément.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produit une clé qui est une référence Null (Rien en Visual Basic).- ou - <paramref name="keySelector" /> produit des clés en double pour deux éléments.- ou - Une ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crée un <see cref="T:System.Linq.ILookup`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> qui contient des clés et des valeurs.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée un <see cref="T:System.Linq.ILookup`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée et un comparateur de clé.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> qui contient des clés et des valeurs.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crée un <see cref="T:System.Linq.ILookup`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon des fonctions de sélection de clé et de sélection d'élément spécifiées.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément. </param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crée une <see cref="T:System.Linq.ILookup`2" /> à partir de <see cref="T:System.Linq.ParallelQuery`1" /> selon une fonction de sélection de clé spécifiée, un comparateur et une fonction de sélection d'élément.</summary>
      <returns>Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) qui contient des valeurs de type TElement sélectionnées dans la séquence d'entrée.</returns>
      <param name="source">Séquence à partir de laquelle créer un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Fonction permettant d'extraire une clé de chaque élément.</param>
      <param name="elementSelector">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Type de clé retournée par <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Type de la valeur retournée par <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cette surcharge Union ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cette surcharge Union ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <param name="comparer">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TSource">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produit l'union définie de deux séquences parallèles à l'aide du comparateur d'égalité par défaut.</summary>
      <returns>Séquence qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</returns>
      <param name="first">Séquence dont les éléments distincts constituent le premier jeu de l'union.</param>
      <param name="second">Séquence dont les éléments distincts constituent le deuxième jeu de l'union.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produit l'union définie de deux séquences parallèles à l'aide d'un IEqualityComparer{T} spécifié.</summary>
      <returns>Séquence qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</returns>
      <param name="first">Séquence dont les éléments distincts constituent le premier jeu de l'union.</param>
      <param name="second">Séquence dont les éléments distincts constituent le deuxième jeu de l'union.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</param>
      <typeparam name="TSource">Type des éléments des séquences d'entrée.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filtre en parallèle une séquence de valeurs selon un prédicat.</summary>
      <returns>Séquence qui contient des éléments de la séquence d'entrée qui satisfont à la condition.</returns>
      <param name="source">Séquence à filtrer.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de la source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtre en parallèle une séquence de valeurs selon un prédicat.L'index de chaque élément est utilisé dans la logique de la fonction de prédicat.</summary>
      <returns>Séquence qui contient des éléments de la séquence d'entrée qui satisfont à la condition.</returns>
      <param name="source">Séquence à filtrer.</param>
      <param name="predicate">Fonction permettant de tester chaque élément par rapport à une condition.</param>
      <typeparam name="TSource">Type des éléments de la source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Plus de <see cref="F:System.Int32.MaxValue" /> éléments sont énumérés par la requête.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Définit le <see cref="T:System.Threading.CancellationToken" /> à associer à la requête.</summary>
      <returns>ParallelQuery représentant la même requête que la source, mais avec le jeton d'annulation inscrit.</returns>
      <param name="source">ParallelQuery sur lequel définir l'option.</param>
      <param name="cancellationToken">Jeton d'annulation.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Threading.CancellationTokenSource" /> associé au <paramref name="cancellationToken" /> a été supprimé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> est utilisé plusieurs fois dans la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Définit le degré de parallélisme à utiliser dans une requête.Le degré de parallélisme est le nombre maximal de tâches simultanément exécutées qui seront utilisées pour traiter la requête.</summary>
      <returns>ParallelQuery représentant la même requête que la source, mais limitée par les degrés de parallélisme définis.</returns>
      <param name="source">ParallelQuery sur lequel définir la limite sur les degrés de parallélisme.</param>
      <param name="degreeOfParallelism">Degré de parallélisme pour la requête.La valeur par défaut est Math.Min (<see cref="P:System.Environment.ProcessorCount" />, MAX_SUPPORTED_DOP) où MAX_SUPPORTED_DOP est 512.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> est inférieur à 1 ou supérieur à 511. </exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism est utilisé plusieurs fois dans la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Définit le mode d'exécution de la requête.</summary>
      <returns>ParallelQuery représentant la même requête que la source, mais avec le jeton d'exécution inscrit.</returns>
      <param name="source">ParallelQuery sur lequel définir l'option.</param>
      <param name="executionMode">Mode d'exécution de la requête.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> n'est pas une valeur <see cref="T:System.Linq.ParallelExecutionMode" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode est utilisé plusieurs fois dans la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Définit les options de fusion pour cette requête, qui spécifient comment la requête mettra la sortie en mémoire tampon.</summary>
      <returns>ParallelQuery représentant la même requête que la source, mais avec le jeton de fusion inscrit.</returns>
      <param name="source">ParallelQuery sur lequel définir l'option.</param>
      <param name="mergeOptions">Options de fusion à définir pour cette requête.</param>
      <typeparam name="TSource">Type des éléments de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> n'est pas une valeur <see cref="T:System.Linq.ParallelMergeOptions" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> est utilisé plusieurs fois dans la requête.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Cette surcharge Zip ne doit jamais être appelée.Cette méthode est marquée comme obsolète et lève toujours <see cref="T:System.NotSupportedException" /> lorsqu'elle est appelée.</summary>
      <returns>Cette surcharge lève toujours <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Ce paramètre n'est pas utilisé.</param>
      <param name="second">Ce paramètre n'est pas utilisé.</param>
      <param name="resultSelector">Ce paramètre n'est pas utilisé.</param>
      <typeparam name="TFirst">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TSecond">Ce paramètre de type n'est pas utilisé.</typeparam>
      <typeparam name="TResult">Ce paramètre de type n'est pas utilisé.</typeparam>
      <exception cref="T:System.NotSupportedException">Exception qui se produit lorsque cette méthode est appelée.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Fusionne en parallèle deux séquences à l'aide de la fonction de prédicat spécifiée.</summary>
      <returns>Séquence qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une association par couple <paramref name="resultSelector" /> de deux séquences.Si les longueurs de séquence sont inégales, cette opération tronque la longueur de la séquence la plus courte.</returns>
      <param name="first">Première séquence à zipper.</param>
      <param name="second">Deuxième séquence à zipper.</param>
      <param name="resultSelector">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</param>
      <typeparam name="TFirst">Type des éléments de la première séquence.</typeparam>
      <typeparam name="TSecond">Type des éléments de la deuxième séquence.</typeparam>
      <typeparam name="TResult">Type des éléments à retourner.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> ou <paramref name="resultSelector" /> est une référence null (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La requête a été annulée avec le jeton passé à l'aide de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Un ou plusieurs exceptions se sont produites pendant l'évaluation de la requête.</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>Le mode d'exécution de la requête est un conseil qui spécifie comment le système doit gérer des échanges de performance lorsque les requêtes sont parallélisées.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>Il s'agit de l'option par défaut.PLINQ examine la structure de la requête et parallélise la requête uniquement si cela est susceptible de provoquer une accélération de l'exécution.Si la structure de la requête indique qu'aucune accélération de l'exécution ne sera probablement obtenue, PLINQ exécute la requête comme une requête LINQ to Objects ordinaire.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallélisez la requête entière, même si cela implique l'utilisation d'algorithmes avec surcharge élevée.Utilisez cet indicateur lorsque vous savez que l'exécution parallèle de la requête se traduira par une exécution plus rapide, mais que PLINQ en mode par défaut l'exécuterait sous forme séquentielle.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Spécifie le type préféré de fusion de sortie à utiliser dans une requête.En d'autres termes, indique comment PLINQ doit fusionner les résultats des différentes partitions en une séquence de résultat unique.Il s'agit uniquement d'un conseil que le système ne peut pas respecter lorsque toutes les requêtes sont parallélisées.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Utilisez une fusion avec mémoires tampons de sortie d'une taille choisie par le système.Les résultats s'accumuleront dans une mémoire tampon de sortie avant de devenir accessibles par le consommateur de la requête.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Utilisez AutoBuffered, le type de fusion par défaut.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Utilisez une fusion avec les mémoires tampons de sortie à pleine charge.Le système accumulera tous les résultats avant qu'ils ne deviennent accessibles par le consommateur de la requête.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Utilisez une fusion sans mémoire tampon de sortie.Dès que les éléments de résultat ont été calculés, rendez cet élément accessible par le consommateur de la requête.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Représente une séquence parallèle.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la séquence.</summary>
      <returns>Énumérateur qui itère au sein de la séquence.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Représente une séquence parallèle.</summary>
      <typeparam name="TSource">Type d'élément de la séquence source.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein de la séquence.</summary>
      <returns>Énumérateur qui itère au sein de la séquence.</returns>
    </member>
  </members>
</doc>