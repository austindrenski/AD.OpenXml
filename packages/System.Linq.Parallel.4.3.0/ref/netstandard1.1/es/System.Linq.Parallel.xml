<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Representa una secuencia paralela ordenada.</summary>
      <typeparam name="TSource">Tipo de elementos de la colección de origen.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Devuelve un enumerador que itera por la secuencia.</summary>
      <returns>Enumerador que itera por la secuencia.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Proporciona un conjunto de métodos para consultar objetos que implementan ParallelQuery{TSource}.Es el equivalente paralelo de <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Aplica en paralelo una función de acumulador a una secuencia.Esta sobrecarga no está disponible en la implementación secuencial.</summary>
      <returns>El valor final del acumulador transformado.</returns>
      <param name="source">Secuencia a la que se va a agregar.</param>
      <param name="seedFactory">Función que devuelve el valor inicial del acumulador. </param>
      <param name="updateAccumulatorFunc">Función de acumulador que se va a invocar en cada elemento de una partición. </param>
      <param name="combineAccumulatorsFunc">Función de acumulador que se va a invocar en el resultado de acumulador obtenido de cada partición.</param>
      <param name="resultSelector">Función que va a transformar el valor final del acumulador en el valor del resultado. </param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valor del acumulador.</typeparam>
      <typeparam name="TResult">Tipo del valor resultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="seedFactory" /> o <paramref name="updateAccumulatorFunc" /> o <paramref name="combineAccumulatorsFunc" /> o <paramref name="resultSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Aplica en paralelo una función de acumulador a una secuencia.</summary>
      <returns>Valor final del acumulador.</returns>
      <param name="source">Secuencia a la que se va a agregar.</param>
      <param name="func">Función de acumulador que se va a invocar en cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Aplica en paralelo una función de acumulador a una secuencia.El valor de inicialización especificado se utiliza como valor de inicio del acumulador.</summary>
      <returns>Valor final del acumulador.</returns>
      <param name="source">Secuencia a la que se va a agregar.</param>
      <param name="seed">Valor de inicio del acumulador.</param>
      <param name="func">Función de acumulador que se va a invocar en cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valor del acumulador.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Aplica en paralelo una función de acumulador a una secuencia.El valor de inicialización especificado se utiliza como valor inicial del acumulador y la función especificada se utiliza para seleccionar el valor resultante.</summary>
      <returns>El valor final del acumulador transformado.</returns>
      <param name="source">Secuencia a la que se va a agregar.</param>
      <param name="seed">Valor de inicio del acumulador.</param>
      <param name="func">Función de acumulador que se va a invocar en cada elemento.</param>
      <param name="resultSelector">Función que va a transformar el valor final del acumulador en el valor del resultado.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valor del acumulador.</typeparam>
      <typeparam name="TResult">Tipo del valor resultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="resultSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Aplica en paralelo una función de acumulador a una secuencia.Esta sobrecarga no está disponible en la implementación secuencial.</summary>
      <returns>El valor final del acumulador transformado.</returns>
      <param name="source">Secuencia a la que se va a agregar.</param>
      <param name="seed">Valor de inicio del acumulador.</param>
      <param name="updateAccumulatorFunc">Función de acumulador que se va a invocar en cada elemento de una partición. </param>
      <param name="combineAccumulatorsFunc">Función de acumulador que se va a invocar en el resultado de acumulador obtenido de cada partición. </param>
      <param name="resultSelector">Función que va a transformar el valor final del acumulador en el valor del resultado. </param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Tipo del valor del acumulador.</typeparam>
      <typeparam name="TResult">Tipo del valor resultante.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="updateAccumulatorFunc" /> o <paramref name="combineAccumulatorsFunc" /> o <paramref name="resultSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determina en paralelo si todos los elementos de una secuencia satisfacen una condición.</summary>
      <returns>Es true si todos los elementos de la secuencia de origen pasan la prueba del predicado especificado o si la secuencia está vacía; de lo contrario, es false.</returns>
      <param name="source">Secuencia a cuyos elementos se va a aplicar el predicado.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Determina si una secuencia paralela contiene elementos.</summary>
      <returns>Es true si la secuencia de salida contiene elementos; de lo contrario, es false.</returns>
      <param name="source">Secuencia que se va a comprobar para ver si está vacía.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determina en paralelo si un elemento de una secuencia satisface una condición.</summary>
      <returns>Es true si algún elemento de la secuencia de salida pasa la prueba en el predicado especificado; de lo contrario, es false.</returns>
      <param name="source">Secuencia a cuyos elementos se va a aplicar el predicado.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Convierte <see cref="T:System.Linq.ParallelQuery`1" /> en <see cref="T:System.Collections.Generic.IEnumerable`1" /> para forzar la evaluación secuencial de la consulta.</summary>
      <returns>Secuencia de entrada tipada como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Secuencia que se va a convertir como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Habilita el tratamiento de un origen de datos como si estuviera ordenado, con lo que se invalida el valor predeterminado de no ordenado.AsOrdered solo se puede invocar en secuencias no genéricas devueltas por AsParallel, ParallelEnumerable.Range y ParallelEnumerable.Repeat.</summary>
      <returns>Secuencia de origen que mantendrá la ordenación original en los operadores de consulta subsiguientes.</returns>
      <param name="source">Secuencia de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">se produce si <paramref name="source" /> no contiene ningún elementoo biense produce si se llama a AsOrdered durante una consulta.Se puede llamar inmediatamente después de <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> o <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Habilita el tratamiento de un origen de datos como si estuviera ordenado, con lo que se invalida el valor predeterminado de no ordenado.AsOrdered solo se puede invocar en secuencias genéricas devueltas por AsParallel, ParallelEnumerable.Range y ParallelEnumerable.Repeat.</summary>
      <returns>Secuencia de origen que mantendrá la ordenación original en los operadores de consulta subsiguientes.</returns>
      <param name="source">Secuencia de entrada.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si <paramref name="source" /> no contiene ningún elementoo biensi <paramref name="source" /> no es de AsParallel, ParallelEnumerable.Range o ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Habilita la paralelización de una consulta, tal como la obtiene de un particionador personalizado responsable de dividir la secuencia de entrada en particiones.</summary>
      <returns>
        <paramref name="source" /> como ParallelQuery para enlazar a los métodos de extensión ParallelEnumerable.</returns>
      <param name="source">Particionador de la secuencia de entrada.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Habilita la paralelización de una consulta.</summary>
      <returns>Origen como <see cref="T:System.Linq.ParallelQuery`1" /> para enlazar a los métodos de extensión ParallelEnumerable.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a convertir en <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Habilita la paralelización de una consulta.</summary>
      <returns>Origen como ParallelQuery para enlazar a los métodos de extensión ParallelEnumerable.</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> que se va a convertir en <see cref="T:System.Linq.ParallelQuery" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Convierte <see cref="T:System.Linq.ParallelQuery`1" /> en <see cref="T:System.Collections.Generic.IEnumerable`1" /> para forzar la evaluación secuencial de la consulta.</summary>
      <returns>Origen como <see cref="T:System.Collections.Generic.IEnumerable`1" /> para enlazar a los métodos de extensión secuenciales.</returns>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> que se va a convertir en <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Permite tratar una consulta intermedia como si no hubiera ningún orden implícito entre los elementos.</summary>
      <returns>Secuencia de salida con orden arbitrario.</returns>
      <param name="source">Secuencia de entrada.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>Devuelve el promedio de una secuencia de valores.</returns>
      <param name="source">Secuencia de salida.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">Una secuencia de valores que se utilizan para calcular una media. La media de la secuencia de valores. <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma o cuenta de los elementos de la secuencia es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcula en paralelo el promedio de una secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>El promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
      <exception cref="T:System.OverflowException">(Se produce como excepción interna en una <see cref="T:System.AggregateException" />).La función <paramref name="selector" /> devuelve un valor mayor que MaxValue para el tipo de elemento.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Convierte los elementos de ParallelQuery en el tipo especificado.</summary>
      <returns>Secuencia que contiene cada elemento de la secuencia de salida convertido en el tipo especificado.</returns>
      <param name="source">Secuencia que contiene los elementos que se van a convertir.</param>
      <typeparam name="TResult">Tipo al que se convierten los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidCastException">El tipo de la secuencia de origen no puede convertirse automáticamente en <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Concat.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatena dos secuencias paralelas.</summary>
      <returns>Secuencia que contiene los elementos concatenados de las dos secuencias de entrada.</returns>
      <param name="first">Primera secuencia que se va a concatenar.</param>
      <param name="second">Secuencia que se va a concatenar con la primera secuencia.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Determina en paralelo si una secuencia contiene un elemento especificado mediante el comparador de igualdad predeterminado.</summary>
      <returns>Es true si la secuencia de salida contiene un elemento que tiene el valor especificado; de lo contrario, es false.</returns>
      <param name="source">Secuencia en la que se va a buscar un valor.</param>
      <param name="value">Valor que se va a buscar en la secuencia.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina en paralelo si una secuencia contiene un elemento especificado mediante el uso de un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Es true si la secuencia de salida contiene un elemento que tiene el valor especificado; de lo contrario, es false.</returns>
      <param name="source">Secuencia en la que se va a buscar un valor.</param>
      <param name="value">Valor que se va a buscar en la secuencia.</param>
      <param name="comparer">Comparador de igualdad que va a comparar los valores.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el número de elementos de una secuencia paralela.</summary>
      <returns>El número de elementos de la secuencia de entrada.</returns>
      <param name="source">Secuencia que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">El número de elementos del origen es mayor que <see cref="F:System.Int32.MaxValue" />.(En este caso InnerException es <see cref="T:System.OverflowException" />) - o bien- Una o más excepciones se produjeron durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve un número que representa cuántos elementos de la secuencia paralela especificada satisfacen una condición.</summary>
      <returns>Un número que representa cuántos elementos de la secuencia especificada satisfacen la condición de la función de predicado.</returns>
      <param name="source">Secuencia que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">El número de elementos del origen es mayor que <see cref="F:System.Int32.MaxValue" />.(En este caso InnerException es <see cref="T:System.OverflowException" />) - o bien- Una o más excepciones se produjeron durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Si la secuencia está vacía, devuelve los elementos de la secuencia paralela especificada o el valor predeterminado del parámetro de tipo en una colección singleton.</summary>
      <returns>Una secuencia que contiene default (TSource) si <paramref name="source" /> está vacía; de lo contrario, <paramref name="source" />.</returns>
      <param name="source">Secuencia para la que se va a devolver un valor predeterminado si está vacía.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Si la secuencia está vacía, devuelve los elementos de la secuencia paralela especificada o el valor especificado en una colección singleton.</summary>
      <returns>Una secuencia que contiene defaultValue si <paramref name="source" /> está vacía; de lo contrario, <paramref name="source" />.</returns>
      <param name="source">Secuencia para la que se va a devolver el valor especificado si está vacía.</param>
      <param name="defaultValue">Valor que se va a devolver si la secuencia está vacía.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve diversos elementos de una secuencia paralela al emplear el comparador de igualdad predeterminado para comparar valores.</summary>
      <returns>Secuencia que contiene diversos elementos de la secuencia de salida.</returns>
      <param name="source">Secuencia de la que se van a quitar los elementos duplicados.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Devuelve diversos elementos de una secuencia paralela mediante el uso de un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</summary>
      <returns>Secuencia que contiene diversos elementos de la secuencia de salida.</returns>
      <param name="source">Secuencia de la que se van a quitar los elementos duplicados.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Devuelve el elemento en un índice especificado en una secuencia paralela.</summary>
      <returns>El elemento situado en la posición especificada de la secuencia de origen.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="index">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0 o mayor o igual que el número de elementos de <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Devuelve el elemento en un índice especificado en una secuencia paralela o, si el índice está fuera del intervalo, un valor predeterminado.</summary>
      <returns>Devuelve default(TSource) si el índice está fuera de los límites de la secuencia de salida; de lo contrario, el elemento en la posición especificada en la secuencia de salida.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="index">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Devuelve un objeto ParallelQuery{TResult} vacío que tiene el argumento de tipo especificado.</summary>
      <returns>Secuencia vacía cuyo argumento de tipo es <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Tipo que se va a asignar al parámetro de tipo de la secuencia genérica devuelta.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Except.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Except.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Proporciona la diferencia de conjunto de dos secuencias paralelas al emplear el comparador de igualdad predeterminado para comparar valores.</summary>
      <returns>Una secuencia que contiene la diferencia de conjuntos de los elementos de dos secuencias.</returns>
      <param name="first">Secuencia cuyos elementos que no estén además en <paramref name="second" /> se van a devolver.</param>
      <param name="second">Secuencia cuyos elementos que también aparezcan en la primera secuencia harán que se quiten esos elementos de la secuencia devuelta.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Proporciona la diferencia de conjuntos de dos secuencias paralelas al emplear especificado <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</summary>
      <returns>Una secuencia que contiene la diferencia de conjuntos de los elementos de dos secuencias.</returns>
      <param name="first">Secuencia cuyos elementos que no estén además en <paramref name="second" /> se van a devolver.</param>
      <param name="second">Secuencia cuyos elementos que también aparezcan en la primera secuencia harán que se quiten esos elementos de la secuencia devuelta. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el primer elemento de una secuencia paralela.</summary>
      <returns>El primer elemento de la secuencia especificada.</returns>
      <param name="source">Secuencia de la que se va a devolver el primer elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el primer elemento de una secuencia paralela que satisface una condición concreta.</summary>
      <returns>El primer elemento de la secuencia que pasa la prueba de la función de predicado especificada.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento de <paramref name="source" /> satisface la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el primer elemento de una secuencia paralela o, si la secuencia no contiene elementos, un valor predeterminado.</summary>
      <returns>default (TSource) si <paramref name="source" /> está vacía; de lo contrario, el primer elemento en <paramref name="source" />.</returns>
      <param name="source">Secuencia de la que se va a devolver el primer elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el primer elemento de la secuencia paralela que satisface una condición o, si no se encuentra dicho elemento, un valor predeterminado.</summary>
      <returns>default (TSource) si <paramref name="source" /> está vacío o si ningún elemento pasa la prueba especificada por el predicado; de lo contrario, el primer elemento de <paramref name="source" /> que pasa la prueba especificada por el predicado.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Invoca en paralelo la acción especificada para cada elemento de <paramref name="source" />.</summary>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> cuyos elementos procesará <paramref name="action" />.</param>
      <param name="action">Acción para invocar en cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Agrupa en paralelo los elementos de una secuencia según una función especificada del selector de claves.</summary>
      <returns>Secuencia de grupos en orden descendente de acuerdo con <paramref name="TKey" />.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa en paralelo los elementos de una secuencia según una función especificada del selector de claves y compara las claves mediante un <see cref="T:System.Collections.Generic.IComparer`1" /> especificado.</summary>
      <returns>Secuencia de grupos en orden descendente de acuerdo con <paramref name="TKey" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />&gt;.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Agrupa en paralelo los elementos de una secuencia según una función especificada del selector de claves y proyecta los elementos de cada grupo mediante una función determinada.</summary>
      <returns>Secuencia de grupos en orden descendente de acuerdo con <paramref name="TKey" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.OrderedParallelQuery`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="elementSelector">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de los elementos de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa en paralelo los elementos de una secuencia según una función del selector de claves.Las claves se comparan utilizando un comparador y los elementos de cada grupo se proyectan utilizando una función especificada.</summary>
      <returns>Secuencia de grupos en orden descendente de acuerdo con <paramref name="TKey" />.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="elementSelector">Función que asigna cada elemento de origen a un elemento de IGrouping.</param>
      <param name="comparer">IComparer{TSource} para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de los elementos de IGrouping.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Agrupa en paralelo los elementos de una secuencia según la función especificada del selector de claves y crea un valor de resultado a partir de cada grupo y su clave.Los elementos de cada grupo se proyectan utilizando una función determinada.</summary>
      <returns>Secuencia de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
      <param name="source">Secuencia cuyos elementos se van a agrupar.</param>
      <param name="keySelector">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector">Función para asignar cada elemento de origen a un elemento en IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de los elementos de cada IGrouping {TKey, TElement}.</typeparam>
      <typeparam name="TResult">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave.Los valores de las claves se comparan utilizando un comparador especificado y los elementos de cada grupo se proyectan utilizando una función especificada.</summary>
      <returns>Secuencia de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
      <param name="source">Secuencia cuyos elementos se van a agrupar.</param>
      <param name="keySelector">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector">Función para asignar cada elemento de origen a un elemento en IGrouping{Key, TElement}.</param>
      <param name="resultSelector">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de los elementos de cada IGrouping {TKey, TElement}.</typeparam>
      <typeparam name="TResult">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Agrupa en paralelo los elementos de una secuencia según la función especificada del selector de claves y crea un valor de resultado a partir de cada grupo y su clave.</summary>
      <returns>Secuencia de elementos de tipo <paramref name="TResult" /> donde cada elemento representa una proyección sobre un grupo y su clave.</returns>
      <param name="source">Secuencia cuyos elementos se van a agrupar.</param>
      <param name="keySelector">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa en paralelo los elementos de una secuencia según la función especificada del selector de claves y crea un valor de resultado a partir de cada grupo y su clave.Las claves se comparan utilizando un comparador especificado.</summary>
      <returns>Secuencia de grupos.</returns>
      <param name="source">Secuencia cuyos elementos se van a agrupar.</param>
      <param name="keySelector">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Nunca se debería llamar a esta sobrecarga GroupJoin.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Este parámetro no se utiliza.</param>
      <param name="inner">Este parámetro no se utiliza.</param>
      <param name="outerKeySelector">Este parámetro no se utiliza.</param>
      <param name="innerKeySelector">Este parámetro no se utiliza.</param>
      <param name="resultSelector">Este parámetro no se utiliza.</param>
      <typeparam name="TOuter">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TInner">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TKey">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TResult">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Nunca se debería llamar a esta sobrecarga GroupJoin.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Este parámetro no se utiliza.</param>
      <param name="inner">Este parámetro no se utiliza.</param>
      <param name="outerKeySelector">Este parámetro no se utiliza.</param>
      <param name="innerKeySelector">Este parámetro no se utiliza.</param>
      <param name="resultSelector">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TOuter">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TInner">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TKey">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TResult">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlaciona en paralelo los elementos de dos secuencias en función de la igualdad de claves y agrupa los resultados.El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <returns>Secuencia que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
      <param name="outer">Primera secuencia que se va a combinar.</param>
      <param name="inner">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <typeparam name="TOuter">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TInner">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona en paralelo los elementos de dos secuencias en función de la igualdad de claves y agrupa los resultados.Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <returns>Secuencia que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
      <param name="outer">Primera secuencia que se va a combinar.</param>
      <param name="inner">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TInner">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Intersect.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Intersect.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Proporciona la intersección de conjunto de dos secuencias paralelas al emplear el comparador de igualdad predeterminado para comparar valores.</summary>
      <returns>Una secuencia que contiene los elementos que forman la intersección de conjuntos de dos secuencias.</returns>
      <param name="first">Secuencia de la que se devolverán los diversos elementos que también aparecen en <paramref name="second" />.</param>
      <param name="second">Secuencia de la que se devolverán los diversos elementos que también aparecen en la primera secuencia.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Proporciona la intersección de conjunto de dos secuencias paralelas al emplear el objeto IEqualityComparer{T} especificado para comparar valores.</summary>
      <returns>Una secuencia que contiene los elementos que forman la intersección de conjuntos de dos secuencias.</returns>
      <param name="first">Secuencia de la que se devolverán los diversos elementos que también aparecen en <paramref name="second" />.</param>
      <param name="second">Secuencia de la que se devolverán los diversos elementos que también aparecen en la primera secuencia.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Nunca se debería llamar a esta sobrecarga Join.Este método está marcado como obsoleto y, cuando se invoca, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Este parámetro no se utiliza.</param>
      <param name="inner">Este parámetro no se utiliza.</param>
      <param name="outerKeySelector">Este parámetro no se utiliza.</param>
      <param name="innerKeySelector">Este parámetro no se utiliza.</param>
      <param name="resultSelector">Este parámetro no se utiliza.</param>
      <typeparam name="TOuter">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TInner">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TKey">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TResult">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Nunca se debería llamar a esta sobrecarga Join.Este método está marcado como obsoleto y, cuando se invoca, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Este parámetro no se utiliza.</param>
      <param name="inner">Este parámetro no se utiliza.</param>
      <param name="outerKeySelector">Este parámetro no se utiliza.</param>
      <param name="innerKeySelector">Este parámetro no se utiliza.</param>
      <param name="resultSelector">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TOuter">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TInner">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TKey">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TResult">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlaciona en paralelo los elementos de dos secuencias basándose en claves coincidentes.El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <returns>Secuencia que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación interna de dos secuencias.</returns>
      <param name="outer">Primera secuencia que se va a combinar.</param>
      <param name="inner">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <typeparam name="TOuter">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TInner">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona en paralelo los elementos de dos secuencias basándose en claves coincidentes.Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <returns>Secuencia que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación interna de dos secuencias.</returns>
      <param name="outer">Primera secuencia que se va a combinar.</param>
      <param name="inner">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TInner">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="action" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el último elemento de una secuencia paralela.</summary>
      <returns>El valor de la última posición de la secuencia de origen.</returns>
      <param name="source">Secuencia de la que se va a devolver el último elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el último elemento de una secuencia paralela que satisface una condición concreta.</summary>
      <returns>El último elemento de la secuencia que pasa la prueba de la función de predicado especificada.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento de <paramref name="source" /> satisface la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el último elemento de una secuencia paralela o, si la secuencia no contiene elementos, un valor predeterminado.</summary>
      <returns>Es default() si la secuencia de salida está vacía; de lo contrario, el último elemento de la misma.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el último elemento de una secuencia paralela que satisface una condición o, si no se encuentra dicho elemento, un valor predeterminado.</summary>
      <returns>Es default() si la secuencia está vacía o si ningún elemento pasa la prueba de la función de predicado; en caso contrario, el último elemento que pasa dicha prueba.</returns>
      <param name="source">Secuencia de la que se va a devolver un elemento.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve un valor Int64 que representa el número total de elementos de una secuencia paralela.</summary>
      <returns>El número de elementos de la secuencia de entrada.</returns>
      <param name="source">Secuencia que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">El número de elementos del origen es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.OverflowException">El resultado calculado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve un valor Int64 que representa el número de elementos de una secuencia paralela que satisfacen una condición.</summary>
      <returns>Un número que representa cuántos elementos de la secuencia especificada satisfacen la condición de la función de predicado.</returns>
      <param name="source">Secuencia que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">El número de elementos del origen es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.OverflowException">El resultado calculado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el valor máximo de una secuencia paralela de valores.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <typeparam name="TSource">Tipo de elementos de la secuencia de salida.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor máximo.</summary>
      <returns>El valor máximo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el valor mínimo de una secuencia paralela de valores.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invoca en paralelo una función de transformación en cada elemento de una secuencia y devuelve el valor mínimo.</summary>
      <returns>El valor mínimo de la secuencia.</returns>
      <param name="source">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de valor devuelto por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento y es un tipo de valor <paramref name="TSource" /> que no acepta valores null.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filtra los elementos de ParallelQuery en función de un tipo especificado.</summary>
      <returns>Secuencia que contiene los elementos de la secuencia de entrada de tipo.</returns>
      <param name="source">Secuencia cuyos elementos se van a filtrar.</param>
      <typeparam name="TResult">El tipo según el cual se van a filtrar los elementos de la secuencia.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Ordena en paralelo en orden ascendente los elementos de una secuencia de acuerdo con una clave.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de acuerdo con una clave.</returns>
      <param name="source">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Ordena en paralelo en orden ascendente los elementos de una secuencia mediante un comparador especificado.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de acuerdo con una clave.</returns>
      <param name="source">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer">IComparer{TKey} para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Ordena en paralelo en orden descendente los elementos de una secuencia de acuerdo con una clave.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de forma descendente de acuerdo con una clave.</returns>
      <param name="source">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Ordena de manera descendente los elementos de una secuencia utilizando un comparador especificado.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de forma descendente de acuerdo con una clave.</returns>
      <param name="source">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer">IComparer{TKey} para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="KeySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Genera una secuencia paralela de números enteros en un intervalo especificado.</summary>
      <returns>IEnumerable&lt;Int32&gt; en C# o IEnumerable(Of Int32) en Visual Basic que contiene un intervalo de números enteros secuenciales.</returns>
      <param name="start">Valor del primer entero de la secuencia.</param>
      <param name="count">Número de enteros secuenciales que se van a generar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> es menor que 0 -o bien- <paramref name="start" /> + <paramref name="count" /> - 1 es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Genera una secuencia paralela que contiene un valor repetido.</summary>
      <returns>Secuencia que contiene un valor repetido.</returns>
      <param name="element">El valor que se va a repetir.</param>
      <param name="count">El número de veces que se va a repetir el valor en la secuencia generada.</param>
      <typeparam name="TResult">El tipo de valor que se va a repetir en la secuencia de resultado.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Invierte el orden de los elementos de una secuencia paralela.</summary>
      <returns>Una secuencia cuyos elementos se corresponden en orden inverso con los de la secuencia de entrada.</returns>
      <param name="source">Secuencia de valores que se va a invertir.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Proyecta en paralelo cada elemento de una secuencia en un nuevo formulario.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación en cada elemento de <paramref name="source" />.</returns>
      <param name="source">Secuencia de valores sobre la que se va a invocar una función de transformación.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de elementos devueltos por el selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Proyecta en paralelo cada elemento de una secuencia en un nuevo formulario mediante la incorporación del índice del elemento.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación en cada elemento de <paramref name="source" />, en función del índice suministrado a <paramref name="selector" />.</returns>
      <param name="source">Secuencia de valores sobre la que se va a invocar una función de transformación.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de elementos devueltos por el selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.Esta condición se podría producir en escenarios de flujo.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proyecta cada elemento de una secuencia en un <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una secuencia e invoca una función de selector de resultados en cada elemento en él.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> sobre la base del índice suministrado a <paramref name="collectionSelector" /> y de asignar entonces cada uno de esos elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado. </returns>
      <param name="source">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector">Función de transformación que se va a aplicar a cada elemento de origen; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <param name="resultSelector">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <typeparam name="TSource">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de elementos de la secuencia de resultados.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proyecta en paralelo cada elemento de una secuencia en una <see cref="T:System.Collections.Generic.IEnumerable`1" /> y reduce las secuencias resultantes en una secuencia.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación uno a varios en cada elemento de la secuencia de entrada.</returns>
      <param name="source">Secuencia de valores que se va a proyectar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de los elementos de la secuencia devueltos por el selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proyecta cada elemento de una secuencia en un <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una secuencia e invoca una función de selector de resultados en cada elemento en él.El índice de cada elemento de origen se utiliza en el formulario proyectado intermedio de ese elemento.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> sobre la base del índice suministrado a <paramref name="collectionSelector" /> y de asignar entonces cada uno de esos elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</returns>
      <param name="source">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector">Función de transformación que se va a aplicar a cada elemento de origen; el segundo parámetro de la función representa el índice del elemento de origen.</param>
      <param name="resultSelector">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <typeparam name="TSource">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TCollection">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de elementos que se van a devolver.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Proyecta en paralelo cada elemento de una secuencia en un <see cref="T:System.Collections.Generic.IEnumerable`1" />y reduce las secuencias resultantes en una secuencia.El índice de cada elemento de origen se utiliza en el formulario proyectado de ese elemento.</summary>
      <returns>Secuencia cuyos elementos son el resultado de invocar la función de transformación uno a varios en cada elemento de la secuencia de entrada.</returns>
      <param name="source">Secuencia de valores que se va a proyectar.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo de los elementos de la secuencia devueltos por el selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga SequenceEqual.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">Se produce cada vez que se llama a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga SequenceEqual.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">Se produce cada vez que se llama a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Determina si dos secuencias paralelas son iguales al comparar los elementos mediante el comparador de igualdad predeterminado para su tipo.</summary>
      <returns>Es true si las dos secuencias de salida tienen la misma longitud y sus elementos correspondientes son iguales según el comparador de igualdad predeterminado para su tipo; de lo contrario, es false.</returns>
      <param name="first">Secuencia que se va a comparar con la segunda.</param>
      <param name="second">Secuencia que se va a comparar con la primera secuencia de entrada.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina si dos secuencias paralelas son iguales al comparar sus elementos mediante un objeto IEqualityComparer{T} especificado.</summary>
      <returns>Es true si las dos secuencias de salida tienen la misma longitud y sus elementos correspondientes son iguales según el comparador de igualdad predeterminado para su tipo; de lo contrario, es false.</returns>
      <param name="first">Secuencia que se va a comparar con <paramref name="second" />.</param>
      <param name="second">Secuencia que se va a comparar con la primera secuencia de entrada.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el único elemento de una secuencia paralela y, si no hay exactamente un elemento en la secuencia, produce una excepción.</summary>
      <returns>El único elemento de la secuencia de entrada.</returns>
      <param name="source">Secuencia de la que se va a devolver el único elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia de entrada contiene más de un elemento.-o bien- la secuencia de entrada está vacía.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el único elemento de una secuencia paralela que satisface una condición especificada y, si existe más de un elemento semejante, produce una excepción.</summary>
      <returns>El único elemento de la secuencia de entrada que satisface una condición.</returns>
      <param name="source">Secuencia de la que se va a devolver el único elemento.</param>
      <param name="predicate">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento satisface la condición de <paramref name="predicate" />.-o bien- varios elementos satisfacen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Devuelve el único elemento de una secuencia paralela o, si la secuencia está vacía, un valor predeterminado; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <returns>Único elemento de la secuencia de entrada o default() si la secuencia no contiene ningún elemento.</returns>
      <param name="source">Secuencia de la que se va a devolver el único elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el único elemento de una secuencia paralela que satisface una condición especificada o, si ese elemento no existe, un valor predeterminado; este método produce una excepción si hay varios elementos que satisfacen la condición.</summary>
      <returns>Único elemento de la secuencia de entrada que satisface la condición o default() si no se encuentra dicho elemento.</returns>
      <param name="source">Secuencia de la que se va a devolver el único elemento.</param>
      <param name="predicate">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> está vacío o se devuelven varios elementos.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Omite un número especificado de elementos de una secuencia paralela y, a continuación, devuelve los elementos restantes.</summary>
      <returns>Secuencia que contiene los elementos que hay después del índice especificado en la secuencia de entrada.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="count">Número de elementos que se van a omitir antes de devolver los elementos restantes.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">El recuento es mayor que <see cref="F:System.Int32.MaxValue" /></exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Omite los elementos de una secuencia paralela siempre que el valor de una condición especificada sea true y, a continuación, devuelve los elementos restantes.</summary>
      <returns>Secuencia que contiene los elementos de la secuencia de entrada a partir del primer elemento de la serie lineal que no pasa la prueba especificada por el predicado.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Omite los elementos de una secuencia paralela siempre que el valor de una condición especificada sea true y, a continuación, devuelve los elementos restantes.El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <returns>Secuencia que contiene los elementos de la secuencia de entrada a partir del primer elemento de la serie lineal que no pasa la prueba especificada por el predicado.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate">Función que va a probar cada elemento de origen para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de origen. </param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Double.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Double.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Single.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Calcula en paralelo la suma de una secuencia de valores.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Single.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Double.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de la secuencia de salida.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Double.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Single.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Calcula en paralelo la suma de la secuencia de valores que se obtienen mediante la invocación de una función de transformación en cada elemento de la secuencia de entrada.</summary>
      <returns>Suma de los valores proyectados de la secuencia.</returns>
      <param name="source">Secuencia de valores cuya suma se va a calcular.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="selector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">La suma es mayor que <see cref="F:System.Single.MaxValue" />.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Devuelve un número especificado de elementos contiguos desde el principio de una secuencia paralela.</summary>
      <returns>Secuencia que contiene el número especificado de elementos desde el principio de la secuencia de entrada.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="count">Número de elementos que se van a devolver.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve elementos de una secuencia paralela siempre que el valor de una condición especificada sea true.</summary>
      <returns>Secuencia que contiene los elementos de la secuencia de entrada que se encuentran antes del elemento que no pasa la prueba.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Devuelve elementos de una secuencia paralela siempre que el valor de una condición especificada sea true.El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <returns>Secuencia que contiene elementos de la secuencia de entrada que se encuentran antes del elemento que no pasa la prueba.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate">Función que va a probar cada elemento de origen para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de origen. </param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">Esta consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Realiza en paralelo una ordenación subsiguiente de los elementos de una secuencia en orden ascendente de acuerdo con una clave.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de acuerdo con una clave.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Realiza en paralelo una ordenación subsiguiente de los elementos de una secuencia en orden ascendente mediante un comparador especificado.</summary>
      <returns>OrderedParallelQuery{TSource} cuyos elementos se van a ordenar de acuerdo con una clave.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer">IComparer{TKey} para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Realiza en paralelo una ordenación subsiguiente de los elementos de una secuencia en orden descendente de acuerdo con una clave.</summary>
      <returns>Secuencia cuyos elementos se ordenan de manera descendente según una clave.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Realiza en paralelo una ordenación subsiguiente de los elementos de una secuencia en orden descendente mediante un comparador especificado.</summary>
      <returns>Secuencia cuyos elementos se ordenan de manera descendente según una clave.</returns>
      <param name="source">OrderedParallelQuery{TSource} que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer">IComparer{TKey} para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Crea una matriz a partir de un <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>Una matriz que contiene los elementos de la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear una matriz.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según una función del selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene claves y valores.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una clave que es una referencia nula (Nothing en Visual Basic).-o bien- <paramref name="keySelector" /> genera claves duplicadas para dos elementos.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según un comparador de función y la clave del selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene claves y valores.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una clave que es una referencia nula (Nothing en Visual Basic).-o bien- <paramref name="keySelector" /> genera claves duplicadas para dos elementos.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según las funciones del selector de elemento y el selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento. </param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una clave que es una referencia nula (Nothing en Visual Basic).-o bien- <paramref name="keySelector" /> genera claves duplicadas para dos elementos.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según una función del selector de claves especificada, un comparador y una función del selector de elementos.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produce una clave que es una referencia nula (Nothing en Visual Basic).-o bien- <paramref name="keySelector" /> genera claves duplicadas para dos elementos.- o bien- se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Crea un <see cref="T:System.Collections.Generic.List`1" /> a partir de un <see cref="T:System.Linq.ParallelQuery`1" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> que contiene los elementos de la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Crea un <see cref="T:System.Linq.ILookup`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según una función del selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> que contiene claves y valores.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Linq.ILookup`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según un comparador de función y la clave del selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> que contiene claves y valores.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un <see cref="T:System.Linq.ILookup`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según las funciones del selector de elemento y el selector de claves especificada.</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados en la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento. </param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Linq.ILookup`2" /> desde una <see cref="T:System.Linq.ParallelQuery`1" /> según una función del selector de claves especificada, un comparador y una función del selector de elementos.</summary>
      <returns>Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) que contiene valores de tipo TElement seleccionados en la secuencia de entrada.</returns>
      <param name="source">Secuencia a partir de la que se va a crear un <see cref="T:System.Linq.ILookup`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación que va a generar un valor de elemento de resultado a partir de cada elemento. </param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo de valor devuelto por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Union.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Nunca se debería llamar a esta sobrecarga Union.Este método está marcado como obsoleto y, cuando se llama, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <param name="comparer">Este parámetro no se utiliza.</param>
      <typeparam name="TSource">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Proporciona la unión de conjunto de dos secuencias paralelas mediante el comparador de igualdad predeterminado.</summary>
      <returns>Secuencia que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
      <param name="first">Secuencia cuyos diversos elementos forman el primer conjunto de la unión.</param>
      <param name="second">Secuencia cuyos diversos elementos forman el segundo conjunto de la unión.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Proporciona la unión de conjunto de dos secuencias paralelas mediante un objeto IEqualityComparer{T} especificado.</summary>
      <returns>Secuencia que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
      <param name="first">Secuencia cuyos diversos elementos forman el primer conjunto de la unión.</param>
      <param name="second">Secuencia cuyos diversos elementos forman el segundo conjunto de la unión.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra en paralelo una secuencia de valores en función de un predicado.</summary>
      <returns>Secuencia que contiene elementos de la secuencia de entrada que satisfacen la condición.</returns>
      <param name="source">Secuencia que se va a filtrar.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de origen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtra en paralelo una secuencia de valores en función de un predicado.El índice de cada elemento se usa en la lógica de la función de predicado.</summary>
      <returns>Secuencia que contiene elementos de la secuencia de entrada que satisfacen la condición.</returns>
      <param name="source">Secuencia que se va a filtrar.</param>
      <param name="predicate">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de origen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.OverflowException">La consulta enumera más que los elementos <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Establece el <see cref="T:System.Threading.CancellationToken" /> que se va a asociar a la consulta.</summary>
      <returns>ParallelQuery que representa la misma consulta como origen, pero con el token de cancelación registrado.</returns>
      <param name="source">ParallelQuery en la que se va a establecer la opción.</param>
      <param name="cancellationToken">Token de cancelación.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Threading.CancellationTokenSource" /> asociado al <paramref name="cancellationToken" /> se ha eliminado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithCancellation" /> se usa varias veces en la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Establece el grado de paralelismo que se va a emplear en una consulta.El grado de paralelismo es el número máximo de tareas ejecutándose de forma simultánea que se utilizará para procesar la consulta.</summary>
      <returns>ParallelQuery que representa la misma consulta como origen, con el límite de los grados de paralelismo establecidos.</returns>
      <param name="source">ParallelQuery en la que se va a establecer el límite de grados de paralelismo.</param>
      <param name="degreeOfParallelism">Grado de paralelismo de la consulta.El valor predeterminado es Math.Min(<see cref="P:System.Environment.ProcessorCount" />, MAX_SUPPORTED_DOP) donde MAX_SUPPORTED_DOP es 512.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> es menor que 1 o mayor que 511. </exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism se utiliza varias veces en la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Establece el modo de ejecución de la consulta.</summary>
      <returns>ParallelQuery que representa la misma consulta como origen, pero con el modo de ejecución registrado.</returns>
      <param name="source">ParallelQuery en la que se va a establecer la opción.</param>
      <param name="executionMode">Modo en el que se va a ejecutar la consulta.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> no es un valor válido de <see cref="T:System.Linq.ParallelExecutionMode" />.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode se utiliza varias veces en la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Establece las opciones de combinación de esta consulta, que especifican cómo almacenará ésta en búfer el resultado.</summary>
      <returns>ParallelQuery que representa la misma consulta como origen, pero con las opciones de combinación registradas.</returns>
      <param name="source">ParallelQuery en la que se va a establecer la opción.</param>
      <param name="mergeOptions">Opciones de combinación que se van a establecer para esta consulta.</param>
      <typeparam name="TSource">Tipo de elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> no es un valor válido de <see cref="T:System.Linq.ParallelMergeOptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="WithMergeOptions" /> se usa varias veces en la consulta.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Nunca se debería llamar a esta sobrecarga Zip.Este método está marcado como obsoleto y, cuando se invoca, siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Esta sobrecarga siempre produce una excepción <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Este parámetro no se utiliza.</param>
      <param name="second">Este parámetro no se utiliza.</param>
      <param name="resultSelector">Este parámetro no se utiliza.</param>
      <typeparam name="TFirst">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TSecond">Este parámetro de tipo no se utiliza.</typeparam>
      <typeparam name="TResult">Este parámetro de tipo no se utiliza.</typeparam>
      <exception cref="T:System.NotSupportedException">La excepción que se produce al llamar a este método.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Combina en paralelo dos secuencias mediante la función de predicado especificada.</summary>
      <returns>Secuencia que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar <paramref name="resultSelector" /> en pares en dos secuencias.Si las longitudes de la secuencia son desiguales, se trunca a la longitud de la secuencia más corta.</returns>
      <param name="first">Primera secuencia que se va a comprimir.</param>
      <param name="second">Segunda secuencia que se va a comprimir.</param>
      <param name="resultSelector">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <typeparam name="TFirst">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TSecond">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TResult">Tipo de los elementos devueltos.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> o <paramref name="second" /> o <paramref name="resultSelector" /> es una referencia nula (Nothing en Visual Basic).</exception>
      <exception cref="T:System.OperationCanceledException">La consulta se cancelada con el token pasado a través de <paramref name="WithCancellation" />.</exception>
      <exception cref="T:System.AggregateException">Se produjeron una o varias excepciones durante la evaluación de la consulta.</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>El modo de ejecución de consultas es una sugerencia en la que se especifica el modo en que el sistema debe equilibrar el rendimiento cuando se realizan consultas en paralelo.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>Ésta es la configuración predeterminada.PLINQ examinará la estructura de la consulta y solo paralelizará la consulta si es probable que esto mejore la velocidad.Si la estructura de la consulta indica que no es probable que se obtenga una mejora de la velocidad, PLINQ ejecutará la consulta como una consulta LINQ to Objects normal.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Ejecuta en paralelo toda la consulta, aun cuando para ello tenga que usar algoritmos con una sobrecarga elevada.Use esta marca cuando sepa que la ejecución paralela de la consulta mejorará la velocidad, pero PLINQ en el modo predeterminado la ejecutaría de forma secuencial.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Especifica el tipo preferido de combinación de salida que se va a usar en una consulta.Es decir, indica cómo debe volver a combinar PLINQ los resultados de las diversas particiones en una única secuencia de resultados.Es solo una sugerencia y puede que no sea respetado por el sistema al paralelizar todas las consultas.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Utilice una combinación con búferes de salida de un tamaño elegido por el sistema.Los resultados se acumularán en un búfer de salida antes de estar a disposición del consumidor de la consulta.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Utilice el tipo de combinación predeterminado, que es AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Utilice una combinación con búferes de salida completos.El sistema acumulará todos los resultados antes de que cualquiera de ellos esté a disposición del consumidor de la consulta.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Utilice una combinación sin búferes de salida.En cuanto se hayan calculado los elementos del resultado, el elemento en cuestión estará a disposición del consumidor de la consulta.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Representa una secuencia paralela.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que itera por la secuencia.</summary>
      <returns>Enumerador que itera por la secuencia.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Representa una secuencia paralela.</summary>
      <typeparam name="TSource">Tipo de elemento de la secuencia de origen.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Devuelve un enumerador que itera por la secuencia.</summary>
      <returns>Enumerador que itera por la secuencia.</returns>
    </member>
  </members>
</doc>