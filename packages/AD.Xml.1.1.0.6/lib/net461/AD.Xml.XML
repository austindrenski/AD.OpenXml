<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AD.Xml</name>
    </assembly>
    <members>
        <member name="T:AD.Xml.AddToAllXElementExtensions">
            <summary>
            Extension methods to add an <see cref="T:System.Xml.Linq.XElement"/> to each child element.
            </summary>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to each child element.
            This method works on the existing <see cref="T:System.Xml.Linq.XElement"/> and returns a reference to it for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for child elements.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to child elements that satisfy the predicate.
            This method works on the existing <see cref="T:System.Xml.Linq.XElement"/> and returns a reference to it for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for child elements.</param>
            <param name="predicate">If satisfied, the <see cref="T:System.Xml.Linq.XElement"/> is added.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to each child element of each element in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to each child element of each element in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements.</param>
            <param name="predicate">If satisfied, the <see cref="T:System.Xml.Linq.XElement"/> is added.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to each child element of each element in the <see cref="T:System.Linq.ParallelQuery`1"/>.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:AD.Xml.AddToAllXElementExtensions.AddToAll(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName,System.Object[])">
            <summary>
            Adds an <see cref="T:System.Xml.Linq.XElement"/> with the given name and content to each child element of each element in the <see cref="T:System.Linq.ParallelQuery`1"/>.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements.</param>
            <param name="predicate">If satisfied, the <see cref="T:System.Xml.Linq.XElement"/> is added.</param>
            <param name="name">The name of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <param name="content">The content of the <see cref="T:System.Xml.Linq.XElement"/> to be added.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.OperationCanceledException"/>   
        </member>
        <member name="T:AD.Xml.ChangeXNamesExtensions">
            <summary>
            Extension methods to change the names of XML elements.
            </summary>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements with the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="oldName">The name of the child elements to be renamed.</param>
            <param name="newName">The name to which filtered child elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">The name to which filtered elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements with the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The element to search for child elements.</param>
            <param name="oldName">The name of the child elements to be renamed.</param>
            <param name="newName">The name to which filtered child elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The element to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">The name to which filtered elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements with the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The element to search for child elements.</param>
            <param name="oldName">The name of the child elements to be renamed.</param>
            <param name="newName">The name to which filtered child elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXNamesExtensions.ChangeXNames(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.Xml.Linq.XName)">
            <summary>
            Changes the name of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The element to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">The name to which filtered elements should be renamed.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="T:AD.Xml.ChangeXValuesExtensions">
            <summary>
            Extension methods to modify the values of XML elements.
            </summary>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Sets the value of child elements that have a specified name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that have a specified name and satisfies the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A predicate with which to test elements.</param>
            <param name="newValue">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Func{System.Xml.Linq.XElement,System.String})">
            <summary>
            Sets the value of child elements that have a specified name and satisfies the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The element to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A predicate with which to test elements.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.String)">
            <summary>
            Sets the value of child elements that have a specified name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="newValue">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Func{System.Xml.Linq.XElement,System.String})">
            <summary>
            Sets the value of child elements that have a specified name and satisfies the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A predicate with which to test elements.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.String)">
            <summary>
            Sets the value of child elements that have a specified name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="newValue">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean},System.String)">
            <summary>
            Sets the value of child elements that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="predicate">A filtering expression to find child elements in the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.ChangeXValuesExtensions.ChangeXValues(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Func{System.Xml.Linq.XElement,System.String})">
            <summary>
            Sets the value of child elements that have a specified name and satisfies the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The elements to search for child elements.</param>
            <param name="name">The name of the child elements to set equal to the value.</param>
            <param name="predicate">A predicate with which to test elements.</param>
            <param name="value">The value to which filtered elements should be set.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="T:AD.Xml.IsFalseExtensions">
            <summary>
            Extension methods to evaluate a predicate against an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:AD.Xml.IsFalseExtensions.IsFalse(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Evaluates the predicate against the <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> against which the predicate is evaluated.</param>
            <param name="predicate">The condition with which to test the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>True if the <see cref="T:System.Xml.Linq.XElement"/> fails to satisfy the predicate.</returns>
        </member>
        <member name="T:AD.Xml.IsTrueExtensions">
            <summary>
            Extension methods to evaluate a predicate against an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
        </member>
        <member name="M:AD.Xml.IsTrueExtensions.IsTrue(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Evaluates the predicate against the <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> against which the predicate is evaluated.</param>
            <param name="predicate">The condition with which to test the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>True if the <see cref="T:System.Xml.Linq.XElement"/> satisfies the predicate.</returns>
        </member>
        <member name="M:AD.Xml.NextExtensions.Next(System.Xml.Linq.XElement)">
            <summary>
            Returns the next sibling node as an <see cref="T:System.Xml.Linq.XElement"/> or null.
            </summary>
            <param name="element">The source element.</param>
            <returns>The next sibling <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:AD.Xml.NextExtensions.Next(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns the next node (in document order) of the given name as an <see cref="T:System.Xml.Linq.XElement"/> or null.
            </summary>
            <param name="element">The source element.</param>
            <param name="name">The name of the next element to find.</param>
            <returns>The next sibling <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="T:AD.Xml.SortOrderType">
            <summary>
            Enum describing the direction of a sort.
            </summary>
        </member>
        <member name="T:AD.Xml.OrderByExtensions">
            <summary>
            Extension methods to sort the elements of the root element in an XDocument.
            </summary>
        </member>
        <member name="M:AD.Xml.OrderByExtensions.OrderBy(System.Xml.Linq.XDocument,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,AD.Xml.SortOrderType})">
            <summary>
            Orders the elements of the root of the XDocument by the given names and sort types.
            </summary>
            <param name="document">The XDocument to sort.</param>
            <param name="sortOrder">An IDictionary of XNames and SortOrderTypes.</param>
            <returns>A sorted XDocument.</returns>
        </member>
        <member name="M:AD.Xml.OrderByExtensions.OrderBy(System.Xml.Linq.XDocument,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Orders the elements of the root of the XDocument by the given names and sort types.
            </summary>
            <param name="document">The XDocument to sort.</param>
            <param name="sortStrings">An enumerable collection of names and sort directions. E.g. "name|asc".</param>
            <returns>A sorted XDocument.</returns>
        </member>
        <member name="M:AD.Xml.PreviousExtensions.Previous(System.Xml.Linq.XElement)">
            <summary>
            Returns the previous sibling node as an <see cref="T:System.Xml.Linq.XElement"/> or null.
            </summary>
            <param name="element">The source element.</param>
            <returns>The previous sibling <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="T:AD.Xml.RemoveByExtensions">
            <summary>
            Extension methods to remove XML elements.
            </summary>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Removes elements from the <see cref="T:System.Xml.Linq.XElement"/> that have the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for children with the given name.</param>
            <param name="name">The name of the elements to be removed from the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the <see cref="T:System.Xml.Linq.XElement"/> that satisify the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for children with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Removes elements from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> that have the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements with the given name.</param>
            <param name="name">The name of the child elements to be removed from the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from each <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Removes elements from the <see cref="T:System.Linq.ParallelQuery`1"/> that have the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements with the given name.</param>
            <param name="name">The name of the child elements to be removed from the <see cref="T:System.Linq.ParallelQuery`1"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByExtensions.RemoveBy(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the <see cref="T:System.Linq.ParallelQuery`1"/> that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from each <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="T:AD.Xml.RemoveByAllExtensions">
            <summary>
            Extension methods to remove XML elements.
            </summary>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Removes elements from the descendants of <see cref="T:System.Xml.Linq.XElement"/> that have the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for children with the given name.</param>
            <param name="name">The name of the elements to be removed from the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the descendants of <see cref="T:System.Xml.Linq.XElement"/> that satisify the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to search for children with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from the <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Removes elements from the descendants of the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/> that have the given name.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements with the given name.</param>
            <param name="name">The name of the child elements to be removed from the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the descendants of <see cref="T:System.Collections.Generic.IEnumerable`1"/> that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search for child elements with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from each <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Removes elements from the descendants of the elements in <see cref="T:System.Linq.ParallelQuery`1"/> that have the given name.        
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements with the given name.</param>
            <param name="name">The name of the child elements to be removed from the <see cref="T:System.Linq.ParallelQuery`1"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="M:AD.Xml.RemoveByAllExtensions.RemoveByAll(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.Func{System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            Removes elements from the descendants of <see cref="T:System.Linq.ParallelQuery`1"/> that satisfy the predicate.
            This method works on the existing enumerable, but returns a reference to the enumerable for a fluent syntax.
            </summary>
            <param name="elements">The <see cref="T:System.Linq.ParallelQuery`1"/> to search for child elements with the given name.</param>
            <param name="predicate">The predicate that is satisfied by the elements to be removed from each <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>A reference to the existing <see cref="T:System.Linq.ParallelQuery`1"/>. This is returned for use with fluent syntax calls.</returns>
        </member>
        <member name="T:AD.Xml.ReplaceExtensions">
            <summary>
            Extension methods to replace nodes in an XML tree.
            </summary>
        </member>
        <member name="M:AD.Xml.ReplaceExtensions.Replace(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.Object)">
            <summary>
            Replaces descendants with a name equal to <paramref name="oldName"/> with the element created from <paramref name="name"/> and <paramref name="content"/>.
            This method works on the existing <see cref="T:System.Xml.Linq.XElement"/> and returns a reference to it for a fluent syntax.
            </summary>
            <param name="element">The element to search for descendants whose names are equal to <paramref name="oldName"/>.</param>
            <param name="oldName">The element name for which to search.</param>
            <param name="name">The name of the replacement node.</param>
            <param name="content">The content of the replacement node.</param>
            <returns>A reference to the existing <see cref="T:System.Xml.Linq.XElement"/>. This is returned for use with fluent syntax calls.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:AD.Xml.SiblingExtensions">
            <summary>
            Extension methods for locating sibling nodes.
            </summary>
        </member>
        <member name="M:AD.Xml.SiblingExtensions.Sibling(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns the sibling node with the specified name.
            </summary>
            <param name="element">The source element.</param>
            <param name="name">The name of the sibling element to find.</param>
            <returns>The sibling element with the specified name.</returns>
        </member>
        <member name="M:AD.Xml.SiblingExtensions.Siblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns the sibling nodes with the specified name.
            </summary>
            <param name="element">The source element.</param>
            <param name="name">The name of the sibling elements to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of siblings with the specified name.</returns>
        </member>
        <member name="T:AD.Xml.ToBoolExtensions">
            <summary>
            Extension methods to convert text into boolean values.
            </summary>
        </member>
        <member name="M:AD.Xml.ToBoolExtensions.ToBool(System.Xml.Linq.XElement)">
            <summary>
            Converts the element to true, false, or null.
            </summary>
            <param name="element">The XElement to convert.</param>
            <returns>True, false, or null.</returns>
        </member>
        <member name="T:AD.Xml.ToDateTimeExtensions">
            <summary>
            Extension methods to cast an XElement as a DateTime or null.
            </summary>
        </member>
        <member name="M:AD.Xml.ToDateTimeExtensions.ToDateTime(System.Xml.Linq.XElement)">
            <summary>
            Casts an XElement as a DateTime or null.
            </summary>
            <param name="element">The XElement to cast.</param>
            <returns>The DateTime representation of the value of the XElement, or null.</returns>
        </member>
        <member name="T:AD.Xml.ToDoubleExtensions">
            <summary>
            Extension methods to convert text into double values.
            </summary>
        </member>
        <member name="M:AD.Xml.ToDoubleExtensions.ToDouble(System.Xml.Linq.XElement)">
            <summary>
            Converts the element to a double value or null.
            </summary>
            <param name="element">The XElement to convert.</param>
            <returns>A double value or null.</returns>
        </member>
        <member name="T:AD.Xml.ToLongExtensions">
            <summary>
            Extension methods to convert text into long values.
            </summary>
        </member>
        <member name="M:AD.Xml.ToLongExtensions.ToLong(System.Xml.Linq.XElement)">
            <summary>
            Converts the element to a long value or null.
            </summary>
            <param name="element">The XElement to convert.</param>
            <returns>A long value or null.</returns>
        </member>
        <member name="T:AD.Xml.ToXDocumentExtensions">
            <summary>
            Extension methods to convert enumerable collections into XDocuments. 
            </summary>
        </member>
        <member name="F:AD.Xml.ToXDocumentExtensions.XDeclarationStandard">
            <summary>
            The standard declaration for a well-formed XDocument.
            </summary>
        </member>
        <member name="M:AD.Xml.ToXDocumentExtensions.ToXDocument(System.Collections.IEnumerable)">
            <summary>
            Converts an enumerable collection into an XDocument.
            </summary>
            <param name="elements">The enumerable collection that will be the content of the root element of the XDocument.</param>
            <returns>A well-formed XDocument with a root element whose children are the XElement representations of the elements in the enumerable collection.</returns>
        </member>
        <member name="M:AD.Xml.ToXDocumentExtensions.ToXDocument(System.Xml.Linq.XDocument)">
            <summary>
            Ensures the XDocument is well-formed. If the XDocument is not well-formed, alterations are made.
            </summary>
            <param name="document">The XDocument to check.</param>
            <returns>A well-formed XDocument.</returns>
        </member>
        <member name="T:AD.Xml.ToXElementExensions">
            <summary>
            Extension methods to convert objects to XElements.
            </summary> 
        </member>
        <member name="F:AD.Xml.ToXElementExensions.SpecialFields">
            <summary>
            Fields that should be flagged in XDocuments consumed by Getdata applications.
            </summary>
        </member>
        <member name="M:AD.Xml.ToXElementExensions.ToXElement(System.Collections.IEnumerable)">
            <summary>
            Returns a single XElement named root whose content are the converted elements of the enumerable collection.
            </summary>
            <param name="enumerable">The enumerable collection that will become the elements of the root XElement.</param>
            <returns>An XElement named root that contains the enumerable as elements.</returns>
        </member>
        <member name="M:AD.Xml.ToXElementExensions.ToXElement``1(``0)">
            <summary>
            Encapsulates the element in an XElement named record.
            </summary>
            <param name="element">The object to be encapsulated.</param>
            <returns>An XElement named record that contains the element.</returns>
        </member>
        <member name="M:AD.Xml.ToXElementExensions.RemoveEmptyProperties(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Removes child elements from an enumerable collection of parent elements if a child element is null or zero in every parent element.
            </summary>
            <param name="elements">The enumerable collection of parent elements.</param>
            <returns>The enumerable collection without child elements that were null or zero in every parent element.</returns>
        </member>
        <member name="T:AD.Xml.ToXmlStringExtensions">
            <summary>
            Extension methods to convert objects into XML string format.
            </summary>
        </member>
        <member name="M:AD.Xml.ToXmlStringExtensions.ToXmlString(System.Xml.Linq.XDocument)">
            <summary>
            Returns the XML string representation of an XDocument.
            </summary>
            <param name="document">The XDocument to convert.</param>
            <returns>The indented XML string form of the XDocument.</returns>
        </member>
        <member name="M:AD.Xml.ToXmlStringExtensions.ToXmlString(System.Collections.IEnumerable)">
            <summary>
            Returns the XML string representation of an enumerable collection.
            </summary>
            <param name="elements">The enumerable collection to convert.</param>
            <returns>The indented XML string form of the enumerable collection.</returns>
        </member>
        <member name="T:AD.Xml.ToXNameExtensions">
            <summary>
            Extension methods to find a string name in an existing XDocument.
            </summary>
        </member>
        <member name="M:AD.Xml.ToXNameExtensions.ToXName(System.String,System.Xml.Linq.XDocument)">
            <summary>
            Finds the XName representation of the string in the XDocument.
            </summary>
            <param name="name">The string to find as an XName.</param>
            <param name="document">The XDocument to search.</param>
            <returns>The XName representation of the string name.</returns>
        </member>
        <member name="T:AD.Xml.ToXStreamingElementExtensions">
            <summary>
            Extension methods to convert objects to XStreamingElements.
            </summary>
        </member>
        <member name="M:AD.Xml.ToXStreamingElementExtensions.ToXStreamingElement(System.Xml.Linq.XDocument)">
            <summary>
            Returns the source <see cref="T:System.Xml.Linq.XDocument"/> as an XStreamingElement.
            </summary>
            <param name="document">The source document to be returned as an XStreamingElement.</param>
            <returns>An XStreamingElement representing the source document.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.Xml.ToXStreamingElementExtensions.ToXStreamingElement(System.Collections.IEnumerable)">
            <summary>
            Returns a single <see cref="T:System.Xml.Linq.XStreamingElement"/> named root whose content are the converted elements of the <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable"/> that will become the elements of the root <see cref="T:System.Xml.Linq.XStreamingElement"/>.</param>
            <returns>An <see cref="T:System.Xml.Linq.XStreamingElement"/> named root that contains the source collection as an <see cref="T:System.Xml.Linq.XStreamingElement"/>.</returns>
        </member>
        <member name="M:AD.Xml.ToXStreamingElementExtensions.ToXStreamingElement``1(``0)">
            <summary>
            Encapsulates the element in an <see cref="T:System.Xml.Linq.XStreamingElement"/> named record.
            </summary>
            <param name="element">The object to be encapsulated.</param>
            <returns>An <see cref="T:System.Xml.Linq.XStreamingElement"/> named record that contains the element.</returns>
        </member>
        <member name="T:AD.Xml.XmlSchemaExtensions">
            <summary>
            Extension methods to work with XML schemas.
            </summary>
        </member>
        <member name="M:AD.Xml.XmlSchemaExtensions.XmlSchema(System.Xml.Linq.XDocument,System.IO.StreamWriter)">
            <summary>
            Creates an XML schema based on the first element of the root of the XDocument.
            </summary>
            <param name="document">The XDocument used to create the schema.</param>
            <param name="writer">The stream to which error information is written.</param>
            <returns>An XML schema representing the first element of the root of the XDocument.</returns>
        </member>
        <member name="M:AD.Xml.XmlSchemaExtensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchema)">
            <summary>
            Returns true if the XDocument is valid according to the schema.
            </summary>
            <param name="document">The document to validate.</param>
            <param name="schema">The schema for validation.</param>
            <returns>True if the document is valid according to the schema.</returns>
        </member>
        <member name="M:AD.Xml.XmlSchemaExtensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchema,System.IO.StreamWriter)">
            <summary>
            Returns true if the XDocument is valid according to the schema and writes error information to a stream.
            </summary>
            <param name="document">The document to validate.</param>
            <param name="schema">The schema for validation.</param>
            <param name="writer">The stream to which error information is written.</param>
            <returns>True if the document is valid according to the schema.</returns>
        </member>
        <member name="T:AD.Xml.XNamespaces">
            <summary>
            Common XML namespaces.
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlWordprocessingmlMain">
            <summary>
            Represents the 'w:' prefix seen in raw OpenXML documents.
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlOfficeDocumentRelationships">
            <summary>
            Represents the 'r:' prefix seen in the markup of document.xml.
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlPackageRelationships">
            <summary>
            Represents the 'r:' prefix seen in the markup of [Content_Types].xml
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlPackageContentTypes">
            <summary>
            The namespace declared on the [Content_Types].xml
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlDrawingmlWordprocessingDrawing">
            <summary>
            Represents the 'wp:' prefix seen in the markup for 'drawing' elements.
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlDrawingmlChart">
            <summary>
            Represents the 'c:' prefix seen in the markup for chart[#].xml
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlDrawingmlMain">
            <summary>
            Represents the 'a:' prefix seen in the markup for chart[#].xml
            </summary>
        </member>
        <member name="F:AD.Xml.XNamespaces.OpenXmlOfficeDocumentExtendedProperties">
            <summary>
            The namespace delcared on docProps/app.xml
            </summary>
        </member>
    </members>
</doc>
