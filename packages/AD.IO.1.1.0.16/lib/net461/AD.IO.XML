<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AD.IO</name>
    </assembly>
    <members>
        <member name="T:AD.IO.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources._Content_Types_">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;Types xmlns=&quot;http://schemas.openxmlformats.org/package/2006/content-types&quot;&gt;
              &lt;Default Extension=&quot;docx&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml&quot;/&gt;
              &lt;Default Extension=&quot;rels&quot; ContentType=&quot;application/vnd.openxmlformats-package.relationships+xml&quot;/&gt;
              &lt;Default Extension=&quot;xlsx&quot; ContentType=&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;/&gt;
              &lt;Default Extension=&quot;xml&quot; ContentType [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.app">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;Properties xmlns=&quot;http://schemas.openxmlformats.org/officeDocument/2006/extended-properties&quot;
                        xmlns:vt=&quot;http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes&quot;&gt;
              &lt;Template&gt;Normal.dotm&lt;/Template&gt;
              &lt;TotalTime&gt;0&lt;/TotalTime&gt;
              &lt;Pages&gt;1&lt;/Pages&gt;
              &lt;Words&gt;0&lt;/Words&gt;
              &lt;Characters&gt;0&lt;/Characters&gt;
              &lt;Application&gt;Microsoft Office Word&lt;/Application&gt;
              &lt;DocSecurity&gt;0&lt;/DocSecurity&gt;
              &lt;Lines&gt;0&lt;/Lines&gt;
              &lt;Paragraphs&gt;0&lt;/Paragraphs&gt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.core">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;cp:coreProperties xmlns:cp=&quot;http://schemas.openxmlformats.org/package/2006/metadata/core-properties&quot; 
                               xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot; 
                               xmlns:dcterms=&quot;http://purl.org/dc/terms/&quot; 
                               xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;
              &lt;dc:creator&gt;508 Programming Application&lt;/dc:creator&gt;
              &lt;cp:lastModifiedBy&gt;508 Programming Application&lt;/cp:lastModifiedBy&gt;
              &lt;cp:revision&gt;0&lt;/cp:r [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.document">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot; ?&gt;
            &lt;w:document xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;
              &lt;w:body&gt;
                &lt;w:p&gt;
                &lt;/w:p&gt;
                &lt;w:sectPr&gt;
                  &lt;w:pgSz w:w=&quot;12240&quot; w:h=&quot;15840&quot;/&gt;
                  &lt;w:pgMar w:top=&quot;1440&quot; w:right=&quot;1440&quot; w:bottom=&quot;1440&quot; w:left=&quot;1440&quot; w:header=&quot;720&quot; w:footer=&quot;720&quot; w:gutter=&quot;0&quot;/&gt;
                  &lt;w:cols w:space=&quot;720&quot;/&gt;
                  &lt;w:docGrid w:linePitch=&quot;360&quot;/&gt;
                &lt;/w:sectPr&gt;
              &lt;/w:body&gt;
            &lt;/w:document&gt;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.document_xml_rels">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;Relationships xmlns=&quot;http://schemas.openxmlformats.org/package/2006/relationships&quot;&gt;
              &lt;Relationship Id=&quot;rId1&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot; Target=&quot;styles.xml&quot;/&gt;
              &lt;Relationship Id=&quot;rId2&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings&quot; Target=&quot;settings.xml&quot;/&gt;
              &lt;Relationship Id=&quot;rId3&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/the [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.footer1">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:ftr xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;
              &lt;w:p&gt;
                &lt;w:pPr&gt;
                  &lt;w:jc w:val=&quot;right&quot;/&gt;
                &lt;/w:pPr&gt;
                &lt;w:r&gt;
                  &lt;w:t&gt;U.S. International Trade Commission |&lt;/w:t&gt;
                &lt;/w:r&gt;
                &lt;w:fldSimple w:instr=&quot; PAGE   \* MERGEFORMAT &quot;&gt;
                  &lt;w:r&gt;
                    &lt;w:t&gt;&lt;/w:t&gt;
                  &lt;/w:r&gt;
                &lt;/w:fldSimple&gt;
              &lt;/w:p&gt;
            &lt;/w:ftr&gt;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.footer2">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:ftr xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;
              &lt;w:p&gt;
                &lt;w:pPr&gt;
                  &lt;w:jc w:val=&quot;left&quot;/&gt;
                &lt;/w:pPr&gt;
                &lt;w:fldSimple w:instr=&quot; PAGE   \* MERGEFORMAT &quot;&gt;
                  &lt;w:r&gt;
                    &lt;w:t&gt;&lt;/w:t&gt;
                  &lt;/w:r&gt;
                &lt;/w:fldSimple&gt;
                &lt;w:r&gt;
                  &lt;w:t&gt;| www.usitc.gov&lt;/w:t&gt;
                &lt;/w:r&gt;
              &lt;/w:p&gt;
            &lt;/w:ftr&gt;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.header1">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:hdr xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;
              &lt;w:p&gt;
                &lt;w:pPr&gt;
                  &lt;w:pStyle w:val=&quot;Header&quot;/&gt;
                &lt;/w:pPr&gt;
                &lt;w:r&gt;
                  &lt;w:t xml:space=&quot;preserve&quot;&gt;Chapter &lt;/w:t&gt;
                &lt;/w:r&gt;
                &lt;w:fldSimple w:instr=&quot; STYLEREF  &amp;quot;Heading 1&amp;quot; \s \* MERGEFORMAT &quot;&gt;
                  &lt;w:r&gt;
                    &lt;w:t&gt;&lt;/w:t&gt;
                  &lt;/w:r&gt;
                &lt;/w:fldSimple&gt;
                &lt;w:r&gt;
                  &lt;w:t xml:space=&quot;preserve&quot;&gt;: &lt;/w:t&gt;
                &lt;/w:r&gt;
                &lt;w:fldSimple w:i [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.header2">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:hdr xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;
              &lt;w:p&gt;
                &lt;w:pPr&gt;
                  &lt;w:pStyle w:val=&quot;Header&quot;/&gt;
                  &lt;w:jc w:val=&quot;right&quot;/&gt;
                &lt;/w:pPr&gt;
                &lt;w:r&gt;
                  &lt;w:t&gt;{0}&lt;/w:t&gt;
                &lt;/w:r&gt;
              &lt;/w:p&gt;
            &lt;/w:hdr&gt;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.rels">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;Relationships xmlns=&quot;http://schemas.openxmlformats.org/package/2006/relationships&quot;&gt;
              &lt;Relationship Id=&quot;rId1&quot; Type=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot; Target=&quot;word/document.xml&quot;/&gt;
              &lt;Relationship Id=&quot;rId2&quot; Type=&quot;http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties&quot; Target=&quot;docProps/core.xml&quot;/&gt;
              &lt;Relationship Id=&quot;rId3&quot; Type=&quot;http://schemas.openxmlformats.org/officeDo [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.settings">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:settings xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
                        xmlns:o=&quot;urn:schemas-microsoft-com:office:office&quot; 
                        xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot; 
                        xmlns:m=&quot;http://schemas.openxmlformats.org/officeDocument/2006/math&quot; 
                        xmlns:v=&quot;urn:schemas-microsoft-com:vml&quot; 
                        xmlns:w10=&quot;urn:schemas-microsoft-com:office:word&quot; 
                        x [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.styles">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;w:styles xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
                      xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot; 
                      xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot; 
                      xmlns:w14=&quot;http://schemas.microsoft.com/office/word/2010/wordml&quot; 
                      mc:Ignorable=&quot;w14&quot;&gt;
              &lt;w:docDefaults&gt;
                &lt;w:rPrDefault&gt;
                  &lt;w:rPr&gt;
                    &lt;w:rFonts w:asciiTheme=&quot;minor [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:AD.IO.Properties.Resources.theme1">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
            &lt;a:theme xmlns:a=&quot;http://schemas.openxmlformats.org/drawingml/2006/main&quot; name=&quot;Office Theme&quot;&gt;
              &lt;a:themeElements&gt;
                &lt;a:clrScheme name=&quot;Office&quot;&gt;
                  &lt;a:dk1&gt;
                    &lt;a:sysClr val=&quot;windowText&quot; lastClr=&quot;000000&quot;/&gt;
                  &lt;/a:dk1&gt;
                  &lt;a:lt1&gt;
                    &lt;a:sysClr val=&quot;window&quot; lastClr=&quot;FFFFFF&quot;/&gt;
                  &lt;/a:lt1&gt;
                  &lt;a:dk2&gt;
                    &lt;a:srgbClr val=&quot;1F497D&quot;/&gt;
                  &lt;/a:dk2&gt;
                  &lt;a:lt2&gt;
                    &lt;a:srgbClr val=&quot;EEECE1&quot;/&gt;
                  &lt;/a:lt2&gt;
                   [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:AD.IO.ExtractZipFileExtensions">
            <summary>
            Extension methods to extract entries from a <see cref="T:AD.IO.ZipFilePath"/>.
            </summary>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.FilePath,System.Boolean)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one file is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="filePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.FilePath,System.Boolean,System.String)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.FilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="filePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <param name="completedMessage">The message written to STDOUT upon successful completion.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.ZipFilePath,System.Boolean)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.ZipFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="outZipFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.ZipFilePath,System.Boolean,System.String)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.ZipFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="outZipFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <param name="completedMessage">The message written to STDOUT upon successful completion.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.DelimitedFilePath,System.Boolean)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.DelimitedFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="delimitedFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.DelimitedFilePath,System.Boolean,System.String)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.DelimitedFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="delimitedFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <param name="completedMessage">The message written to STDOUT upon successful completion.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.XmlFilePath,System.Boolean)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.XmlFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="xmlFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFile(AD.IO.ZipFilePath,AD.IO.XmlFilePath,System.Boolean,System.String)">
            <summary>
            Extracts a single file from the <see cref="T:AD.IO.ZipFilePath"/>. An exception is thrown if more than one <see cref="T:AD.IO.XmlFilePath"/> is found in the zip archive.
            </summary>
            <param name="zipFilePath">The zip file to open.</param>
            <param name="xmlFilePath">The file path to which the extracted entry is saved.</param>
            <param name="overwrite">If true, the file path is overwritten.</param>
            <param name="completedMessage">The message written to STDOUT upon successful completion.</param>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFiles(AD.IO.ZipFilePath,AD.IO.DirectoryPath,System.Boolean)">
            <summary>
            Extracts any files in the <see cref="T:AD.IO.ZipFilePath"/> to the <see cref="T:AD.IO.DirectoryPath"/>.
            </summary>
            <param name="zipFilePath">The zip file from which files are extracted.</param>
            <param name="directoryPath">The directory to which extracted entries are written.</param>
            <param name="overwrite">If true, the directory is overwritten.</param>
        </member>
        <member name="M:AD.IO.ExtractZipFileExtensions.ExtractZipFiles(AD.IO.ZipFilePath,AD.IO.DirectoryPath,System.Boolean,System.String)">
            <summary>
            Extracts any files in the <see cref="T:AD.IO.ZipFilePath"/> to the <see cref="T:AD.IO.DirectoryPath"/>.
            </summary>
            <param name="zipFilePath">The zip file from which files are extracted.</param>
            <param name="directoryPath">The directory to which extracted entries are written.</param>
            <param name="overwrite">If true, the directory is overwritten.</param>
            <param name="completedMessage">The message written to STDOUT upon successful completion.</param>
        </member>
        <member name="T:AD.IO.GetZipFileExtensions">
            <summary>
            Extensions methods to download zip files from a <see cref="T:AD.IO.UrlPath"/>.
            </summary>
        </member>
        <member name="M:AD.IO.GetZipFileExtensions.GetZipFile(AD.IO.UrlPath,AD.IO.ZipFilePath,System.Boolean)">
            <summary>
            Saves a zip file to <paramref name="zipFilePath"/> from the response stream of the <paramref name="urlPath"/>.
            </summary>
            <param name="urlPath">The address from which the zip file is returned.</param>
            <param name="zipFilePath">The file path to which the zip file is saved.</param>
            <param name="overwrite">If true, the zip file is overwritten.</param>
        </member>
        <member name="M:AD.IO.GetZipFileExtensions.TryGetZipFile(AD.IO.UrlPath,AD.IO.ZipFilePath,System.Boolean,System.String)">
            <summary>
            Tries to save a response stream to the <see cref="T:AD.IO.ZipFilePath"/>. This method continues until sucessful.
            </summary>
            <param name="urlPath">The address from which the zip file is returned.</param>
            <param name="zipFilePath">The file path to which the zip file is saved.</param>
            <param name="overwrite">If true, the zip file is overwritten.</param>
            <param name="completedMessage">A message written to stdout upon completion.</param>
        </member>
        <member name="T:AD.IO.DelimitedFilePath">
            <summary>
            Path to a delimited file on the system. An exception is thrown if the file does not exist, or if it is not a delimited file.
            </summary>
        </member>
        <member name="F:AD.IO.DelimitedFilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.DelimitedFilePath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.DelimitedFilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="P:AD.IO.DelimitedFilePath.Headers">
            <summary>
            The items from the first row of the file.
            </summary>
        </member>
        <member name="P:AD.IO.DelimitedFilePath.HeaderRow">
            <summary>
            The the first row of the file.
            </summary>
        </member>
        <member name="P:AD.IO.DelimitedFilePath.Delimiter">
            <summary>
            The character that delimits data in the file.
            </summary>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.#ctor(System.String,System.Char)">
            <summary>
            Creates a new DelimitedFilePath object to hold the path to a delimited file.
            </summary>
            <param name="delimitedFilePath">A string delimited file path.</param>
            <param name="delimiter">The character that delimits the file.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.Create(System.String,System.Char)">
            <summary>
            Creates a delimited file along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.Create(System.String)">
            <summary>
            Creates a delimited file along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.ToString">
            <summary>
            Returns the delimited file path.
            </summary>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.op_Implicit(AD.IO.DelimitedFilePath)~System.String">
            <summary>
            Implicitly casts a DelimitedFilePath as its internal delimited file path string.
            </summary>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.op_Implicit(System.String)~AD.IO.DelimitedFilePath">
            <summary>
            Implicitly casts a string as a DelimitedFilePath. An exception is thrown if the delimited file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.op_Explicit(AD.IO.DelimitedFilePath)~AD.IO.FilePath">
            <summary>
            Implicitly casts a DelimitedFilePath as a FilePath.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DelimitedFilePath.op_Explicit(AD.IO.DelimitedFilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a FilePath as a UrlPath. An exception is thrown if the delimited file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.DirectoryPath">
            <summary>
            Path to a directory on the system. An exception is thrown if the directory does not exist.
            </summary>
        </member>
        <member name="F:AD.IO.DirectoryPath._path">
            <summary>
            The full directory path.
            </summary>
        </member>
        <member name="P:AD.IO.DirectoryPath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.DirectoryPath.Name">
            <summary>
            The directory name.
            </summary>
        </member>
        <member name="M:AD.IO.DirectoryPath.#ctor(System.String)">
            <summary>
            Creates a new DirectoryPath object to hold the path to a directory.
            </summary>
            <param name="directoryPath">A string directory path.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
        </member>
        <member name="M:AD.IO.DirectoryPath.Create(System.String)">
            <summary>
            Creates a directory along the path if one does not exist.
            </summary>
        </member>
        <member name="M:AD.IO.DirectoryPath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.DirectoryPath.ToString">
            <summary>
            Returns the directory path.
            </summary>
        </member>
        <member name="M:AD.IO.DirectoryPath.op_Implicit(AD.IO.DirectoryPath)~System.String">
            <summary>
            Implicitly casts a DirectoryPath as its internal directory path string.
            </summary>
        </member>
        <member name="M:AD.IO.DirectoryPath.op_Implicit(System.String)~AD.IO.DirectoryPath">
            <summary>
            Implicitly casts a string as a DirectoryPath. An exception is thrown if the directory is not found.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
        </member>
        <member name="T:AD.IO.DocxFilePath">
            <summary>
            Path to a Microsoft Word file on the system. An exception is thrown if the file does not exist.
            </summary>
        </member>
        <member name="F:AD.IO.DocxFilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.DocxFilePath.Extension">
            <summary>
            The file extension.
            </summary>
        </member>
        <member name="P:AD.IO.DocxFilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.DocxFilePath.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:AD.IO.DocxFilePath"/> to hold the path to a file.
            </summary>
            <param name="filePath">A string file path.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.DocxFilePath.Create(System.String)">
            <summary>
            Creates a file along the path if one does not exist.
            </summary>
        </member>
        <member name="M:AD.IO.DocxFilePath.Create(System.String,System.Boolean)">
            <summary>
            Creates a file along the path, overwriting any existing file.
            </summary>
        </member>
        <member name="M:AD.IO.DocxFilePath.CreateNew(System.String)">
            <summary>
            Creates a docx file from the given docx file.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DocxFilePath.ToString">
            <summary>
            Returns the file path.
            </summary>
        </member>
        <member name="M:AD.IO.DocxFilePath.op_Implicit(AD.IO.DocxFilePath)~System.String">
            <summary>
            Implicitly casts a FilePath as its internal file path string.
            </summary>
        </member>
        <member name="M:AD.IO.DocxFilePath.op_Implicit(System.String)~AD.IO.DocxFilePath">
            <summary>
            Implicitly casts a string as a DocxFilePath. An exception is thrown if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.DocxFilePath.op_Implicit(AD.IO.DocxFilePath)~AD.IO.FilePath">
            <summary>
            Implicitly casts a string as a DocxFilePath. An exception is thrown if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.DocxFilePath.op_Explicit(AD.IO.DocxFilePath)~AD.IO.ZipFilePath">
            <summary>
            Implicitly casts a DocxFilePath as a ZipFilePath. An exception is thrown if the file is not a zip file path, or if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.DocxFilePath.op_Explicit(AD.IO.DocxFilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a DocxFilePath as a UrlPath. An exception is thrown if the file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.FilePath">
            <summary>
            Path to a file on the system. An exception is thrown if the file does not exist.
            </summary>
        </member>
        <member name="F:AD.IO.FilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.FilePath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.FilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.FilePath.#ctor(System.String)">
            <summary>
            Creates a new FilePath object to hold the path to a file.
            </summary>
            <param name="filePath">A string file path.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.FilePath.Create(System.String)">
            <summary>
            Creates a file along the path if one does not exist.
            </summary>
        </member>
        <member name="M:AD.IO.FilePath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.FilePath.ToString">
            <summary>
            Returns the file path.
            </summary>
        </member>
        <member name="M:AD.IO.FilePath.op_Implicit(AD.IO.FilePath)~System.String">
            <summary>
            Implicitly casts a FilePath as its internal file path string.
            </summary>
        </member>
        <member name="M:AD.IO.FilePath.op_Implicit(System.String)~AD.IO.FilePath">
            <summary>
            Implicitly casts a string as a FilePath. An exception is thrown if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.FilePath.op_Implicit(AD.IO.FilePath)~AD.IO.DocxFilePath">
            <summary>
            Implicitly casts a FilePath as a DocxFilePath. An exception is thrown if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.FilePath.op_Explicit(AD.IO.FilePath)~AD.IO.ZipFilePath">
            <summary>
            Implicitly casts a FilePath as a ZipFilePath. An exception is thrown if the file is not a zip file path, or if the file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.FilePath.op_Explicit(AD.IO.FilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a FilePath as a UrlPath. An exception is thrown if the file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.HtmlFilePath">
            <summary>
            Path to an HTML file on the system. An exception is thrown if the file does not exist, or if it is not an HTML file.
            </summary>
        </member>
        <member name="F:AD.IO.HtmlFilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.HtmlFilePath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.HtmlFilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.HtmlFilePath.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:AD.IO.HtmlFilePath"/> object to hold the path to an HTML file.
            </summary>
            <param name="htmlFilePath">A string HTML file path.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.HtmlFilePath.Create(System.String)">
            <summary>
            Creates an HTML file along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.HtmlFilePath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit <see cref="T:AD.IO.IPath"/> implementation.
            </summary>
        </member>
        <member name="M:AD.IO.HtmlFilePath.ToString">
            <summary>
            Returns the internal HTML file path string.
            </summary>
        </member>
        <member name="M:AD.IO.HtmlFilePath.op_Implicit(AD.IO.HtmlFilePath)~System.String">
            <summary>
            Implicitly casts a <see cref="T:AD.IO.HtmlFilePath"/> as its internal HTML file path string.
            </summary>
        </member>
        <member name="M:AD.IO.HtmlFilePath.op_Implicit(System.String)~AD.IO.HtmlFilePath">
            <summary>
            Implicitly casts a string as a <see cref="T:AD.IO.HtmlFilePath"/>. An exception is thrown if the HTML file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.HtmlFilePath.op_Explicit(AD.IO.HtmlFilePath)~AD.IO.FilePath">
            <summary>
            Implicitly casts a <see cref="T:AD.IO.HtmlFilePath"/> as a <see cref="T:AD.IO.FilePath"/>.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.HtmlFilePath.op_Explicit(AD.IO.HtmlFilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts an <see cref="T:AD.IO.HtmlFilePath"/> as a <see cref="T:AD.IO.UrlPath"/>. An exception is thrown if the HTML file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.IPath">
            <summary>
            Defines common functionality for system paths.
            </summary>
        </member>
        <member name="P:AD.IO.IPath.Extension">
            <summary>
            The file extension or null.
            </summary>
        </member>
        <member name="P:AD.IO.IPath.Name">
            <summary>
            The file name or null.
            </summary>
        </member>
        <member name="M:AD.IO.IPath.Create(System.String)">
            <summary>
            Creates a new path.
            </summary>
        </member>
        <member name="M:AD.IO.IPath.ToString">
            <summary>
            Returns the internal string path.
            </summary>
        </member>
        <member name="T:AD.IO.UrlPath">
            <summary>
            Represents a URL. Exceptions are thrown if the URL is invalid.
            </summary>
        </member>
        <member name="F:AD.IO.UrlPath._path">
            <summary>
            The string representation of the URL path.
            </summary>
        </member>
        <member name="P:AD.IO.UrlPath.UriPath">
            <summary>
            The Uri representation of the URL path.
            </summary>
        </member>
        <member name="P:AD.IO.UrlPath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.UrlPath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.UrlPath.#ctor(System.String)">
            <summary>
            Creates a new UrlPath object to hold the path to a url.
            </summary>
            <param name="urlPath">A string url path.</param>
            <exception cref="T:System.UriFormatException"/>
        </member>
        <member name="M:AD.IO.UrlPath.Create(System.String)">
            <summary>
            Creates a url along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.UrlPath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.UrlPath.ToString">
            <summary>
            Returns the url path.
            </summary>
        </member>
        <member name="M:AD.IO.UrlPath.op_Implicit(AD.IO.UrlPath)~System.String">
            <summary>
            Implicitly casts a UrlPath as its internal string representation.
            </summary>
        </member>
        <member name="M:AD.IO.UrlPath.op_Implicit(System.String)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a string as a UrlPath. An exception is thrown if the url is not well-formatted.
            </summary>
            <exception cref="T:System.UriFormatException"/>
        </member>
        <member name="M:AD.IO.UrlPath.op_Implicit(AD.IO.UrlPath)~System.Uri">
            <summary>
            Implicitly casts a UrlPath as its internal Uri representation.
            </summary>
        </member>
        <member name="M:AD.IO.UrlPath.op_Explicit(AD.IO.UrlPath)~AD.IO.FilePath">
            <summary>
            Explicitly casts a UrlPath as a Uri. An exception is thrown if the url is not a file path URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AD.IO.UrlPath.op_Explicit(AD.IO.UrlPath)~AD.IO.ZipFilePath">
            <summary>
            Explicitly casts a UrlPath as a Uri. An exception is thrown if the url is not a file path URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.XmlFilePath">
            <summary>
            Path to an XML file on the system. An exception is thrown if the file does not exist, or if it is not an XML file.
            </summary>
        </member>
        <member name="F:AD.IO.XmlFilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.XmlFilePath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.XmlFilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.XmlFilePath.#ctor(System.String)">
            <summary>
            Creates a new XmlFilePath object to hold the path to an XML file.
            </summary>
            <param name="xmlFilePath">A string XML file path.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.XmlFilePath.Create(System.String)">
            <summary>
            Creates an XML file along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.XmlFilePath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.XmlFilePath.ToString">
            <summary>
            Returns the XML file path.
            </summary>
        </member>
        <member name="M:AD.IO.XmlFilePath.op_Implicit(AD.IO.XmlFilePath)~System.String">
            <summary>
            Implicitly casts a XmlFilePath as its internal XML file path string.
            </summary>
        </member>
        <member name="M:AD.IO.XmlFilePath.op_Implicit(System.String)~AD.IO.XmlFilePath">
            <summary>
            Implicitly casts a string as a XmlFilePath. An exception is thrown if the XML file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.XmlFilePath.op_Explicit(AD.IO.XmlFilePath)~AD.IO.FilePath">
            <summary>
            Implicitly casts a XmlFilePath as a FilePath.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.XmlFilePath.op_Explicit(AD.IO.XmlFilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a FilePath as a UrlPath. An exception is thrown if the XML file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.ZipFilePath">
            <summary>
            Path to a zip file on the system. An exception is thrown if the file does not exist, or if it is not a zip file.
            </summary>
        </member>
        <member name="F:AD.IO.ZipFilePath._path">
            <summary>
            The full file path.
            </summary>
        </member>
        <member name="P:AD.IO.ZipFilePath.Extension">
            <summary>
            The file path extension.
            </summary>
        </member>
        <member name="P:AD.IO.ZipFilePath.Name">
            <summary>
            The file name.
            </summary>
        </member>
        <member name="M:AD.IO.ZipFilePath.#ctor(System.String)">
            <summary>
            Creates a new ZipFilePath object to hold the path to a zip file.
            </summary>
            <param name="zipFilePath">A string zip file path.</param>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.ZipFilePath.Create(System.String)">
            <summary>
            Creates a zip file along the path if one does not exist.
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.ZipFilePath.AD#IO#IPath#Create(System.String)">
            <summary>
            Explicit IPath implementation.
            </summary>
        </member>
        <member name="M:AD.IO.ZipFilePath.ToString">
            <summary>
            Returns the zip file path.
            </summary>
        </member>
        <member name="M:AD.IO.ZipFilePath.op_Implicit(AD.IO.ZipFilePath)~System.String">
            <summary>
            Implicitly casts a ZipFilePath as its internal zip file path string.
            </summary>
        </member>
        <member name="M:AD.IO.ZipFilePath.op_Implicit(System.String)~AD.IO.ZipFilePath">
            <summary>
            Implicitly casts a string as a ZipFilePath. An exception is thrown if the zip file is not found.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.ZipFilePath.op_Explicit(AD.IO.ZipFilePath)~AD.IO.FilePath">
            <summary>
            Implicitly casts a ZipFilePath as a FilePath.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AD.IO.ZipFilePath.op_Explicit(AD.IO.ZipFilePath)~AD.IO.UrlPath">
            <summary>
            Implicitly casts a FilePath as a UrlPath. An exception is thrown if the zip file path is not a well-formed URI.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:AD.IO.ReadAsXmlExtensions">
            <summary>
            Extension methods to import files as XML nodes.
            </summary>
        </member>
        <member name="M:AD.IO.ReadAsXmlExtensions.ReadAsXml(AD.IO.DelimitedFilePath)">
            <summary>
            Parses a delimited file into an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. File must include a header row.
            </summary>
            <param name="filePath">The path of the file to be parsed.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the delimited data.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.IO.ReadAsXmlExtensions.ReadAsXml(AD.IO.DocxFilePath,System.String)">
            <summary>
            Opens a Microsoft Word document (.docx) as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="filePath">The file path of the .docx file to be opened. The file name is stored as an attribure of the root element.</param>
            <param name="entryPath">The entry path within the zip archive to read as XML.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the document root of the Microsoft Word document.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.IO.ReadAsXmlExtensions.ReadAsXml(AD.IO.DocxFilePath)">
            <summary>
            Opens a Microsoft Word document (.docx) as an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="filePath">The file path of the .docx file to be opened. The file name is stored as an attribure of the root element.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representing the document root of the Microsoft Word document.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.IO.ReadAsXmlExtensions.ReadAsXml(System.Collections.Generic.IEnumerable{AD.IO.DocxFilePath})">
            <summary>
            Opens Microsoft Word documents (.docx) as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. 
            </summary>
            <param name="filePaths">An enumerable collection of .docx files. The file names are stored as attribures of the root elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> wherein each <see cref="T:System.Xml.Linq.XElement"/> is the document root of one Microsoft Word document.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:AD.IO.ReadAsXmlExtensions.ReadAsXml(System.Linq.ParallelQuery{AD.IO.DocxFilePath})">
            <summary>
            Opens Microsoft Word documents (.docx) as a <see cref="T:System.Linq.ParallelQuery`1"/>. 
            </summary>
            <param name="filePaths">An enumerable collection of .docx files. The file names are stored as attribures of the root elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> wherein each <see cref="T:System.Xml.Linq.XElement"/> is the document root of a Microsoft Word document.</returns>
            <exception cref="T:System.AggregateException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.InvalidDataException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="T:AD.IO.ReadDataExtensions">
            <summary>
            Extension methods to import files as XML nodes.
            </summary>
        </member>
        <member name="M:AD.IO.ReadDataExtensions.ReadData(AD.IO.DelimitedFilePath)">
            <summary>
            Read the delimited file as a dictionary of columns whose values are doubles.
            </summary>
            <param name="delimitedFilePath">The file to read.</param>
            <returns>An IDictionary where each column from the delimited file is stored as a key entry.</returns>
        </member>
        <member name="T:AD.IO.ParseExtensions">
            <summary>
            Parses <see cref="T:System.Collections.Generic.IEnumerator`1"/> as numbers.
            </summary>
        </member>
        <member name="M:AD.IO.ParseExtensions.Parse(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Filters an enumerable of characters for the numeric component, 
            concatenates the characters, and then parses the string as an integer.
            </summary>
            <param name="enumerable">The source enumerable.</param>
            <returns>The numeric components of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an integer.</returns>
        </member>
        <member name="M:AD.IO.ParseExtensions.ParseShort(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Filters an enumerable of characters for the numeric component, 
            concatenates the characters, and then parses the string as an integer.
            </summary>
            <param name="enumerable">The source enumerable.</param>
            <returns>The numeric components of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an integer.</returns>
        </member>
        <member name="M:AD.IO.ParseExtensions.ParseInt(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Filters an enumerable of characters for the numeric component, 
            concatenates the characters, and then parses the string as an integer.
            </summary>
            <param name="enumerable">The source enumerable.</param>
            <returns>The numeric components of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an integer.</returns>
        </member>
        <member name="M:AD.IO.ParseExtensions.ParseLong(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Filters an enumerable of characters for the numeric component, 
            concatenates the characters, and then parses the string as a long.
            </summary>
            <param name="enumerable">The source enumerable.</param>
            <returns>The numeric components of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a long.</returns>
        </member>
        <member name="M:AD.IO.ParseExtensions.ParseDouble(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Filters an enumerable of characters for the numeric component, 
            concatenates the characters, and then parses the string as a double.
            </summary>
            <param name="enumerable">The source enumerable.</param>
            <returns>The numeric components of the source <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a double.</returns>
        </member>
        <member name="T:AD.IO.SplitDelimitedExtensions">
            <summary>
            Extension methods to split delimited strings into enumerable collections.
            </summary>
        </member>
        <member name="M:AD.IO.SplitDelimitedExtensions.SplitDelimitedLine(System.String,System.Char)">
            <summary>
            Splits a string on the delimiter character. Preserves delimiters embeded in double quotation marks.
            </summary>
            <param name="line">The delimited string to be split.</param>
            <param name="delimiter">The character that delimits the string.</param>
            <returns>An enumerable collection of the strings between comma characters.</returns>
        </member>
        <member name="M:AD.IO.SplitDelimitedExtensions.SplitDelimitedLine(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Splits the strings of an the enumerable on the delimiter characters. Preserves delimiters embeded in double quotation marks.
            </summary>
            <param name="lines">The enumerable collection of delimited strings to be split.</param>
            <param name="delimiter">The character delimiting the strings.</param>
            <returns>An enumerable of enumerable collections of the split strings.</returns>
        </member>
        <member name="M:AD.IO.SplitDelimitedExtensions.SplitDelimitedLine(System.Linq.ParallelQuery{System.String},System.Char)">
            <summary>
            Splits the strings of an the enumerable on the delimiter characters. Preserves delimiters embeded in double quotation marks.
            </summary>
            <param name="lines">The enumerable collection of delimited strings to be split.</param>
            <param name="delimiter">The character delimiting the strings.</param>
            <returns>An enumerable of enumerable collections of the split strings.</returns>
        </member>
        <member name="T:AD.IO.ToCapitalizedExtensions">
            <summary>
            Extension method providing capitalization utilities.
            </summary>
        </member>
        <member name="M:AD.IO.ToCapitalizedExtensions.ToCapitalizeFirst(System.String)">
            <summary>
            Capitalizes the first character of the string.
            </summary>
            <param name="value">The string to be capitalized.</param>
            <returns>The input string with its first character converted to its uppercase equivalent.</returns>
        </member>
        <member name="M:AD.IO.ToCapitalizedExtensions.ToCapitalizeAllFirst(System.String)">
            <summary>
            Capitalizes the first letter character following each period of the string.
            </summary>
            <param name="value">The string to be capitalized.</param>
            <returns>The input string with each first character following a period converted to its uppercase equivalent.</returns>
        </member>
        <member name="T:AD.IO.ToDelimitedExtensions">
            <summary>
            Extension methods to create delimited strings from various collections.
            </summary>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.MakeSafeString(System.String,System.String)">
            <summary>
            Provides safe handling for string components.
            </summary>
            <param name="value">The string value.</param>
            <param name="delimiter">The string delimiter.</param>
            <returns>The original string, an empty string, or the original string wrapped in double quotes.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Appends the strings of the enumerable collection by a delimiter. 
            Strings containing the delimiter are enclosed in double quotation marks.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Linq.ParallelQuery{System.String},System.String)">
            <summary>
            Appends the strings of the enumerable collection by a delimiter. 
            Strings containing the delimiter are enclosed in double quotation marks.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the delimited values of the <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> from which values are retrieved.</param>
            <param name="delimiter">The character to delimit the values of the child elements.</param>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
            <summary>
            Returns the delimiter delimited values of the children each <see cref="T:System.Xml.Linq.XElement"/> delimited by new lines.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter and new lines.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Linq.ParallelQuery{System.Xml.Linq.XElement},System.String)">
            <summary>
            Returns the delimiter delimited values of the children each <see cref="T:System.Xml.Linq.XElement"/> delimited by new lines.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter and new lines.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Linq.ParallelQuery{``0},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Collections.Generic.IEnumerable{System.Linq.ParallelQuery{System.String}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Linq.ParallelQuery{System.Collections.Generic.IEnumerable{System.String}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Linq.ParallelQuery{System.Linq.ParallelQuery{System.String}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Collections.Generic.IEnumerable{System.Linq.ParallelQuery{``0}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Linq.ParallelQuery{System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Linq.ParallelQuery{System.Linq.ParallelQuery{``0}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited``1(System.Collections.Immutable.ImmutableArray{System.Collections.Immutable.ImmutableArray{``0}},System.String)">
            <summary>
            Appends the elements of the enumerable collection by a delimiter.
            </summary>
            <param name="enumerable">A collection to be delimited.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="M:AD.IO.ToDelimitedExtensions.ToDelimited(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Appends the elements of the document by a delimiter.
            </summary>
            <param name="document">An XDocument to be transformed into a delimited string.</param>
            <param name="delimiter">The delimiter used to delimit the collection.</param>
            <returns>A string delimited by the delimiter.</returns>
        </member>
        <member name="T:AD.IO.WriteDelimitedExtensions">
            <summary>
            Extension methods to write an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a delimited file.
            </summary>
        </member>
        <member name="M:AD.IO.WriteDelimitedExtensions.WriteDelimited``1(System.Collections.Generic.IEnumerable{``0},AD.IO.DelimitedFilePath,System.String,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a delimited file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="filePath">The file to which the content is written.</param>
            <param name="delimiter">The character used to delimit values.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
        <member name="M:AD.IO.WriteDelimitedExtensions.WriteDelimited``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},AD.IO.DelimitedFilePath,System.String,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a delimited file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="filePath">The file to which the content is written.</param>
            <param name="delimiter">The character used to delimit values.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
        <member name="M:AD.IO.WriteDelimitedExtensions.WriteDelimited(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.DelimitedFilePath,System.String,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a delimited file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="filePath">The file to which the content is written.</param>
            <param name="delimiter">The character used to delimit values.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
        <member name="M:AD.IO.WriteDelimitedExtensions.WriteDelimited(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.DelimitedFilePath,System.String,System.String,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a delimited file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="filePath">The file to which the content is written.</param>
            <param name="completedMessage">The message written to the console upon completion.</param>
            <param name="delimiter">The character used to delimit values.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
        <member name="T:AD.IO.WriteHtmlExtensions">
            <summary>
            Extension methods to write <see cref="T:System.Xml.Linq.XElement"/> objects to HTML files.
            </summary>
        </member>
        <member name="M:AD.IO.WriteHtmlExtensions.WriteHtml(System.Xml.Linq.XElement,AD.IO.HtmlFilePath,System.Boolean)">
            <summary>
            Writes the &lt;html&gt; as "&lt;!DOCTYPE html&gt;&lt;html&gt;...&lt;/html&gt;" to the <see cref="T:AD.IO.HtmlFilePath"/>.
            </summary>
            <param name="element">The HTML element to be written to the <see cref="T:AD.IO.HtmlFilePath"/>.</param>
            <param name="htmlFilePath">The HTML file path to which the element is written.</param>
            <param name="overwrite">Overwrite if the file already exists.</param>
        </member>
        <member name="M:AD.IO.WriteHtmlExtensions.WriteHtml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.HtmlFilePath,System.Boolean)">
            <summary>
            Wraps the elements in an &lt;html&gt; tag and writes "&lt;!DOCTYPE html&gt;&lt;html&gt;...&lt;/html&gt;" to the <see cref="T:AD.IO.HtmlFilePath"/>.
            </summary>
            <param name="elements">The HTML elements to be written to the <see cref="T:AD.IO.HtmlFilePath"/>.</param>
            <param name="htmlFilePath">The HTML file path to which the elements are written.</param>
            <param name="overwrite">Overwrite if the file already exists.</param>
        </member>
        <member name="M:AD.IO.WriteHtmlExtensions.WriteHtml(System.Xml.Linq.XElement,AD.IO.HtmlFilePath,System.String,System.Boolean)">
            <summary>
            Writes the &lt;html&gt; as "&lt;!DOCTYPE html&gt;&lt;html&gt;...&lt;/html&gt;" to the <see cref="T:AD.IO.HtmlFilePath"/>.
            </summary>
            <param name="element">The HTML element to be written to the <see cref="T:AD.IO.HtmlFilePath"/>.</param>
            <param name="htmlFilePath">The HTML file path to which the element is written.</param>
            <param name="completedMessage">A message written to SDTOUT upon completion. If present, {0} is replaced with the current DateTime.Now.TimeOfDay</param>
            <param name="overwrite">Overwrite if the file already exists.</param>
        </member>
        <member name="M:AD.IO.WriteHtmlExtensions.WriteHtml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.HtmlFilePath,System.String,System.Boolean)">
            <summary>
            Writes the enumerable of HTML elements as children of &lt;html&gt;...&lt;/html&gt; to the <see cref="T:AD.IO.HtmlFilePath"/>.
            </summary>
            <param name="elements">The HTML elements to be written to the <see cref="T:AD.IO.HtmlFilePath"/>.</param>
            <param name="htmlFilePath">The HTML file path to which the elements are written.</param>
            <param name="completedMessage">A message written to SDTOUT upon completion. If present, {0} is replaced with the current DateTime.Now.TimeOfDay</param>
            <param name="overwrite">Overwrite if the file already exists.</param>
        </member>
        <member name="T:AD.IO.WriteIntoExtensions">
            <summary>
            Extension methods to save XML content into the <see cref="T:System.IO.Compression.ZipArchive"/> of a <see cref="T:AD.IO.DocxFilePath"/>.
            </summary>
        </member>
        <member name="M:AD.IO.WriteIntoExtensions.WriteInto(System.Xml.Linq.XElement,AD.IO.DocxFilePath,System.String)">
            <summary>
            Saves the <paramref name="element"/> into the <paramref name="toFilePath"/> at the <paramref name="entryPath"/>.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> that is written.</param>
            <param name="toFilePath">The file into which the <see cref="T:System.Xml.Linq.XElement"/> is written.</param>
            <param name="entryPath">The location to which the <see cref="T:System.Xml.Linq.XElement"/> is written.</param>
        </member>
        <member name="M:AD.IO.WriteIntoExtensions.WriteInto(AD.IO.DocxFilePath,AD.IO.DocxFilePath,System.String)">
            <summary>
            Saves the <paramref name="fromFilePath"/> into the <paramref name="toFilePath"/> at the <paramref name="entryPath"/>.
            </summary>
            <param name="fromFilePath">The file that is copied.</param>
            <param name="toFilePath">The file into which <paramref name="fromFilePath"/> is copied.</param>
            <param name="entryPath">The location to which the <paramref name="toFilePath"/> is copied.</param>
        </member>
        <member name="M:AD.IO.WriteIntoExtensions.WriteInto(AD.IO.DocxFilePath,AD.IO.DocxFilePath,System.String,System.String)">
            <summary>
            Saves the file at <param name="fromEntryPath"/> in <paramref name="fromFilePath"/> into <param name="toEntryPath"/> in <paramref name="toFilePath"/>.
            </summary>
            <param name="fromFilePath">The file that is copied.</param>
            <param name="toFilePath">The file into which <paramref name="fromFilePath"/> is copied.</param>
            <param name="fromEntryPath">The location that is copied to the <paramref name="toEntryPath"/>.</param>
            <param name="toEntryPath">The location to which the <paramref name="fromEntryPath"/> is copied.</param>
        </member>
        <member name="M:AD.IO.WriteIntoExtensions.WriteInto(AD.IO.DocxFilePath,AD.IO.DocxFilePath)">
            <summary>
            Saves the <paramref name="fromFilePath"/> into the <paramref name="toFilePath"/> at 'word/[name][extension]'.
            </summary>
            <param name="fromFilePath">The file that is copied.</param>
            <param name="toFilePath">The file into which <paramref name="fromFilePath"/> is copied.</param>
        </member>
        <member name="T:AD.IO.WriteXmlExtensions">
            <summary>
            Extension methods to write an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to an XML file.
            </summary>
        </member>
        <member name="M:AD.IO.WriteXmlExtensions.WriteXml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.XmlFilePath,System.Xml.Linq.SaveOptions,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an XML file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="xmlFilePath">The file to which the content is written.</param>
            <param name="saveOptions">Specifies serialization options.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
        <member name="M:AD.IO.WriteXmlExtensions.WriteXml(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},AD.IO.XmlFilePath,System.String,System.Xml.Linq.SaveOptions,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an XML file.
            </summary>
            <param name="elements">The source enumerable.</param>
            <param name="xmlFilePath">The file to which the content is written.</param>
            <param name="completedMessage">The message written to the console upon completion.</param>
            <param name="saveOptions">Specifies serialization options.</param>
            <param name="overwrite">True to overwrite an existing file.</param>
        </member>
    </members>
</doc>
